/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:39:01 GMT 2024
 */

package com.axios.core.body;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.body.MultipartBody;
import com.axios.core.resource.BytesResource;
import com.axios.core.resource.FileResource;
import com.axios.core.resource.MultiResource;
import com.axios.core.resource.Resource;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultipartBody_ESTest extends MultipartBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MultipartBody multipartBody0 = MultipartBody.create(hashMap0, (Charset) null);
      // Undeclared exception!
      try { 
        multipartBody0.write((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Charset charset0 = Charset.defaultCharset();
      hashMap0.put("multipart/form-data; boundary=--------------------axios_yhfxj0mmw356t75x", "multipart/form-data; boundary=--------------------axios_yhfxj0mmw356t75x");
      MultipartBody multipartBody0 = MultipartBody.create(hashMap0, charset0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("multipart/form-data; boundary=--------------------axios_yhfxj0mmw356t75x", false);
      multipartBody0.write(mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Charset charset0 = Charset.defaultCharset();
      MultipartBody multipartBody0 = new MultipartBody(hashMap0, charset0);
      LinkedList<Resource> linkedList0 = new LinkedList<Resource>();
      FileResource fileResource0 = new FileResource("");
      linkedList0.add((Resource) fileResource0);
      MultiResource multiResource0 = new MultiResource(linkedList0);
      hashMap0.put("#wFds[71f>\"l:@m,", multiResource0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Content-Disposition: form-data; name=\"com.axios.core.body.MultipartBody\"; filename=\"\r\n\r\n\"\r\n");
      // Undeclared exception!
      try { 
        multipartBody0.write(mockPrintStream0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Charset charset0 = Charset.defaultCharset();
      MultipartBody multipartBody0 = new MultipartBody(hashMap0, charset0);
      File file0 = MockFile.createTempFile(",J5<VH", ",J5<VH");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[9];
      BytesResource bytesResource0 = new BytesResource(byteArray0);
      hashMap0.put("@dNs-u", bytesResource0);
      // Undeclared exception!
      try { 
        multipartBody0.write(mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Charset charset0 = Charset.defaultCharset();
      MultipartBody multipartBody0 = MultipartBody.create(hashMap0, charset0);
      LinkedList<Resource> linkedList0 = new LinkedList<Resource>();
      MultiResource multiResource0 = new MultiResource(linkedList0);
      hashMap0.put("#wFds[71f>\"l:@m,", multiResource0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Content-Disposition: form-data; name=\"]FJVKiv~.S\"; filename=\"]FJVKiv~.S\"\r\n");
      multipartBody0.write(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultipartBody multipartBody0 = new MultipartBody((Map<String, Object>) null, (Charset) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        multipartBody0.write(pipedOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = MultipartBody.contentDisposition("Content-Disposition: form-data; name=\"]FJVKiv~.S\"; filename=\"]FJVKiv~.S\"\r\n");
      assertEquals("Content-Disposition: form-data; name=\"Content-Disposition: form-data; name=\"]FJVKiv~.S\"; filename=\"]FJVKiv~.S\"\r\n\"\r\n\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = MultipartBody.getContentType();
      //  // Unstable assertion: assertEquals("multipart/form-data; boundary=--------------------axios_903lykjbs55wlo16", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = MultipartBody.contentDispositionFile("", "L!");
      assertEquals("Content-Disposition: form-data; name=\"\"; filename=\"L!\"\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String string0 = MultipartBody.contentTypeFile("L!");
      assertEquals("Content-Type: L!\r\n\r\n", string0);
  }
}
