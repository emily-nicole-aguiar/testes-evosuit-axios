/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:42:10 GMT 2024
 */

package com.axios.core.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.map.MapWrapper;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MapWrapper_ESTest extends MapWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, String> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, String>();
      MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, String> mapWrapper0 = new MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, String>(hashMap0);
      Set<AbstractMap.SimpleEntry<Integer, Object>> set0 = mapWrapper0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      MapWrapper<Object, Integer> mapWrapper0 = new MapWrapper<Object, Integer>(hashMap0);
      mapWrapper0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, MapWrapper<String, Integer>> hashMap0 = new HashMap<Object, MapWrapper<String, Integer>>();
      MapWrapper<Object, MapWrapper<String, Integer>> mapWrapper0 = new MapWrapper<Object, MapWrapper<String, Integer>>(hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      MapWrapper<String, Integer> mapWrapper1 = new MapWrapper<String, Integer>(hashMap1);
      hashMap0.put((Object) null, mapWrapper1);
      int int0 = mapWrapper0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<MapWrapper<Object, Object>, Object> hashMap0 = new HashMap<MapWrapper<Object, Object>, Object>();
      MapWrapper<MapWrapper<Object, Object>, Object> mapWrapper0 = new MapWrapper<MapWrapper<Object, Object>, Object>(hashMap0);
      MapWrapper<Object, Object> mapWrapper1 = new MapWrapper<Object, Object>((Map<Object, Object>) null);
      boolean boolean0 = mapWrapper0.replace(mapWrapper1, (Object) hashMap0, (Object) "l$88so-_usNKU8;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, MapWrapper<Object, Object>> hashMap0 = new HashMap<String, MapWrapper<Object, Object>>();
      MapWrapper<String, MapWrapper<Object, Object>> mapWrapper0 = new MapWrapper<String, MapWrapper<Object, Object>>(hashMap0);
      MapWrapper<Object, Object> mapWrapper1 = mapWrapper0.remove((Object) "NI502LB262*+");
      assertNull(mapWrapper1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> hashMap0 = new HashMap<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      MapWrapper<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> mapWrapper0 = new MapWrapper<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>(0);
      MapWrapper<Integer, Object> mapWrapper1 = new MapWrapper<Integer, Object>(hashMap1);
      MapWrapper<Integer, Object> mapWrapper2 = new MapWrapper<Integer, Object>(mapWrapper1);
      Integer integer0 = new Integer(187);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
      hashMap0.put(mapWrapper2, abstractMap_SimpleImmutableEntry0);
      MapWrapper<Integer, Object> mapWrapper3 = new MapWrapper<Integer, Object>(hashMap1);
      MapWrapper<Integer, Object> mapWrapper4 = new MapWrapper<Integer, Object>(mapWrapper3);
      mapWrapper0.putIfAbsent(mapWrapper4, abstractMap_SimpleImmutableEntry0);
      assertEquals(1, mapWrapper0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, String>, String> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, String>, String>();
      hashMap0.put((AbstractMap.SimpleImmutableEntry<String, String>) null, "o-Y!A}Eyq|T");
      MapWrapper<AbstractMap.SimpleImmutableEntry<String, String>, String> mapWrapper0 = new MapWrapper<AbstractMap.SimpleImmutableEntry<String, String>, String>(hashMap0);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      String string0 = mapWrapper0.merge((AbstractMap.SimpleImmutableEntry<String, String>) null, "", biFunction0);
      assertNull(string0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapWrapper<String, String> mapWrapper0 = new MapWrapper<String, String>(hashMap0);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = mapWrapper0.merge((String) null, "", biFunction0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapWrapper<String, Integer> mapWrapper0 = new MapWrapper<String, Integer>(hashMap0);
      Iterator<Map.Entry<String, Integer>> iterator0 = (Iterator<Map.Entry<String, Integer>>)mapWrapper0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MapWrapper<Object, MapWrapper<Object, String>> mapWrapper0 = new MapWrapper<Object, MapWrapper<Object, String>>((Map<Object, MapWrapper<Object, String>>) null);
      Map<Object, MapWrapper<Object, String>> map0 = mapWrapper0.getRaw();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      MapWrapper<Integer, String> mapWrapper0 = new MapWrapper<Integer, String>(hashMap1);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(mapWrapper0, "");
      hashMap0.put("", abstractMap_SimpleEntry0);
      MapWrapper<String, AbstractMap.SimpleEntry<Object, Object>> mapWrapper1 = new MapWrapper<String, AbstractMap.SimpleEntry<Object, Object>>(hashMap0);
      Map<String, AbstractMap.SimpleEntry<Object, Object>> map0 = mapWrapper1.getRaw();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      MapWrapper<Integer, String> mapWrapper0 = new MapWrapper<Integer, String>(hashMap0);
      String string0 = mapWrapper0.getOrDefault(hashMap0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<MapWrapper<Object, Integer>, String> hashMap0 = new HashMap<MapWrapper<Object, Integer>, String>();
      MapWrapper<MapWrapper<Object, Integer>, String> mapWrapper0 = new MapWrapper<MapWrapper<Object, Integer>, String>(hashMap0);
      Integer integer0 = new Integer(0);
      String string0 = mapWrapper0.getOrDefault(integer0, "mGEApz~G+)ZkTeBiAt ");
      assertEquals("mGEApz~G+)ZkTeBiAt ", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<MapWrapper<Object, Object>, Object> hashMap0 = new HashMap<MapWrapper<Object, Object>, Object>();
      MapWrapper<MapWrapper<Object, Object>, Object> mapWrapper0 = new MapWrapper<MapWrapper<Object, Object>, Object>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper1 = new MapWrapper<Object, Object>(hashMap1);
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Object> function2 = function0.compose((Function<? super Object, ?>) function1);
      Object object0 = mapWrapper0.computeIfAbsent(mapWrapper1, function2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper0 = new MapWrapper<Object, Object>(hashMap0);
      Function<Object, Object> function0 = Function.identity();
      MapWrapper mapWrapper1 = (MapWrapper)mapWrapper0.computeIfAbsent(mapWrapper0, function0);
      assertFalse(mapWrapper1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MapWrapper<String, String> mapWrapper0 = new MapWrapper<String, String>((Map<String, String>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MapWrapper<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>> mapWrapper0 = new MapWrapper<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>>((Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MapWrapper<Integer, MapWrapper<String, Object>> mapWrapper0 = new MapWrapper<Integer, MapWrapper<String, Object>>((Map<Integer, MapWrapper<String, Object>>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MapWrapper<String, Object> mapWrapper0 = new MapWrapper<String, Object>((Map<String, Object>) null);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapWrapper0.replaceAll(biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<MapWrapper<String, Integer>, MapWrapper<Object, Object>> hashMap0 = new HashMap<MapWrapper<String, Integer>, MapWrapper<Object, Object>>();
      MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object> mapWrapper0 = new MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object>((Map<AbstractMap.SimpleEntry<Integer, Object>, Object>) null);
      Integer integer0 = new Integer(16);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, hashMap0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        mapWrapper0.replace(abstractMap_SimpleEntry0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MapWrapper<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, Integer>> mapWrapper0 = new MapWrapper<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, Integer>>((Map<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, Integer>>) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        mapWrapper0.remove((Object) null, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(2264);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(hashMap0, "g54<28;1J`5G>'{");
      hashMap0.put(integer0, abstractMap_SimpleImmutableEntry0);
      MapWrapper<Object, AbstractMap.SimpleImmutableEntry<Object, String>> mapWrapper0 = new MapWrapper<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(hashMap0);
      // Undeclared exception!
      try { 
        mapWrapper0.remove((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MapWrapper<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> mapWrapper0 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>) null);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("^jEAEQRs$J^h", mapWrapper0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        mapWrapper0.putIfAbsent(abstractMap_SimpleImmutableEntry1, "^jEAEQRs$J^h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MapWrapper<MapWrapper<String, Object>, String> mapWrapper0 = new MapWrapper<MapWrapper<String, Object>, String>((Map<MapWrapper<String, Object>, String>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.putAll(mapWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MapWrapper<Integer, Object> mapWrapper0 = new MapWrapper<Integer, Object>((Map<Integer, Object>) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        mapWrapper0.put(integer0, mapWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer(1827);
      hashMap0.put("", integer0);
      MapWrapper<String, Object> mapWrapper0 = new MapWrapper<String, Object>(hashMap0);
      mapWrapper0.replace("", (Object) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper1 = new MapWrapper<Object, Object>(hashMap1);
      Object object0 = new Object();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapWrapper1.merge(mapWrapper0, object0, biFunction0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MapWrapper<Integer, String> mapWrapper0 = new MapWrapper<Integer, String>((Map<Integer, String>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MapWrapper<Integer, Object> mapWrapper0 = new MapWrapper<Integer, Object>((Map<Integer, Object>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MapWrapper<Integer, Object> mapWrapper0 = new MapWrapper<Integer, Object>((Map<Integer, Object>) null);
      Integer integer0 = new Integer(1178);
      // Undeclared exception!
      try { 
        mapWrapper0.get(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper0 = new MapWrapper<Object, Object>(hashMap0);
      // Undeclared exception!
      try { 
        mapWrapper0.forEach((BiConsumer<? super Object, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MapWrapper<Integer, Integer> mapWrapper0 = new MapWrapper<Integer, Integer>((Map<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MapWrapper<String, Integer> mapWrapper0 = new MapWrapper<String, Integer>((Map<String, Integer>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MapWrapper<String, Object> mapWrapper0 = new MapWrapper<String, Object>((Map<String, Object>) null);
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapWrapper0.computeIfPresent("\".", biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MapWrapper<MapWrapper<Object, String>, Object> mapWrapper0 = new MapWrapper<MapWrapper<Object, String>, Object>((Map<MapWrapper<Object, String>, Object>) null);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapWrapper<Object, String> mapWrapper1 = new MapWrapper<Object, String>(hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapWrapper0.compute(mapWrapper1, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MapWrapper<String, Object> mapWrapper0 = new MapWrapper<String, Object>((Map<String, Object>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapWrapper<String, String> mapWrapper0 = new MapWrapper<String, String>(hashMap0);
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)mapWrapper0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MapWrapper<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> mapWrapper0 = new MapWrapper<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>((Map<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapWrapper<String, String> mapWrapper0 = new MapWrapper<String, String>(hashMap0);
      boolean boolean0 = mapWrapper0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapWrapper<String, String> mapWrapper0 = new MapWrapper<String, String>(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      MapWrapper<Object, Integer> mapWrapper1 = new MapWrapper<Object, Integer>(hashMap1);
      boolean boolean0 = mapWrapper0.equals(mapWrapper1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      MapWrapper<AbstractMap.SimpleImmutableEntry<Object, String>, Object> mapWrapper0 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(hashMap0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = mapWrapper0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      MapWrapper<String, String> mapWrapper0 = new MapWrapper<String, String>(hashMap1);
      boolean boolean0 = mapWrapper0.containsValue(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>();
      MapWrapper<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> mapWrapper0 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>(hashMap0);
      boolean boolean0 = mapWrapper0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<MapWrapper<Integer, Object>, AbstractMap.SimpleEntry<Object, String>> hashMap0 = new HashMap<MapWrapper<Integer, Object>, AbstractMap.SimpleEntry<Object, String>>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper0 = new MapWrapper<Integer, Object>(hashMap1);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("", "");
      hashMap0.put(mapWrapper0, abstractMap_SimpleEntry0);
      assertTrue(mapWrapper0.isEmpty());
      
      MapWrapper<MapWrapper<Integer, Object>, AbstractMap.SimpleEntry<Object, String>> mapWrapper1 = new MapWrapper<MapWrapper<Integer, Object>, AbstractMap.SimpleEntry<Object, String>>(hashMap0);
      boolean boolean0 = mapWrapper1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper0 = new MapWrapper<Integer, Object>(hashMap0);
      MapWrapper<Object, Integer> mapWrapper1 = new MapWrapper<Object, Integer>((Map<Object, Integer>) null);
      boolean boolean0 = mapWrapper0.remove((Object) mapWrapper1, (Object) ">ENS7zGJ}0OXauK<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      MapWrapper<Integer, String> mapWrapper0 = new MapWrapper<Integer, String>(hashMap0);
      Integer integer0 = new Integer((-1));
      String string0 = mapWrapper0.put(integer0, "Q[)r>m#IQl+X6},");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      MapWrapper<Integer, String> mapWrapper0 = new MapWrapper<Integer, String>(hashMap0);
      Map<Integer, String> map0 = mapWrapper0.getRaw();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapWrapper<String, String> mapWrapper0 = new MapWrapper<String, String>(hashMap0);
      String string0 = mapWrapper0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<MapWrapper<Object, Object>, Integer> hashMap0 = new HashMap<MapWrapper<Object, Object>, Integer>();
      MapWrapper<MapWrapper<Object, Object>, Integer> mapWrapper0 = new MapWrapper<MapWrapper<Object, Object>, Integer>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper1 = new MapWrapper<Object, Object>(hashMap1);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = mapWrapper0.computeIfPresent(mapWrapper1, biFunction0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleEntry<String, Integer>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<String, Integer>>();
      MapWrapper<String, AbstractMap.SimpleEntry<String, Integer>> mapWrapper0 = new MapWrapper<String, AbstractMap.SimpleEntry<String, Integer>>(hashMap0);
      int int0 = mapWrapper0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapWrapper<String, Integer> mapWrapper0 = new MapWrapper<String, Integer>(hashMap0);
      Integer integer0 = mapWrapper0.get(hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper0 = new MapWrapper<Integer, Object>(hashMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      mapWrapper0.replaceAll(biFunction0);
      assertTrue(mapWrapper0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      MapWrapper<Object, Integer> mapWrapper0 = new MapWrapper<Object, Integer>(hashMap0);
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>();
      mapWrapper0.putAll(hashMap1);
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper0 = new MapWrapper<Integer, Object>(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      MapWrapper<Object, Integer> mapWrapper1 = new MapWrapper<Object, Integer>(hashMap1);
      MapWrapper<Object, Integer> mapWrapper2 = new MapWrapper<Object, Integer>(mapWrapper1);
      boolean boolean0 = mapWrapper2.containsKey(mapWrapper0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapWrapper<String, Object> mapWrapper0 = new MapWrapper<String, Object>(hashMap0);
      Object object0 = mapWrapper0.replace("", (Object) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(1344);
      MapWrapper<Integer, MapWrapper<Object, String>> mapWrapper0 = new MapWrapper<Integer, MapWrapper<Object, String>>((Map<Integer, MapWrapper<Object, String>>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.replace(integer0, (MapWrapper<Object, String>) null, (MapWrapper<Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper0 = new MapWrapper<Integer, Object>(hashMap0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      mapWrapper0.forEach(biConsumer0);
      assertTrue(mapWrapper0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapWrapper<String, Integer> mapWrapper0 = new MapWrapper<String, Integer>(hashMap0);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer0 = mapWrapper0.compute("YFT~PffjyfP)%yM>", biFunction0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> hashMap0 = new HashMap<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      MapWrapper<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> mapWrapper0 = new MapWrapper<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>(hashMap0);
      mapWrapper0.clear();
      assertTrue(mapWrapper0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer((-550));
      MapWrapper<Integer, Integer> mapWrapper0 = new MapWrapper<Integer, Integer>((Map<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.remove((Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> hashMap0 = new HashMap<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      MapWrapper<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> mapWrapper0 = new MapWrapper<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>(0);
      MapWrapper<Integer, Object> mapWrapper1 = new MapWrapper<Integer, Object>(hashMap1);
      Integer integer0 = new Integer(187);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = mapWrapper0.putIfAbsent(mapWrapper1, abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MapWrapper<Object, Integer> mapWrapper0 = new MapWrapper<Object, Integer>((Map<Object, Integer>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.getOrDefault(mapWrapper0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer(1827);
      Object object0 = hashMap0.put("", integer0);
      MapWrapper<String, Object> mapWrapper0 = new MapWrapper<String, Object>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper1 = new MapWrapper<Object, Object>(hashMap1);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapWrapper1.merge(mapWrapper0, object0, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapWrapper<String, Integer> mapWrapper0 = new MapWrapper<String, Integer>(hashMap0);
      // Undeclared exception!
      try { 
        mapWrapper0.computeIfAbsent("com.axios.core.map.MapWrapper", (Function<? super String, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Integer>(0);
      MapWrapper<AbstractMap.SimpleEntry<Object, Object>, Integer> mapWrapper0 = new MapWrapper<AbstractMap.SimpleEntry<Object, Object>, Integer>(hashMap0);
      Collection<Integer> collection0 = mapWrapper0.values();
      assertFalse(collection0.contains(0));
  }
}
