/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:59:04 GMT 2024
 */

package com.axios.core.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.map.CaseInsensitiveMap;
import java.nio.CharBuffer;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CaseInsensitiveMap_ESTest extends CaseInsensitiveMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>();
      Object object0 = caseInsensitiveMap0.customKey((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = null;
      try {
        caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.CaseInsensitiveMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CaseInsensitiveMap<Integer, CharBuffer> caseInsensitiveMap0 = null;
      try {
        caseInsensitiveMap0 = new CaseInsensitiveMap<Integer, CharBuffer>((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CaseInsensitiveMap<String, Object> caseInsensitiveMap0 = null;
      try {
        caseInsensitiveMap0 = new CaseInsensitiveMap<String, Object>((-367));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -367
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CaseInsensitiveMap<CharBuffer, Object> caseInsensitiveMap0 = null;
      try {
        caseInsensitiveMap0 = new CaseInsensitiveMap<CharBuffer, Object>(1440.8651F, (Map<? extends CharBuffer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.CaseInsensitiveMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CaseInsensitiveMap<String, Integer> caseInsensitiveMap0 = new CaseInsensitiveMap<String, Integer>();
      CaseInsensitiveMap<String, Object> caseInsensitiveMap1 = null;
      try {
        caseInsensitiveMap1 = new CaseInsensitiveMap<String, Object>((-174.836F), caseInsensitiveMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -174.836
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CaseInsensitiveMap<CharBuffer, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<CharBuffer, Object>(0, 979.7412F);
      assertEquals(0, caseInsensitiveMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CaseInsensitiveMap<Integer, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Integer, String>();
      CaseInsensitiveMap<Integer, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Integer, String>(979.7412F, caseInsensitiveMap0);
      assertEquals(0, caseInsensitiveMap1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CaseInsensitiveMap<String, Integer> caseInsensitiveMap0 = new CaseInsensitiveMap<String, Integer>(0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = caseInsensitiveMap0.replace("", integer0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CaseInsensitiveMap<Integer, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Integer, String>();
      CaseInsensitiveMap caseInsensitiveMap1 = (CaseInsensitiveMap)caseInsensitiveMap0.customKey(caseInsensitiveMap0);
      assertEquals(0, caseInsensitiveMap1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CaseInsensitiveMap<Integer, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Integer, String>();
      CaseInsensitiveMap<Integer, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Integer, String>(caseInsensitiveMap0);
      assertTrue(caseInsensitiveMap1.equals((Object)caseInsensitiveMap0));
  }
}
