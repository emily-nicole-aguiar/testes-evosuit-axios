/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:18:28 GMT 2024
 */

package com.axios.core.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.map.TableMap;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TableMap_ESTest extends TableMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      BigDecimal bigDecimal1 = new BigDecimal((-137));
      bigDecimalArray0[1] = bigDecimal1;
      TableMap<BigDecimal, Object> tableMap0 = new TableMap<BigDecimal, Object>(bigDecimalArray0, bigDecimalArray0);
      List<Object> list0 = tableMap0.getValues(bigDecimal0);
      assertTrue(list0.isEmpty());
      assertFalse(tableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String>[] linkedListArray0 = (LinkedList<String>[]) Array.newInstance(LinkedList.class, 5);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedListArray0[1] = linkedList0;
      TableMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>> tableMap0 = new TableMap<LinkedList<String>, AbstractMap.SimpleImmutableEntry<Object, Object>>(linkedListArray0, (AbstractMap.SimpleImmutableEntry<Object, Object>[]) null);
      tableMap0.remove((Object) linkedList0);
      assertEquals(4, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "1zX[U";
      TableMap<String, String> tableMap0 = new TableMap<String, String>((String[]) null, stringArray0);
      String string0 = tableMap0.getKey("1zX[U");
      assertNull(string0);
      assertEquals(0, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[4] = "";
      LinkedList<String>[] linkedListArray0 = (LinkedList<String>[]) Array.newInstance(LinkedList.class, 0);
      TableMap<String, LinkedList<String>> tableMap0 = new TableMap<String, LinkedList<String>>(stringArray0, linkedListArray0);
      boolean boolean0 = tableMap0.replace("", (LinkedList<String>) null, (LinkedList<String>) null);
      assertEquals(6, tableMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String>[] linkedListArray0 = (LinkedList<String>[]) Array.newInstance(LinkedList.class, 2);
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      TableMap<Object, BigDecimal> tableMap0 = new TableMap<Object, BigDecimal>(linkedListArray0, bigDecimalArray0);
      int int0 = tableMap0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      LinkedList<String>[] linkedListArray0 = (LinkedList<String>[]) Array.newInstance(LinkedList.class, 2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      TableMap<Integer, LinkedList<String>> tableMap0 = new TableMap<Integer, LinkedList<String>>(integerArray0, linkedListArray0);
      tableMap0.put((Integer) null, linkedList0);
      assertEquals(5, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      TableMap<String, Object> tableMap0 = new TableMap<String, Object>(stringArray0, stringArray0);
      Set<String> set0 = tableMap0.keySet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TableMap<BigDecimal, Object> tableMap0 = new TableMap<BigDecimal, Object>(1);
      Iterator<Map.Entry<BigDecimal, Object>> iterator0 = (Iterator<Map.Entry<BigDecimal, Object>>)tableMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      String[] stringArray0 = new String[3];
      stringArray0[2] = "";
      TableMap<BigDecimal, String> tableMap0 = new TableMap<BigDecimal, String>(bigDecimalArray0, stringArray0);
      List<BigDecimal> list0 = tableMap0.getKeys("");
      assertEquals(1, list0.size());
      assertEquals(4, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(727);
      integerArray0[2] = integer0;
      TableMap<Integer, Object> tableMap0 = new TableMap<Integer, Object>(integerArray0, integerArray0);
      Integer integer1 = tableMap0.getKey(integer0);
      assertNotNull(integer1);
      assertEquals(4, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      TableMap<String, Object> tableMap0 = new TableMap<String, Object>(stringArray0, stringArray0);
      Object object0 = tableMap0.get("");
      assertNotNull(object0);
      assertFalse(tableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TableMap<LinkedList<BigDecimal>, BigDecimal> tableMap0 = new TableMap<LinkedList<BigDecimal>, BigDecimal>(488);
      Set<Map.Entry<LinkedList<BigDecimal>, BigDecimal>> set0 = (Set<Map.Entry<LinkedList<BigDecimal>, BigDecimal>>)tableMap0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[4];
      TableMap<String, Object> tableMap0 = new TableMap<String, Object>(stringArray0, stringArray0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)tableMap0.entrySet();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String>[] linkedListArray0 = (LinkedList<String>[]) Array.newInstance(LinkedList.class, 0);
      TableMap<LinkedList<String>, Object> tableMap0 = new TableMap<LinkedList<String>, Object>(linkedListArray0, linkedListArray0);
      boolean boolean0 = tableMap0.containsKey("c#4S\"_[$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TableMap<Object, Integer> tableMap0 = new TableMap<Object, Integer>(0);
      // Undeclared exception!
      try { 
        tableMap0.putAll((Map<?, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.TableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[5];
      TableMap<String, String> tableMap0 = new TableMap<String, String>(stringArray0, stringArray0);
      String[] stringArray1 = new String[7];
      TableMap<String, String> tableMap1 = new TableMap<String, String>(stringArray1, stringArray0);
      // Undeclared exception!
      try { 
        tableMap0.putAll(tableMap1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'yx()JWh zN#";
      TableMap<Object, BigDecimal> tableMap0 = new TableMap<Object, BigDecimal>(stringArray0, (BigDecimal[]) null);
      // Undeclared exception!
      try { 
        tableMap0.getValues("'yx()JWh zN#");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String>[] linkedListArray0 = (LinkedList<String>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<Object>[] linkedListArray1 = (LinkedList<Object>[]) Array.newInstance(LinkedList.class, 5);
      TableMap<LinkedList<String>, LinkedList<Object>> tableMap0 = new TableMap<LinkedList<String>, LinkedList<Object>>(linkedListArray0, linkedListArray1);
      // Undeclared exception!
      try { 
        tableMap0.getKeys(linkedListArray1[1]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TableMap<String, Object> tableMap0 = null;
      try {
        tableMap0 = new TableMap<String, Object>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TableMap<String, BigDecimal> tableMap0 = new TableMap<String, BigDecimal>(0);
      int int0 = tableMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[12];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      BigDecimal bigDecimal1 = new BigDecimal(0);
      bigDecimalArray0[1] = bigDecimal1;
      TableMap<BigDecimal, Object> tableMap0 = new TableMap<BigDecimal, Object>(bigDecimalArray0, bigDecimalArray0);
      List<Object> list0 = tableMap0.getValues(bigDecimal0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[12];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray0[5] = bigDecimal1;
      TableMap<BigDecimal, Object> tableMap0 = new TableMap<BigDecimal, Object>(bigDecimalArray0, bigDecimalArray0);
      List<Object> list0 = tableMap0.getValues(bigDecimal0);
      assertEquals(0, list0.size());
      assertFalse(tableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[12];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      bigDecimalArray0[0] = bigDecimal0;
      TableMap<BigDecimal, Object> tableMap0 = new TableMap<BigDecimal, Object>(bigDecimalArray0, bigDecimalArray0);
      List<Object> list0 = tableMap0.getValues(bigDecimal0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TableMap<Object, String> tableMap0 = new TableMap<Object, String>(0);
      BigDecimal bigDecimal0 = new BigDecimal((-1653.487289402308));
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      tableMap0.merge(bigDecimal0, "", biFunction0);
      List<String> list0 = tableMap0.getValues("");
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<String, Object>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<String, Object>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 7);
      AbstractMap.SimpleImmutableEntry<String, Object>[] abstractMap_SimpleImmutableEntryArray1 = (AbstractMap.SimpleImmutableEntry<String, Object>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", "");
      abstractMap_SimpleImmutableEntryArray1[0] = abstractMap_SimpleImmutableEntry0;
      TableMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> tableMap0 = new TableMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      // Undeclared exception!
      try { 
        tableMap0.entrySet();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "l";
      TableMap<String, String> tableMap0 = new TableMap<String, String>(stringArray0, stringArray0);
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      tableMap0.forEach(biConsumer0);
      assertEquals(3, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[3];
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      TableMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> tableMap0 = new TableMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(stringArray0, abstractMap_SimpleImmutableEntryArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      tableMap0.forEach(consumer0);
      assertEquals(3, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[5];
      TableMap<Object, BigDecimal> tableMap0 = new TableMap<Object, BigDecimal>(stringArray0, (BigDecimal[]) null);
      HashMap<Object, BigDecimal> hashMap0 = new HashMap<Object, BigDecimal>();
      BigDecimal bigDecimal0 = new BigDecimal((-8));
      AbstractMap.SimpleEntry<String, BigDecimal> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, BigDecimal>("", bigDecimal0);
      AbstractMap.SimpleImmutableEntry<String, BigDecimal> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, BigDecimal>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<String, BigDecimal> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, BigDecimal>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Object, BigDecimal> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, BigDecimal>(abstractMap_SimpleEntry1, bigDecimal0);
      hashMap0.put(abstractMap_SimpleImmutableEntry1, bigDecimal0);
      tableMap0.putAll(hashMap0);
      assertEquals(6, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<BigDecimal>[] linkedListArray0 = (LinkedList<BigDecimal>[]) Array.newInstance(LinkedList.class, 4);
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      linkedListArray0[1] = linkedList0;
      AbstractMap.SimpleEntry<Integer, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 1);
      TableMap<LinkedList<BigDecimal>, AbstractMap.SimpleEntry<Integer, Object>> tableMap0 = new TableMap<LinkedList<BigDecimal>, AbstractMap.SimpleEntry<Integer, Object>>(linkedListArray0, abstractMap_SimpleEntryArray0);
      tableMap0.remove((Object) linkedList0);
      assertEquals(3, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-3109));
      integerArray0[1] = integer0;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integerArray0[1];
      objectArray0[4] = (Object) integer0;
      TableMap<Integer, Object> tableMap0 = new TableMap<Integer, Object>(integerArray0, objectArray0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(objectArray0[7]).when(biFunction0).apply(any() , any());
      tableMap0.merge(integerArray0[0], objectArray0[4], biFunction0);
      assertEquals(1, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TableMap<Object, String> tableMap0 = new TableMap<Object, String>(0);
      String string0 = tableMap0.remove((Object) "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TableMap<BigDecimal, String> tableMap0 = new TableMap<BigDecimal, String>(1);
      BigDecimal bigDecimal0 = tableMap0.getKey("TableMap{keys=");
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[3];
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      TableMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> tableMap0 = new TableMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(stringArray0, abstractMap_SimpleImmutableEntryArray0);
      tableMap0.get((Object) null);
      assertFalse(tableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 4);
      String[] stringArray0 = new String[5];
      stringArray0[4] = "";
      TableMap<LinkedList<Integer>, String> tableMap0 = new TableMap<LinkedList<Integer>, String>(linkedListArray0, stringArray0);
      boolean boolean0 = tableMap0.containsValue("");
      assertTrue(boolean0);
      assertEquals(4, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[10];
      TableMap<String, Object> tableMap0 = new TableMap<String, Object>(stringArray0, stringArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      boolean boolean0 = tableMap0.containsValue(bigDecimal0);
      assertFalse(boolean0);
      assertEquals(10, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[3];
      TableMap<String, String> tableMap0 = new TableMap<String, String>(stringArray0, stringArray0);
      boolean boolean0 = tableMap0.containsKey(stringArray0[2]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      TableMap<Integer, Object> tableMap0 = new TableMap<Integer, Object>(integerArray0, integerArray0);
      boolean boolean0 = tableMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TableMap<Object, AbstractMap.SimpleImmutableEntry<BigDecimal, Object>> tableMap0 = new TableMap<Object, AbstractMap.SimpleImmutableEntry<BigDecimal, Object>>(1);
      boolean boolean0 = tableMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[3];
      TableMap<Integer, String> tableMap0 = new TableMap<Integer, String>((Integer[]) null, stringArray0);
      Integer integer0 = tableMap0.getKey(stringArray0[1]);
      TableMap<Integer, Integer> tableMap1 = new TableMap<Integer, Integer>((Integer[]) null, (Integer[]) null);
      tableMap1.getKeys(integer0);
      assertTrue(tableMap0.isEmpty());
      assertEquals(0, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TableMap<String, String> tableMap0 = new TableMap<String, String>(0);
      tableMap0.clear();
      assertEquals(0, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LinkedList<Object>[] linkedListArray0 = (LinkedList<Object>[]) Array.newInstance(LinkedList.class, 4);
      TableMap<String, LinkedList<Object>> tableMap0 = new TableMap<String, LinkedList<Object>>(stringArray0, linkedListArray0);
      tableMap0.values();
      assertEquals(5, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TableMap<Object, Integer> tableMap0 = new TableMap<Object, Integer>(0);
      Set<Object> set0 = tableMap0.keySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TableMap<LinkedList<String>, Object> tableMap0 = new TableMap<LinkedList<String>, Object>(2053);
      String string0 = tableMap0.toString();
      assertEquals("TableMap{keys=[], values=[]}", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TableMap<Object, String> tableMap0 = new TableMap<Object, String>(0);
      BigDecimal bigDecimal0 = new BigDecimal((-1653.487289402308));
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      tableMap0.merge(bigDecimal0, "", biFunction0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction1).apply(any() , any());
      // Undeclared exception!
      try { 
        tableMap0.replaceAll(biFunction1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // setValue not supported.
         //
         verifyException("com.axios.core.map.TableMap$Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 4);
      String[] stringArray0 = new String[5];
      TableMap<LinkedList<Integer>, String> tableMap0 = new TableMap<LinkedList<Integer>, String>(linkedListArray0, stringArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      tableMap0.forEach(consumer0);
      assertEquals(4, tableMap0.size());
  }
}
