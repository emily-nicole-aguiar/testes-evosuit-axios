/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:06:20 GMT 2024
 */

package com.axios.core.tool.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.tool.file.FileTool;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Path;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileTool_ESTest extends FileTool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = null;
      FileTool.mkParentDirs((File) null);
      FileTool.touch((File) null);
      FileTool.file("/N@h?ybB-cYX;H");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Path path0 = null;
      // Undeclared exception!
      try { 
        FileTool.getMimeType((Path) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileTool.getMimeType("com.axios.core.tool.http.HttpTool.js");
      String string0 = "utf-8";
      // Undeclared exception!
      try { 
        FileTool.getMimeType("utf-8");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = MockFile.createTempFile("?$!I~", "?$!I~");
      File file1 = FileTool.mkdir(file0);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "?$!I~";
      // Undeclared exception!
      try { 
        FileTool.file(file1, stringArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Path path0 = null;
      FileTool.isDirectory((Path) null, false);
      File file0 = null;
      FileTool.mkdir((File) null);
      FileTool.mkdir((File) null);
      // Undeclared exception!
      try { 
        FileTool.getMimeType("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile(".js", "*Ira^");
          MockFile mockFile0 = new MockFile(file0, "*Ira^");
          FileTool.mkdir((File) mockFile0);
          // Undeclared exception!
          try { 
            FileTool.rename(mockFile0, "*Ira^", false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/.js0*Ira^\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // com.axios.core.tool.file.FileTool.mkdir(FileTool.java:239)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:220)
             // com.axios.core.tool.file.FileTool.move(FileTool.java:204)
             // com.axios.core.tool.file.FileTool.rename(FileTool.java:194)
             // sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileTool.file("D#>");
          MockFile mockFile0 = new MockFile("l/Zm$RrbQK`Vwt", "l/Zm$RrbQK`Vwt");
          String[] stringArray0 = new String[0];
          File file1 = FileTool.file(file0, stringArray0);
          // Undeclared exception!
          try { 
            FileTool.rename(file1, "l/Zm$RrbQK`Vwt", true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"l\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // com.axios.core.tool.file.FileTool.mkdir(FileTool.java:239)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:220)
             // com.axios.core.tool.file.FileTool.move(FileTool.java:204)
             // com.axios.core.tool.file.FileTool.rename(FileTool.java:194)
             // sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("!R|AT`@IU>mZ", "");
          File file0 = mockFile0.getAbsoluteFile();
          mockFile0.delete();
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("!R|AT`@IU>mZ");
          FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
          mockFile0.setExecutable(true, true);
          FileTool.mkdir((File) mockFile0);
          mockFile0.toURL();
          FileTool fileTool0 = new FileTool();
          Path path0 = file0.toPath();
          FileTool.exists(path0, false);
          // Undeclared exception!
          try { 
            FileTool.rename(file0, "", false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/emily.aguiar/axios/!R|AT`@IU>mZ\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.move(UnixCopyFile.java:378)
             // sun.nio.fs.UnixFileSystemProvider.move(UnixFileSystemProvider.java:262)
             // java.nio.file.Files.move(Files.java:1395)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:222)
             // com.axios.core.tool.file.FileTool.move(FileTool.java:204)
             // com.axios.core.tool.file.FileTool.rename(FileTool.java:194)
             // sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("3BQTTp0CXo:", "ceB'>");
      FileTool.mkParentDirs(file0);
      MockFile mockFile0 = new MockFile("ceB'>", "");
      Path path0 = mockFile0.toPath();
      mockFile0.createNewFile();
      FileTool.del(path0);
      FileTool fileTool0 = new FileTool();
      FileTool.file("ceB'>");
      FileTool.isDirectory(path0, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = FileTool.file("D#>");
          FileTool.touch(file0);
          String[] stringArray0 = new String[0];
          File file1 = FileTool.file(file0, stringArray0);
          // Undeclared exception!
          try { 
            FileTool.rename(file1, "l/Zm$RrbQK`Vwt", true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"l\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // com.axios.core.tool.file.FileTool.mkdir(FileTool.java:239)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:220)
             // com.axios.core.tool.file.FileTool.move(FileTool.java:204)
             // com.axios.core.tool.file.FileTool.rename(FileTool.java:194)
             // sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "application/x-javascript";
      File file0 = FileTool.file("application/x-javascript");
      File file1 = FileTool.touch(file0);
      File file2 = FileTool.mkParentDirs(file1);
      try { 
        FileTool.getOutputStream(file2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.axios.core.tool.file.FileTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "*";
          File file0 = FileTool.file("u\"@OjOiZe");
          File file1 = MockFile.createTempFile("Sxh", "*", file0);
          File file2 = FileTool.touch(file1);
          // Undeclared exception!
          try { 
            FileTool.del(file2);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/emily.aguiar/axios/u\"@OjOiZe/Sxh0*\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // com.axios.core.tool.file.FileTool.delFile(FileTool.java:276)
             // com.axios.core.tool.file.FileTool.del(FileTool.java:126)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          MockFile mockFile0 = new MockFile("");
          Path path0 = mockFile0.toPath();
          mockFile0.getAbsoluteFile();
          // Undeclared exception!
          try { 
            FileTool.del(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"evosuite-standalone-runtime-1.0.6.jar\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // com.axios.core.tool.file.DelVisitor.visitFile(DelVisitor.java:24)
             // com.axios.core.tool.file.DelVisitor.visitFile(DelVisitor.java:1)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // com.axios.core.tool.file.FileTool.del(FileTool.java:160)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        FileTool.move(path0, path0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          FileTool.file(".js");
          FileTool.file("hF:Irc\"uUb(C");
          MockFile mockFile0 = new MockFile(".js", "&4i-OdHtriX:,J");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            FileTool.moveContent(path0, path0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/emily.aguiar/axios/.js\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // com.axios.core.tool.file.FileTool.mkdir(FileTool.java:239)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:220)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".js");
      Path path0 = mockFile0.toPath();
      mockFile0.setWritable(true, true);
      FileTool.isDirectory(path0, true);
      FileTool fileTool0 = new FileTool();
      FileTool.isDirectory(path0, false);
      FileTool.del((File) mockFile0);
      FileTool.mkdir((File) mockFile0);
      // Undeclared exception!
      try { 
        FileTool.getMimeType(path0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "v}7w0,Jx2=Q$p1^5*J";
      File file0 = FileTool.file("v}7w0,Jx2=Q$p1^5*J");
      FileTool.mkParentDirs(file0);
      FileTool.mkdir((File) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "v}7w0,Jx2=Q$p1^5*J";
      stringArray0[1] = "v}7w0,Jx2=Q$p1^5*J";
      stringArray0[2] = "v}7w0,Jx2=Q$p1^5*J";
      stringArray0[3] = "v}7w0,Jx2=Q$p1^5*J";
      stringArray0[4] = "v}7w0,Jx2=Q$p1^5*J";
      // Undeclared exception!
      try { 
        FileTool.file((File) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // directory must not be null
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "l2B}gMF;0`(gB");
      MockFile mockFile1 = new MockFile(mockFile0, "Target path must be not null !");
      File file0 = FileTool.touch(mockFile1);
      File file1 = FileTool.mkParentDirs(file0);
      File file2 = MockFile.createTempFile("l2B}gMF;0`(gB", "Target path must be not null !", file1);
      FileTool.getOutputStream(file2);
      FileTool.file("Src path must be not null !");
      FileTool fileTool0 = new FileTool();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTool.getMimeType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = ".pxCl,y`nt%-";
      MockFile mockFile0 = new MockFile(".pxCl,y`nt%-");
      mockFile0.toPath();
      mockFile0.toURL();
      mockFile0.mkdirs();
      try { 
        FileTool.getOutputStream(mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.axios.core.tool.file.FileTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "Q'})*&{");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        FileTool.getMimeType(path0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "lk";
      File file0 = FileTool.file("lk");
      FileTool.mkParentDirs(file0);
      FileTool.clean((File) null);
      URI uRI0 = MockURI.create("lk");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileTool.mkParentDirs((File) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        FileTool.rename((File) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.file.FileTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockFile mockFile0 = new MockFile(";xmo");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            FileTool.move(path0, path0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \";xmo\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.move(UnixCopyFile.java:378)
             // sun.nio.fs.UnixFileSystemProvider.move(UnixFileSystemProvider.java:262)
             // java.nio.file.Files.move(Files.java:1395)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:222)
             // com.axios.core.tool.file.FileTool.move(FileTool.java:204)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = ":|&#";
          File file0 = MockFile.createTempFile(":|&#", ":|&#");
          File file1 = FileTool.mkParentDirs(file0);
          MockFile mockFile0 = new MockFile(file1, "");
          File file2 = FileTool.file((File) mockFile0, (String[]) null);
          boolean boolean0 = true;
          // Undeclared exception!
          try { 
            FileTool.rename(file2, ":|&#", true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.move(UnixCopyFile.java:378)
             // sun.nio.fs.UnixFileSystemProvider.move(UnixFileSystemProvider.java:262)
             // java.nio.file.Files.move(Files.java:1395)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:222)
             // com.axios.core.tool.file.FileTool.move(FileTool.java:204)
             // com.axios.core.tool.file.FileTool.rename(FileTool.java:194)
             // sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          MockFile mockFile0 = new MockFile("");
          Path path0 = mockFile0.toPath();
          FileTool.mkdir(path0);
          File file0 = FileTool.touch(mockFile0);
          FileTool.touch(file0);
          FileTool fileTool0 = new FileTool();
          boolean boolean0 = false;
          // Undeclared exception!
          try { 
            FileTool.moveContent(path0, path0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.move(UnixCopyFile.java:378)
             // sun.nio.fs.UnixFileSystemProvider.move(UnixFileSystemProvider.java:262)
             // java.nio.file.Files.move(Files.java:1395)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:222)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      File file0 = MockFile.createTempFile("RN.XEwA<C@FbL`VDm", "#&[Kl<t");
      FileTool.touch(file0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Path path0 = null;
      // Undeclared exception!
      try { 
        FileTool.delFile((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      File file0 = null;
      FileTool.del((File) null);
      FileTool.touch((File) null);
      // Undeclared exception!
      try { 
        FileTool.getOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("com.axios.core.tool.io.IoTool.js", "com.axios.core.tool.io.IoTool.js");
          FileTool.mkParentDirs((File) null);
          FileTool.del((File) null);
          // Undeclared exception!
          try { 
            FileTool.del(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/com.axios.core.tool.io.IoTool.js0com.axios.core.tool.io.IoTool.js\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // com.axios.core.tool.file.FileTool.delFile(FileTool.java:276)
             // com.axios.core.tool.file.FileTool.del(FileTool.java:126)
             // sun.reflect.GeneratedMethodAccessor72.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileTool.mkdir((Path) null);
      // Undeclared exception!
      try { 
        FileTool.moveContent((Path) null, (Path) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Src path must be not null !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Path path0 = null;
      FileTool.mkdir((Path) null);
      // Undeclared exception!
      try { 
        FileTool.del((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "~C&EB05V4 5F.q*!g";
      FileTool.file("~C&EB05V4 5F.q*!g");
      FileTool.mkdir((Path) null);
      // Undeclared exception!
      try { 
        FileTool.del((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockFile mockFile0 = new MockFile("s");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            FileTool.moveContent(path0, path0, false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"s\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.move(UnixCopyFile.java:378)
             // sun.nio.fs.UnixFileSystemProvider.move(UnixFileSystemProvider.java:262)
             // java.nio.file.Files.move(Files.java:1395)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:222)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockFile mockFile0 = new MockFile("com.axios.exception.IORuntimeException", "com.axios.exception.IORuntimeException");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            FileTool.moveContent(path0, path0, true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/emily.aguiar/axios/com.axios.exception.IORuntimeException\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // com.axios.core.tool.file.FileTool.mkdir(FileTool.java:239)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:220)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      File file0 = FileTool.file("buCMM3/");
      FileTool.del(file0);
      File file1 = FileTool.mkdir(file0);
      FileTool.mkParentDirs(file1);
      FileTool.touch((File) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">%t=F$G";
      stringArray0[1] = "buCMM3/";
      stringArray0[2] = "buCMM3/";
      // Undeclared exception!
      try { 
        FileTool.file((File) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // directory must not be null
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileTool fileTool0 = new FileTool();
          MockFile mockFile0 = new MockFile("");
          File file0 = FileTool.touch(mockFile0);
          MockFile mockFile1 = new MockFile(file0, "directory must not be null");
          Path path0 = mockFile1.toPath();
          // Undeclared exception!
          try { 
            FileTool.mkdir(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/emily.aguiar/axios/directory must not be null\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // com.axios.core.tool.file.FileTool.mkdir(FileTool.java:239)
             // sun.reflect.GeneratedMethodAccessor66.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SZr]Ppy");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertEquals("SZr]Ppy", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("SZr]Ppy", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNotNull(path0);
      
      boolean boolean0 = mockFile0.setExecutable(false, false);
      assertEquals("SZr]Ppy", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("SZr]Ppy", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(boolean0);
      
      boolean boolean1 = mockFile0.mkdirs();
      assertFalse(boolean1 == boolean0);
      assertTrue(mockFile0.canRead());
      assertEquals("SZr]Ppy", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("SZr]Ppy", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(boolean1);
      
      URI uRI0 = mockFile0.toURI();
      assertTrue(mockFile0.canRead());
      assertEquals("SZr]Ppy", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("SZr]Ppy", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/home/emily.aguiar/axios/SZr%5DPpy/", uRI0.getRawPath());
      assertEquals("file:/home/emily.aguiar/axios/SZr%5DPpy/", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      String string0 = mockFile0.getCanonicalPath();
      assertTrue(mockFile0.canRead());
      assertEquals("SZr]Ppy", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("SZr]Ppy", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/emily.aguiar/axios/SZr]Ppy", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileTool.clean(mockFile0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(mockFile0.canRead());
      assertEquals("SZr]Ppy", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("SZr]Ppy", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(boolean2);
      
      File file0 = FileTool.file("[PcMKHoGGlA(c:");
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals("[PcMKHoGGlA(c:", file0.getName());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals("[PcMKHoGGlA(c:", file0.toString());
      assertNull(file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      assertNotSame(file0, mockFile0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SZr]Ppy";
      stringArray0[1] = "/home/emily.aguiar/axios/SZr]Ppy";
      stringArray0[2] = "/home/emily.aguiar/axios/SZr]Ppy";
      stringArray0[3] = "com.axios.exception.IORuntimeException";
      stringArray0[4] = "/home/emily.aguiar/axios/SZr]Ppy";
      stringArray0[5] = "SZr]Ppy";
      stringArray0[6] = "[PcMKHoGGlA(c:";
      stringArray0[7] = "/home/emily.aguiar/axios/SZr]Ppy";
      stringArray0[8] = "/home/emily.aguiar/axios/SZr]Ppy";
      // Undeclared exception!
      try { 
        FileTool.file((File) mockFile0, stringArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Path path0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        FileTool.exists((Path) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "com.axios.exception.IORuntimeException";
          File file0 = FileTool.file("com.axios.exception.IORuntimeException");
          assertEquals(0L, file0.lastModified());
          assertFalse(file0.isHidden());
          assertTrue(file0.isFile());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("com.axios.exception.IORuntimeException", file0.toString());
          assertFalse(file0.canRead());
          assertFalse(file0.exists());
          assertEquals("com.axios.exception.IORuntimeException", file0.getName());
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.getFreeSpace());
          assertNull(file0.getParent());
          assertEquals(0L, file0.getTotalSpace());
          assertFalse(file0.canExecute());
          assertFalse(file0.canWrite());
          assertEquals(0L, file0.length());
          assertFalse(file0.isAbsolute());
          assertNotNull(file0);
          
          File file1 = FileTool.mkdir(file0);
          assertTrue(file0.canWrite());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canRead());
          assertEquals("com.axios.exception.IORuntimeException", file0.toString());
          assertFalse(file0.isFile());
          assertEquals("com.axios.exception.IORuntimeException", file0.getName());
          assertTrue(file0.exists());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.isDirectory());
          assertNull(file0.getParent());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.canExecute());
          assertEquals(0L, file0.length());
          assertFalse(file0.isAbsolute());
          assertEquals(0L, file1.getUsableSpace());
          assertFalse(file1.isHidden());
          assertNull(file1.getParent());
          assertTrue(file1.exists());
          assertEquals("com.axios.exception.IORuntimeException", file1.getName());
          assertFalse(file1.isFile());
          assertTrue(file1.canExecute());
          assertEquals("com.axios.exception.IORuntimeException", file1.toString());
          assertTrue(file1.canRead());
          assertEquals(1392409281320L, file1.lastModified());
          assertTrue(file1.isDirectory());
          assertEquals(0L, file1.getTotalSpace());
          assertTrue(file1.canWrite());
          assertEquals(0L, file1.getFreeSpace());
          assertEquals(0L, file1.length());
          assertFalse(file1.isAbsolute());
          assertNotNull(file1);
          assertSame(file0, file1);
          assertSame(file1, file0);
          
          // Undeclared exception!
          try { 
            FileTool.del(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"com.axios.exception.IORuntimeException\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // com.axios.core.tool.file.FileTool.delFile(FileTool.java:276)
             // com.axios.core.tool.file.FileTool.del(FileTool.java:126)
             // sun.reflect.GeneratedMethodAccessor72.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          MockFile mockFile0 = new MockFile("", "com.axios.exception.IORuntimeException");
          assertNotNull(mockFile0);
          
          Path path0 = mockFile0.toPath();
          assertFalse(mockFile0.exists());
          assertEquals("/", mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("com.axios.exception.IORuntimeException", mockFile0.getName());
          assertEquals("/com.axios.exception.IORuntimeException", mockFile0.toString());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.lastModified());
          assertNotNull(path0);
          
          // Undeclared exception!
          try { 
            FileTool.delFile(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/com.axios.exception.IORuntimeException\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // com.axios.core.tool.file.FileTool.delFile(FileTool.java:276)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      File file0 = MockFile.createTempFile("::#.ZlifZJ(H2L^No", "Kh/zh^");
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/::#.ZlifZJ(H2L^No0Kh/zh^", file0.toString());
      assertEquals("zh^", file0.getName());
      assertEquals("/tmp/::#.ZlifZJ(H2L^No0Kh", file0.getParent());
      assertNotNull(file0);
      
      boolean boolean0 = FileTool.clean(file0);
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/::#.ZlifZJ(H2L^No0Kh/zh^", file0.toString());
      assertEquals("zh^", file0.getName());
      assertEquals("/tmp/::#.ZlifZJ(H2L^No0Kh", file0.getParent());
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(path0);
      assertNotSame(mockFile0, file0);
      
      Path path1 = FileTool.mkdir(path0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(path1);
      assertNotSame(mockFile0, file0);
      assertSame(path0, path1);
      assertSame(path1, path0);
      
      boolean boolean1 = FileTool.exists(path1, true);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(boolean1);
      assertNotSame(mockFile0, file0);
      assertSame(path0, path1);
      assertSame(path1, path0);
      
      File file1 = FileTool.file("Up#");
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertTrue(file1.isFile());
      assertFalse(file1.canExecute());
      assertFalse(file1.isHidden());
      assertNull(file1.getParent());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertEquals("Up#", file1.getName());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("Up#", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isDirectory());
      assertFalse(file1.isAbsolute());
      assertFalse(file1.canWrite());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      
      File file2 = FileTool.file(">PDc-@Mqt4");
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)mockFile0));
      assertFalse(file2.isHidden());
      assertNull(file2.getParent());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.canRead());
      assertFalse(file2.exists());
      assertEquals(">PDc-@Mqt4", file2.getName());
      assertTrue(file2.isFile());
      assertFalse(file2.canExecute());
      assertEquals(">PDc-@Mqt4", file2.toString());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, file2.lastModified());
      assertFalse(file2.isDirectory());
      assertFalse(file2.isAbsolute());
      assertFalse(file2.canWrite());
      assertNotNull(file2);
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      assertNotSame(file2, mockFile0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = FileTool.getMimeType("]7yw1sYU5g7x$/vk.css");
          assertEquals("text/css", string0);
          assertNotNull(string0);
          
          MockFile mockFile0 = new MockFile("com.axios.core.tool.file.FileTool");
          assertNotNull(mockFile0);
          
          File file0 = MockFile.createTempFile("text/css", "text/css", (File) mockFile0);
          assertFalse(file0.equals((Object)mockFile0));
          assertEquals("com.axios.core.tool.file.FileTool", mockFile0.toString());
          assertTrue(mockFile0.canWrite());
          assertTrue(mockFile0.canExecute());
          assertTrue(mockFile0.canRead());
          assertEquals("com.axios.core.tool.file.FileTool", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isFile());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getFreeSpace());
          assertFalse(file0.isDirectory());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.exists());
          assertEquals("/home/emily.aguiar/axios/com.axios.core.tool.file.FileTool/text/css0text/css", file0.toString());
          assertEquals("/home/emily.aguiar/axios/com.axios.core.tool.file.FileTool/text/css0text", file0.getParent());
          assertTrue(file0.canWrite());
          assertTrue(file0.isFile());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("css", file0.getName());
          assertTrue(file0.canRead());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canExecute());
          assertNotNull(file0);
          assertNotSame(mockFile0, file0);
          assertNotSame(file0, mockFile0);
          
          File file1 = FileTool.mkdir(file0);
          assertFalse(mockFile0.equals((Object)file0));
          assertFalse(file0.equals((Object)mockFile0));
          assertFalse(file1.equals((Object)mockFile0));
          assertEquals("com.axios.core.tool.file.FileTool", mockFile0.toString());
          assertTrue(mockFile0.canWrite());
          assertTrue(mockFile0.canExecute());
          assertTrue(mockFile0.canRead());
          assertEquals("com.axios.core.tool.file.FileTool", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isFile());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getFreeSpace());
          assertFalse(file0.isDirectory());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.exists());
          assertEquals("/home/emily.aguiar/axios/com.axios.core.tool.file.FileTool/text/css0text/css", file0.toString());
          assertEquals("/home/emily.aguiar/axios/com.axios.core.tool.file.FileTool/text/css0text", file0.getParent());
          assertTrue(file0.canWrite());
          assertTrue(file0.isFile());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("css", file0.getName());
          assertTrue(file0.canRead());
          assertTrue(file0.isAbsolute());
          assertTrue(file0.canExecute());
          assertEquals("css", file1.getName());
          assertFalse(file1.isHidden());
          assertEquals(0L, file1.getUsableSpace());
          assertTrue(file1.canExecute());
          assertTrue(file1.isAbsolute());
          assertEquals("/home/emily.aguiar/axios/com.axios.core.tool.file.FileTool/text/css0text", file1.getParent());
          assertEquals(0L, file1.length());
          assertTrue(file1.canWrite());
          assertEquals(0L, file1.getFreeSpace());
          assertFalse(file1.isDirectory());
          assertEquals(0L, file1.getTotalSpace());
          assertEquals(1392409281320L, file1.lastModified());
          assertEquals("/home/emily.aguiar/axios/com.axios.core.tool.file.FileTool/text/css0text/css", file1.toString());
          assertTrue(file1.canRead());
          assertTrue(file1.exists());
          assertTrue(file1.isFile());
          assertNotNull(file1);
          assertNotSame(mockFile0, file1);
          assertNotSame(mockFile0, file0);
          assertNotSame(file0, mockFile0);
          assertSame(file0, file1);
          assertSame(file1, file0);
          assertNotSame(file1, mockFile0);
          
          boolean boolean0 = true;
          // Undeclared exception!
          try { 
            FileTool.rename(file0, "com.axios.core.tool.io.FastByteArrayOutputStream", true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/emily.aguiar/axios/com.axios.core.tool.file.FileTool/text/css0text\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // com.axios.core.tool.file.FileTool.mkdir(FileTool.java:239)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:220)
             // com.axios.core.tool.file.FileTool.move(FileTool.java:204)
             // com.axios.core.tool.file.FileTool.rename(FileTool.java:194)
             // sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      File file0 = FileTool.file("L");
      assertFalse(file0.canRead());
      assertEquals("L", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertNull(file0.getParent());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("L", file0.getName());
      assertNotNull(file0);
      
      File file1 = FileTool.mkdir(file0);
      assertEquals("L", file0.toString());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("L", file0.getName());
      assertTrue(file0.canExecute());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canRead());
      assertFalse(file1.isFile());
      assertEquals("L", file1.toString());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isAbsolute());
      assertTrue(file1.exists());
      assertNull(file1.getParent());
      assertTrue(file1.canExecute());
      assertEquals("L", file1.getName());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertNotNull(file1);
      assertSame(file0, file1);
      assertSame(file1, file0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        FileTool.getMimeType("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      File file0 = null;
      File file1 = FileTool.mkdir((File) null);
      assertNull(file1);
      
      Path path0 = null;
      Path path1 = FileTool.mkdir((Path) null);
      assertNull(path1);
      
      // Undeclared exception!
      try { 
        FileTool.getMimeType((Path) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".js", "Yn25]s8");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileTool.clean(mockFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals("Yn25]s8", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertEquals("/home/emily.aguiar/axios/.js", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/emily.aguiar/axios/.js/Yn25]s8", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(boolean0);
      
      Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals("Yn25]s8", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertEquals("/home/emily.aguiar/axios/.js", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/emily.aguiar/axios/.js/Yn25]s8", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertNotNull(path0);
      
      boolean boolean1 = false;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Yn25]s8";
      boolean boolean2 = mockFile0.setReadOnly();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals("Yn25]s8", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertEquals("/home/emily.aguiar/axios/.js", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/emily.aguiar/axios/.js/Yn25]s8", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(boolean2);
      
      stringArray0[1] = ".js";
      stringArray0[2] = "Yn25]s8";
      stringArray0[3] = "Yn25]s8";
      stringArray0[4] = "Yn25]s8";
      stringArray0[5] = ".js";
      stringArray0[6] = "Yn25]s8";
      // Undeclared exception!
      try { 
        FileTool.file((File) mockFile0, stringArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTool.exists((Path) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      File file0 = FileTool.file("wRbs7:i");
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("wRbs7:i", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals("wRbs7:i", file0.getName());
      assertNotNull(file0);
      
      File file1 = FileTool.mkdir(file0);
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("wRbs7:i", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("wRbs7:i", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("wRbs7:i", file1.toString());
      assertTrue(file1.exists());
      assertNull(file1.getParent());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertFalse(file1.isFile());
      assertEquals("wRbs7:i", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertNotNull(file1);
      assertSame(file0, file1);
      assertSame(file1, file0);
      
      File file2 = FileTool.mkdir(file1);
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("wRbs7:i", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("wRbs7:i", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("wRbs7:i", file1.toString());
      assertTrue(file1.exists());
      assertNull(file1.getParent());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertFalse(file1.isFile());
      assertEquals("wRbs7:i", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file2.canRead());
      assertTrue(file2.canExecute());
      assertFalse(file2.isHidden());
      assertFalse(file2.isFile());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(1392409281320L, file2.lastModified());
      assertTrue(file2.exists());
      assertNull(file2.getParent());
      assertEquals("wRbs7:i", file2.toString());
      assertFalse(file2.isAbsolute());
      assertTrue(file2.isDirectory());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getFreeSpace());
      assertTrue(file2.canWrite());
      assertEquals("wRbs7:i", file2.getName());
      assertNotNull(file2);
      assertSame(file0, file2);
      assertSame(file0, file1);
      assertSame(file1, file0);
      assertSame(file1, file2);
      assertSame(file2, file1);
      assertSame(file2, file0);
      
      MockFile mockFile0 = new MockFile("wRbs7:i");
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      File file3 = FileTool.mkdir((File) mockFile0);
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("wRbs7:i", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("wRbs7:i", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertNull(file3.getParent());
      assertEquals(1392409281320L, file3.lastModified());
      assertTrue(file3.isDirectory());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals("wRbs7:i", file3.toString());
      assertEquals(0L, file3.length());
      assertFalse(file3.isAbsolute());
      assertFalse(file3.isFile());
      assertEquals("wRbs7:i", file3.getName());
      assertTrue(file3.canWrite());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertTrue(file3.canExecute());
      assertTrue(file3.canRead());
      assertTrue(file3.exists());
      assertNotNull(file3);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file2);
      assertSame(mockFile0, file3);
      assertNotSame(mockFile0, file0);
      assertNotSame(file3, file1);
      assertSame(file3, mockFile0);
      assertNotSame(file3, file0);
      assertNotSame(file3, file2);
      
      File file4 = FileTool.mkParentDirs(file2);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file1.equals((Object)file3));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file2.equals((Object)mockFile0));
      assertFalse(file2.equals((Object)file3));
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("wRbs7:i", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("wRbs7:i", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("wRbs7:i", file1.toString());
      assertTrue(file1.exists());
      assertNull(file1.getParent());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertFalse(file1.isFile());
      assertEquals("wRbs7:i", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file2.canRead());
      assertTrue(file2.canExecute());
      assertFalse(file2.isHidden());
      assertFalse(file2.isFile());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(1392409281320L, file2.lastModified());
      assertTrue(file2.exists());
      assertNull(file2.getParent());
      assertEquals("wRbs7:i", file2.toString());
      assertFalse(file2.isAbsolute());
      assertTrue(file2.isDirectory());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getFreeSpace());
      assertTrue(file2.canWrite());
      assertEquals("wRbs7:i", file2.getName());
      assertNull(file4);
      assertSame(file0, file2);
      assertSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file3);
      assertNotSame(file1, file3);
      assertSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertSame(file1, file2);
      assertSame(file2, file1);
      assertNotSame(file2, mockFile0);
      assertNotSame(file2, file3);
      assertSame(file2, file0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      File file0 = FileTool.file("~C&EB05V4 5F.q*!g");
      assertEquals("~C&EB05V4 5F.q*!g", file0.getName());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("~C&EB05V4 5F.q*!g", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      Path path0 = FileTool.mkdir((Path) null);
      assertNull(path0);
      
      boolean boolean0 = FileTool.clean(file0);
      assertEquals("~C&EB05V4 5F.q*!g", file0.getName());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("~C&EB05V4 5F.q*!g", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.axios.core.tool.file.FileTool", "com.axios.core.tool.file.FileTool");
      assertNotNull(mockFile0);
      
      File file0 = FileTool.mkParentDirs(mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("/home/emily.aguiar/axios/com.axios.core.tool.file.FileTool", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/emily.aguiar/axios/com.axios.core.tool.file.FileTool/com.axios.core.tool.file.FileTool", mockFile0.toString());
      assertEquals("com.axios.core.tool.file.FileTool", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("/home/emily.aguiar/axios/com.axios.core.tool.file.FileTool", file0.toString());
      assertEquals("com.axios.core.tool.file.FileTool", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/emily.aguiar/axios", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile(".js", ".js");
          assertEquals(".js0.js", file0.getName());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.exists());
          assertTrue(file0.isAbsolute());
          assertEquals("/tmp", file0.getParent());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("/tmp/.js0.js", file0.toString());
          assertTrue(file0.isHidden());
          assertTrue(file0.canWrite());
          assertTrue(file0.isFile());
          assertTrue(file0.canRead());
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.length());
          assertTrue(file0.canExecute());
          assertNotNull(file0);
          
          boolean boolean0 = FileTool.clean(file0);
          assertEquals(".js0.js", file0.getName());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.exists());
          assertTrue(file0.isAbsolute());
          assertEquals("/tmp", file0.getParent());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals("/tmp/.js0.js", file0.toString());
          assertTrue(file0.isHidden());
          assertTrue(file0.canWrite());
          assertTrue(file0.isFile());
          assertTrue(file0.canRead());
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.length());
          assertTrue(file0.canExecute());
          assertTrue(boolean0);
          
          // Undeclared exception!
          try { 
            FileTool.rename(file0, "Ed+{", true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/.js0.js\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.move(UnixCopyFile.java:378)
             // sun.nio.fs.UnixFileSystemProvider.move(UnixFileSystemProvider.java:262)
             // java.nio.file.Files.move(Files.java:1395)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:222)
             // com.axios.core.tool.file.FileTool.move(FileTool.java:204)
             // com.axios.core.tool.file.FileTool.rename(FileTool.java:194)
             // sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      File file0 = FileTool.file("");
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertEquals("", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNull(file0.getParent());
      assertEquals("", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      try { 
        FileTool.getOutputStream(file0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.axios.core.tool.file.FileTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = null;
      File file0 = FileTool.file((String) null);
      assertNull(file0);
      
      // Undeclared exception!
      try { 
        FileTool.rename((File) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.file.FileTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      File file0 = FileTool.file("");
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("", file0.toString());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[0];
      File file1 = FileTool.file(file0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("", file0.toString());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertFalse(file0.isFile());
      assertNull(file1.getParent());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertFalse(file1.isAbsolute());
      assertEquals("", file1.getName());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canRead());
      assertFalse(file1.isFile());
      assertNotNull(file1);
      assertSame(file0, file1);
      assertSame(file1, file0);
      
      // Undeclared exception!
      try { 
        FileTool.move((Path) null, (Path) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Src path must be not null !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      File file0 = FileTool.file("");
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertNull(file0.getParent());
      assertEquals("", file0.toString());
      assertTrue(file0.isDirectory());
      assertEquals("", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        FileTool.file(file0, stringArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = null;
      File file0 = FileTool.file((String) null);
      assertNull(file0);
      
      File file1 = FileTool.mkdir((File) null);
      assertNull(file1);
      
      // Undeclared exception!
      try { 
        FileTool.getOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "''Af*7NOdo8>Lh";
          File file0 = MockFile.createTempFile("''Af*7NOdo8>Lh", "K.js");
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.canWrite());
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.length());
          assertTrue(file0.isAbsolute());
          assertEquals("''Af*7NOdo8>Lh0K.js", file0.getName());
          assertTrue(file0.canRead());
          assertTrue(file0.canExecute());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertEquals("/tmp/''Af*7NOdo8>Lh0K.js", file0.toString());
          assertNotNull(file0);
          
          File file1 = FileTool.touch(file0);
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.canWrite());
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.length());
          assertTrue(file0.isAbsolute());
          assertEquals("''Af*7NOdo8>Lh0K.js", file0.getName());
          assertTrue(file0.canRead());
          assertTrue(file0.canExecute());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.exists());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertEquals("/tmp/''Af*7NOdo8>Lh0K.js", file0.toString());
          assertEquals("''Af*7NOdo8>Lh0K.js", file1.getName());
          assertTrue(file1.canExecute());
          assertTrue(file1.canWrite());
          assertTrue(file1.isFile());
          assertTrue(file1.canRead());
          assertTrue(file1.isAbsolute());
          assertEquals(1392409281320L, file1.lastModified());
          assertEquals(0L, file1.getTotalSpace());
          assertEquals(0L, file1.getFreeSpace());
          assertEquals(0L, file1.length());
          assertEquals("/tmp/''Af*7NOdo8>Lh0K.js", file1.toString());
          assertFalse(file1.isDirectory());
          assertTrue(file1.exists());
          assertFalse(file1.isHidden());
          assertEquals(0L, file1.getUsableSpace());
          assertEquals("/tmp", file1.getParent());
          assertNotNull(file1);
          assertSame(file0, file1);
          assertSame(file1, file0);
          
          // Undeclared exception!
          try { 
            FileTool.del(file0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/''Af*7NOdo8>Lh0K.js\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // com.axios.core.tool.file.FileTool.delFile(FileTool.java:276)
             // com.axios.core.tool.file.FileTool.del(FileTool.java:126)
             // sun.reflect.GeneratedMethodAccessor72.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "zd^,{k#^^9[b";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zd^,{k#^^9[b");
      assertFalse(boolean0);
      
      File file0 = null;
      File file1 = FileTool.mkdir((File) null);
      assertNull(file1);
      
      boolean boolean1 = FileTool.clean((File) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      File file2 = FileTool.mkdir((File) null);
      assertNull(file2);
      
      File file3 = FileTool.mkdir((File) null);
      assertNull(file3);
      
      // Undeclared exception!
      try { 
        FileTool.getOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      File file0 = FileTool.file("*Uy");
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("*Uy", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("*Uy", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNull(file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "*Uy");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      File file1 = FileTool.mkdir((File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file1.equals((Object)file0));
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("*Uy", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("*Uy", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals("*Uy", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/emily.aguiar/axios/*Uy", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/emily.aguiar/axios/*Uy/*Uy", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/home/emily.aguiar/axios/*Uy/*Uy", file1.toString());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/home/emily.aguiar/axios/*Uy", file1.getParent());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isDirectory());
      assertTrue(file1.canRead());
      assertFalse(file1.isFile());
      assertEquals("*Uy", file1.getName());
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(file1, file0);
      assertSame(file1, mockFile0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = FileTool.file("WPuT$M'lmM6q");
          assertEquals("WPuT$M'lmM6q", file0.getName());
          assertFalse(file0.exists());
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.length());
          assertFalse(file0.isAbsolute());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertNull(file0.getParent());
          assertEquals(0L, file0.lastModified());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals("WPuT$M'lmM6q", file0.toString());
          assertFalse(file0.canRead());
          assertFalse(file0.canWrite());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isFile());
          assertFalse(file0.canExecute());
          assertNotNull(file0);
          
          File file1 = FileTool.mkdir(file0);
          assertEquals("WPuT$M'lmM6q", file0.getName());
          assertEquals(0L, file0.length());
          assertFalse(file0.isAbsolute());
          assertEquals(0L, file0.getUsableSpace());
          assertFalse(file0.isHidden());
          assertNull(file0.getParent());
          assertTrue(file0.isDirectory());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.canWrite());
          assertTrue(file0.canExecute());
          assertEquals("WPuT$M'lmM6q", file0.toString());
          assertFalse(file0.isFile());
          assertEquals(1392409281320L, file0.lastModified());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertTrue(file1.canWrite());
          assertEquals(0L, file1.getUsableSpace());
          assertFalse(file1.isHidden());
          assertTrue(file1.canExecute());
          assertFalse(file1.isFile());
          assertTrue(file1.isDirectory());
          assertEquals("WPuT$M'lmM6q", file1.toString());
          assertEquals(0L, file1.length());
          assertEquals(0L, file1.getFreeSpace());
          assertNull(file1.getParent());
          assertFalse(file1.isAbsolute());
          assertEquals("WPuT$M'lmM6q", file1.getName());
          assertEquals(1392409281320L, file1.lastModified());
          assertEquals(0L, file1.getTotalSpace());
          assertTrue(file1.canRead());
          assertTrue(file1.exists());
          assertNotNull(file1);
          assertSame(file0, file1);
          assertSame(file1, file0);
          
          // Undeclared exception!
          try { 
            FileTool.rename(file1, "WPuT$M'lmM6q", true);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"WPuT$M'lmM6q\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.move(UnixCopyFile.java:378)
             // sun.nio.fs.UnixFileSystemProvider.move(UnixFileSystemProvider.java:262)
             // java.nio.file.Files.move(Files.java:1395)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:222)
             // com.axios.core.tool.file.FileTool.move(FileTool.java:204)
             // com.axios.core.tool.file.FileTool.rename(FileTool.java:194)
             // sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          MockFile mockFile0 = new MockFile("");
          assertNotNull(mockFile0);
          
          MockFile mockFile1 = new MockFile("", "");
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertNotNull(mockFile1);
          
          // Undeclared exception!
          try { 
            FileTool.del((File) mockFile1);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/emily.aguiar/axios\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // com.axios.core.tool.file.FileTool.delFile(FileTool.java:276)
             // com.axios.core.tool.file.FileTool.del(FileTool.java:126)
             // com.axios.core.tool.file.FileTool.clean(FileTool.java:145)
             // com.axios.core.tool.file.FileTool.del(FileTool.java:117)
             // com.axios.core.tool.file.FileTool.clean(FileTool.java:145)
             // com.axios.core.tool.file.FileTool.del(FileTool.java:117)
             // com.axios.core.tool.file.FileTool.clean(FileTool.java:145)
             // com.axios.core.tool.file.FileTool.del(FileTool.java:117)
             // sun.reflect.GeneratedMethodAccessor72.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = FileTool.getMimeType("HU(:vK&~{(#UZ}yY`.css");
      assertEquals("text/css", string0);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile("text/css");
      assertNotNull(mockFile0);
      
      File file0 = FileTool.mkdir((File) mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("text", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("text/css", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("css", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("css", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("text/css", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("text", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      assertSame(mockFile0, file0);
      assertSame(file0, mockFile0);
      
      try { 
        MockURI.URI("text/css", "jr<$K<\"xo;ovb%v", "#33GHY;", 3024, "HU(:vK&~{(#UZ}yY`.css", "", "text/css");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: text/css://jr%3C$K%3C%22xo;ovb%25v@#33GHY;:3024HU(:vK&~%7B(%23UZ%7DyY%60.css?#text/css
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      File file0 = FileTool.file("B+BcCQ$H(*prqSc!");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertEquals("B+BcCQ$H(*prqSc!", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("B+BcCQ$H(*prqSc!", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertNotNull(file0);
      
      File file1 = FileTool.touch(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("B+BcCQ$H(*prqSc!", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("B+BcCQ$H(*prqSc!", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertFalse(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertNull(file1.getParent());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("B+BcCQ$H(*prqSc!", file1.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("B+BcCQ$H(*prqSc!", file1.toString());
      assertFalse(file1.isHidden());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertNotNull(file1);
      assertSame(file0, file1);
      assertSame(file1, file0);
      
      File file2 = FileTool.mkParentDirs(file1);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("B+BcCQ$H(*prqSc!", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("B+BcCQ$H(*prqSc!", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertFalse(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertNull(file1.getParent());
      assertFalse(file1.isDirectory());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("B+BcCQ$H(*prqSc!", file1.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("B+BcCQ$H(*prqSc!", file1.toString());
      assertFalse(file1.isHidden());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertNull(file2);
      assertSame(file0, file1);
      assertSame(file1, file0);
      
      String string0 = "]7yw1sYU5g7x$/vk";
      // Undeclared exception!
      try { 
        FileTool.getMimeType("]7yw1sYU5g7x$/vk");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileTool fileTool0 = new FileTool();
          String string0 = "Y:y$sF|agifPAS%v2";
          MockFile mockFile0 = new MockFile("Y:y$sF|agifPAS%v2");
          MockFile.createTempFile("Y:y$sF|agifPAS%v2", "Y:y$sF|agifPAS%v2");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            FileTool.mkdir(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"Y:y$sF|agifPAS%v2\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // com.axios.core.tool.file.FileTool.mkdir(FileTool.java:239)
             // sun.reflect.GeneratedMethodAccessor66.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("h2zPh}C.Mlm2UW", (String) null);
          boolean boolean0 = false;
          // Undeclared exception!
          try { 
            FileTool.rename(file0, "", false);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/h2zPh}C.Mlm2UW0.tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.move(UnixCopyFile.java:378)
             // sun.nio.fs.UnixFileSystemProvider.move(UnixFileSystemProvider.java:262)
             // java.nio.file.Files.move(Files.java:1395)
             // com.axios.core.tool.file.FileTool.moveContent(FileTool.java:222)
             // com.axios.core.tool.file.FileTool.move(FileTool.java:204)
             // com.axios.core.tool.file.FileTool.rename(FileTool.java:194)
             // sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileTool fileTool0 = new FileTool();
      String string0 = "rB>pkJWV`";
      try { 
        MockURI.URI("rB>pkJWV`", "rB>pkJWV`", "rB>pkJWV`");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: rB>pkJWV`:rB%3EpkJWV%60#rB%3EpkJWV%60
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = ".css";
      File file0 = FileTool.file(".css");
      File file1 = FileTool.mkdir(file0);
      String string1 = "";
      File file2 = FileTool.touch(file1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".css";
      stringArray0[1] = ".css";
      stringArray0[2] = ".css";
      stringArray0[3] = ".css";
      FileTool.file(file2, stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = string0;
      stringArray1[1] = string1;
      File file3 = FileTool.file(file1, stringArray1);
      File file4 = FileTool.touch(file3);
      FileTool.getOutputStream(file0);
      FileTool.del(file4);
      FileTool fileTool0 = new FileTool();
      boolean boolean0 = true;
      FileTool.rename(file0, string1, boolean0);
      FileTool.touch(file1);
      String[] stringArray2 = new String[5];
      stringArray2[0] = string1;
      stringArray2[1] = string1;
      stringArray2[2] = string1;
      stringArray2[3] = string0;
      stringArray2[4] = string0;
      FileTool.file(file4, stringArray2);
  }
}
