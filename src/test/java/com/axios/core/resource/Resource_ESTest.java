/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:48:25 GMT 2024
 */

package com.axios.core.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.resource.BytesResource;
import com.axios.core.resource.FileResource;
import com.axios.core.resource.MultiFileResource;
import com.axios.core.resource.MultiResource;
import com.axios.core.resource.Resource;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.util.Collection;
import java.util.LinkedList;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Resource_ESTest extends Resource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BytesResource bytesResource0 = new BytesResource((byte[]) null);
      String string0 = bytesResource0.readUtf8Str();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BytesResource bytesResource0 = new BytesResource(byteArray0);
      String string0 = bytesResource0.readUtf8Str();
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BytesResource bytesResource0 = new BytesResource((byte[]) null, "'!");
      Charset charset0 = Charset.defaultCharset();
      String string0 = bytesResource0.readStr(charset0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BytesResource bytesResource0 = new BytesResource(byteArray0, "");
      Charset charset0 = Charset.defaultCharset();
      String string0 = bytesResource0.readStr(charset0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BytesResource bytesResource0 = new BytesResource((byte[]) null);
      byte[] byteArray0 = bytesResource0.readBytes();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BytesResource bytesResource0 = new BytesResource(byteArray0);
      byte[] byteArray1 = bytesResource0.readBytes();
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.axios.exception.NoResourceException", "");
      FileResource fileResource0 = new FileResource(file0);
      byte[] byteArray0 = fileResource0.readBytes();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BytesResource bytesResource0 = new BytesResource(byteArray0);
      URL uRL0 = bytesResource0.getUrl();
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      FileResource fileResource0 = new FileResource(path0);
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(linkedList0);
      multiFileResource0.add(fileResource0);
      URL uRL0 = multiFileResource0.getUrl();
      assertEquals((-1), uRL0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileResource fileResource0 = new FileResource(mockFile0);
      InputStream inputStream0 = fileResource0.getStream();
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile(";wZUh<y", "null");
      FileResource fileResource0 = new FileResource(file0, ";wZUh<y");
      InputStream inputStream0 = fileResource0.getStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileResource fileResource0 = new FileResource(mockFile0);
      BufferedReader bufferedReader0 = fileResource0.getReader((Charset) null);
      assertNull(bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.axios.exception.NoResourceException", "");
      FileResource fileResource0 = new FileResource(file0);
      Charset charset0 = Charset.defaultCharset();
      BufferedReader bufferedReader0 = fileResource0.getReader(charset0);
      assertNotNull(bufferedReader0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BytesResource bytesResource0 = new BytesResource(byteArray0);
      String string0 = bytesResource0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Resource[] resourceArray0 = new Resource[2];
      FileResource fileResource0 = new FileResource("com.axios.core.resource.MultiResource");
      resourceArray0[0] = (Resource) fileResource0;
      MultiResource multiResource0 = new MultiResource(resourceArray0);
      String string0 = multiResource0.getName();
      assertEquals("com.axios.core.resource.MultiResource", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BytesResource bytesResource0 = new BytesResource(byteArray0, "");
      String string0 = bytesResource0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(linkedList0);
      multiFileResource0.add((Resource) multiFileResource0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("X,9)%u3I6<gS <C+%");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        multiFileResource0.writeTo(mockPrintStream0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileResource fileResource0 = new FileResource((File) null, ".3'kM6#.d_{D");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".3'kM6#.d_{D");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        fileResource0.writeTo(mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.axios.exception.NoResourceException", "");
      FileResource fileResource0 = new FileResource(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/com.axios.exception.NoResourceException0");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        fileResource0.readUtf8Str();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileResource fileResource0 = new FileResource("null");
      // Undeclared exception!
      try { 
        fileResource0.readUtf8Str();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Resource> linkedList0 = new LinkedList<Resource>();
      MultiResource multiResource0 = new MultiResource(linkedList0);
      // Undeclared exception!
      try { 
        multiResource0.readUtf8Str();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.axios.exception.NoResourceException", "");
      FileResource fileResource0 = new FileResource(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      try { 
        fileResource0.readStr(charset0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileResource fileResource0 = new FileResource((File) null, "");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        fileResource0.readStr(charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.axios.exception.NoResourceException");
      FileResource fileResource0 = new FileResource(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        fileResource0.readStr(charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(linkedList0);
      File file0 = MockFile.createTempFile("][?\"YxYg", "][?\"YxYg");
      linkedList0.add(file0);
      multiFileResource0.add((Collection<File>) linkedList0);
      multiFileResource0.remove();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        multiFileResource0.readStr(charset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.axios.exception.NoResourceException", "com.axios.exception.NoResourceException");
      FileResource fileResource0 = new FileResource(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/com.axios.exception.NoResourceException0com.axios.exception.NoResourceException");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        fileResource0.readBytes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      File[] fileArray0 = new File[0];
      MultiFileResource multiFileResource0 = new MultiFileResource(fileArray0);
      multiFileResource0.add(multiFileResource0);
      // Undeclared exception!
      try { 
        multiFileResource0.readBytes();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileResource fileResource0 = new FileResource((File) null, "");
      // Undeclared exception!
      try { 
        fileResource0.readBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(linkedList0);
      // Undeclared exception!
      try { 
        multiFileResource0.readBytes();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(linkedList0);
      MultiFileResource multiFileResource1 = multiFileResource0.add((Resource) multiFileResource0);
      // Undeclared exception!
      try { 
        multiFileResource1.getUrl();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Resource[] resourceArray0 = new Resource[9];
      MultiResource multiResource0 = new MultiResource(resourceArray0);
      // Undeclared exception!
      try { 
        multiResource0.getUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Resource[] resourceArray0 = new Resource[0];
      MultiResource multiResource0 = new MultiResource(resourceArray0);
      // Undeclared exception!
      try { 
        multiResource0.getUrl();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileResource fileResource0 = new FileResource((File) null, "com.axios.core.resource.FileResource");
      // Undeclared exception!
      try { 
        fileResource0.getUrl();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File is null !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(linkedList0);
      // Undeclared exception!
      try { 
        multiFileResource0.getStream();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(linkedList0);
      multiFileResource0.add((Resource) multiFileResource0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        multiFileResource0.getReader(charset0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(linkedList0);
      MultiFileResource multiFileResource1 = multiFileResource0.add((Resource) multiFileResource0);
      Resource resource0 = multiFileResource1.next();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        resource0.getReader(charset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Resource[] resourceArray0 = new Resource[2];
      MultiResource multiResource0 = new MultiResource(resourceArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      multiResource0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        multiResource0.getName();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.axios.exception.NoResourceException", "");
      FileResource fileResource0 = new FileResource(file0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = fileResource0.readStr(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileResource fileResource0 = new FileResource((File) null, (String) null);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        fileResource0.getReader(charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "com.axios.exception.IORuntimeException");
      Path path0 = mockFile0.toPath();
      mockFile0.createNewFile();
      FileResource fileResource0 = new FileResource(path0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 4349);
      try { 
        fileResource0.writeTo(bufferedOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(linkedList0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("X,9)%u3I6<gS <C+%");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        multiFileResource0.writeTo(mockPrintStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(linkedList0);
      File file0 = MockFile.createTempFile("][?\"YxYg", "][?\"YxYg");
      linkedList0.add(file0);
      multiFileResource0.add((Collection<File>) linkedList0);
      // Undeclared exception!
      try { 
        multiFileResource0.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OutputStream is null !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileResource fileResource0 = new FileResource("InputStream ust enot null!");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        fileResource0.writeTo(bufferedOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream is null !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<File> linkedList0 = new LinkedList<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(linkedList0);
      File file0 = MockFile.createTempFile("][?\"YxYg", "][?\"YxYg");
      linkedList0.add(file0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("X,9)%u3I6<gS <C+%");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      multiFileResource0.add((Collection<File>) linkedList0);
      multiFileResource0.writeTo(mockPrintStream0);
      assertTrue(multiFileResource0.hasNext());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.axios.exception.NoResourceException", "com.axios.exception.NoResourceException");
      FileResource fileResource0 = new FileResource(file0);
      String string0 = fileResource0.readUtf8Str();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileResource fileResource0 = new FileResource("");
      // Undeclared exception!
      try { 
        fileResource0.readBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream is null !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }
}
