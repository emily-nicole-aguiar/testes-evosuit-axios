/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 02:04:05 GMT 2024
 */

package com.axios.ajax;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.Axios;
import com.axios.core.requestMethod.RequestMethod;
import com.axios.header.Header;
import com.axios.method.Method;
import com.axios.request.Request;
import com.axios.response.Response;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ajax_ESTest extends Ajax_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RequestMethod requestMethod0 = RequestMethod.HEAD;
      Request request0 = new Request();
      Axios axios0 = new Axios("d/+tUa", requestMethod0, request0);
      Method method0 = mock(Method.class, new ViolatedAssumptionAnswer());
      axios0.then(method0);
      assertEquals(RequestMethod.HEAD, axios0.getMethod());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RequestMethod requestMethod0 = RequestMethod.TRACE;
      Header header0 = new Header();
      Axios axios0 = new Axios("(", requestMethod0, header0);
      Response response0 = axios0.ajax();
      assertNull(response0.getData());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RequestMethod requestMethod0 = RequestMethod.TRACE;
      Axios axios0 = new Axios("l,~zzDe", requestMethod0);
      Method method0 = mock(Method.class, new ViolatedAssumptionAnswer());
      axios0.setUrl("GoCFj]+ L60 V}$1;^");
      try { 
        axios0.then(method0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal character in authority at index 7: http://GoCFj]+ L60 V}$1;^/
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Axios axios0 = new Axios();
      axios0.setUrl("I7PQkw,:lRUSfSC");
      Method method0 = mock(Method.class, new ViolatedAssumptionAnswer());
      try { 
        axios0.then(method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Axios axios0 = new Axios();
      axios0.setUrl("I7PQkw,:lRUSfSC");
      try { 
        axios0.ajax();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Axios axios0 = new Axios();
      try { 
        axios0.ajax();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Axios axios0 = new Axios();
      Method method0 = mock(Method.class, new ViolatedAssumptionAnswer());
      try { 
        axios0.then(method0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }
}
