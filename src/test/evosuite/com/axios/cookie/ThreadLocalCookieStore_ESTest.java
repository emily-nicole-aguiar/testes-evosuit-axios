/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 02:01:46 GMT 2024
 */

package com.axios.cookie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.cookie.ThreadLocalCookieStore;
import java.net.CookieStore;
import java.net.HttpCookie;
import java.net.URI;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThreadLocalCookieStore_ESTest extends ThreadLocalCookieStore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      URI uRI0 = MockURI.aHttpURI;
      HttpCookie httpCookie0 = new HttpCookie("Op3G~_+t}", "Op3G~_+t}");
      httpCookie0.setHttpOnly(true);
      threadLocalCookieStore0.remove(uRI0, httpCookie0);
      boolean boolean0 = threadLocalCookieStore0.removeAll();
      boolean boolean1 = threadLocalCookieStore0.remove((URI) null, httpCookie0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      URI uRI0 = MockURI.aFTPURI;
      List<HttpCookie> list0 = threadLocalCookieStore0.get(uRI0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      URI uRI0 = MockURI.aFileURI;
      List<HttpCookie> list0 = threadLocalCookieStore0.get(uRI0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      URI uRI0 = MockURI.URI("");
      // Undeclared exception!
      try { 
        threadLocalCookieStore0.remove(uRI0, (HttpCookie) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // cookie is null
         //
         verifyException("java.net.InMemoryCookieStore", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      URI uRI0 = MockURI.aFTPURI;
      // Undeclared exception!
      try { 
        threadLocalCookieStore0.add(uRI0, (HttpCookie) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // cookie is null
         //
         verifyException("java.net.InMemoryCookieStore", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      HttpCookie httpCookie0 = new HttpCookie("Op3G~_+t}", "Op3G~_+t}");
      threadLocalCookieStore0.add((URI) null, httpCookie0);
      assertNull(httpCookie0.getCommentURL());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      List<HttpCookie> list0 = threadLocalCookieStore0.getCookies();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      // Undeclared exception!
      try { 
        threadLocalCookieStore0.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // uri is null
         //
         verifyException("java.net.InMemoryCookieStore", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      ThreadLocalCookieStore threadLocalCookieStore1 = threadLocalCookieStore0.removeCurrent();
      assertSame(threadLocalCookieStore0, threadLocalCookieStore1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      List<URI> list0 = threadLocalCookieStore0.getURIs();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      CookieStore cookieStore0 = threadLocalCookieStore0.getCookieStore();
      assertNotNull(cookieStore0);
  }
}
