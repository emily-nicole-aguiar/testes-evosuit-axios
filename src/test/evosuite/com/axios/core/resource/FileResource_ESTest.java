/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:51:07 GMT 2024
 */

package com.axios.core.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.resource.FileResource;
import java.io.File;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.Path;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileResource_ESTest extends FileResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileResource fileResource0 = new FileResource("");
      String string0 = fileResource0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      FileResource fileResource0 = new FileResource(path0);
      InputStream inputStream0 = fileResource0.getStream();
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileResource fileResource0 = new FileResource(mockFile0, (String) null);
      String string0 = fileResource0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileResource fileResource0 = new FileResource((File) null, "'L:!99)");
      File file0 = fileResource0.getFile();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".D?mv", "");
      Path path0 = mockFile0.toPath();
      FileResource fileResource0 = new FileResource(path0);
      File file0 = fileResource0.getFile();
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.axios.exception.NoResourceException");
      FileResource fileResource0 = new FileResource(mockFile0);
      File file0 = fileResource0.getFile();
      assertSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileResource fileResource0 = new FileResource((File) null, "");
      // Undeclared exception!
      try { 
        fileResource0.getUrl();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File is null !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileResource fileResource0 = new FileResource((File) null, "");
      // Undeclared exception!
      try { 
        fileResource0.getStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileResource fileResource0 = new FileResource((File) null, (String) null);
      // Undeclared exception!
      try { 
        fileResource0.getName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.resource.FileResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileResource fileResource0 = null;
      try {
        fileResource0 = new FileResource((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.resource.FileResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      FileResource fileResource0 = new FileResource(path0);
      File file0 = fileResource0.getFile();
      assertNull(file0.getParent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileResource fileResource0 = new FileResource((File) null, "'L:!99)");
      String string0 = fileResource0.toString();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileResource fileResource0 = null;
      try {
        fileResource0 = new FileResource((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.resource.FileResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileResource fileResource0 = null;
      try {
        fileResource0 = new FileResource((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.resource.FileResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = MockFile.createTempFile("s8$nEL}5IX", "s8$nEL}5IX");
      FileResource fileResource0 = new FileResource(file0, "s8$nEL}5IX");
      File file1 = fileResource0.getFile();
      assertTrue(file1.canWrite());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("s8$nEL}5IX", "s8$nEL}5IX");
      FileResource fileResource0 = new FileResource(file0, "s8$nEL}5IX");
      String string0 = fileResource0.getName();
      assertEquals("s8$nEL}5IX0s8$nEL}5IX", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = MockFile.createTempFile("s8$nEL}5IX", "s8$nEL}5IX");
      FileResource fileResource0 = new FileResource(file0, "s8$nEL}5IX");
      URL uRL0 = fileResource0.getUrl();
      assertEquals((-1), uRL0.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = MockFile.createTempFile("s8$nEL}5IX", "s8$nEL}5IX");
      FileResource fileResource0 = new FileResource(file0, "s8$nEL}5IX");
      InputStream inputStream0 = fileResource0.getStream();
      assertNotNull(inputStream0);
  }
}
