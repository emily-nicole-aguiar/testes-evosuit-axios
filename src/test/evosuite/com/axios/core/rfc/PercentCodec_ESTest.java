/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 05:05:08 GMT 2024
 */

package com.axios.core.rfc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.rfc.PercentCodec;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.BitSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PercentCodec_ESTest extends PercentCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      PercentCodec percentCodec0 = new PercentCodec(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(percentCodec0);
      
      char char0 = '=';
      PercentCodec percentCodec1 = percentCodec0.addSafe('=');
      assertSame(percentCodec0, percentCodec1);
      assertSame(percentCodec1, percentCodec0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(62, bitSet0.length());
      assertEquals("{61}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(percentCodec1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1149);
      assertEquals(1149, charBuffer0.remaining());
      assertEquals(1149, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1149, charBuffer0.length());
      assertEquals(1149, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(1149, charBuffer0.remaining());
      assertEquals(1149, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1149, charBuffer0.length());
      assertEquals(1149, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1149, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(1149, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertEquals(1149, charBuffer1.remaining());
      assertEquals(1149, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertNotNull(charBuffer1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      CharBuffer charBuffer2 = charBuffer0.put('=');
      assertSame(charBuffer0, charBuffer2);
      assertSame(charBuffer2, charBuffer0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertEquals(1149, charBuffer0.capacity());
      assertEquals(1148, charBuffer0.remaining());
      assertEquals(1148, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1149, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer2.arrayOffset());
      assertFalse(charBuffer2.isDirect());
      assertEquals(1148, charBuffer2.remaining());
      assertEquals(1149, charBuffer2.limit());
      assertEquals(1, charBuffer2.position());
      assertTrue(charBuffer2.hasArray());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(1149, charBuffer2.capacity());
      assertEquals(1148, charBuffer2.length());
      assertTrue(charBuffer2.hasRemaining());
      assertNotNull(charBuffer2);
      
      Set<String> set0 = charset0.aliases();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        percentCodec0.encode(charBuffer1, charset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec();
      assertNotNull(percentCodec0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      String string0 = percentCodec0.encode(charBuffer0, charset0);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(string0);
      assertEquals("", string0);
      
      PercentCodec percentCodec1 = PercentCodec.of((CharSequence) "");
      assertNotSame(percentCodec1, percentCodec0);
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertNotNull(percentCodec1);
      
      PercentCodec percentCodec2 = PercentCodec.of(percentCodec1);
      assertNotSame(percentCodec1, percentCodec2);
      assertNotSame(percentCodec1, percentCodec0);
      assertNotSame(percentCodec2, percentCodec1);
      assertNotSame(percentCodec2, percentCodec0);
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertFalse(percentCodec2.equals((Object)percentCodec1));
      assertFalse(percentCodec2.equals((Object)percentCodec0));
      assertNotNull(percentCodec2);
      
      PercentCodec percentCodec3 = percentCodec2.or(percentCodec0);
      assertNotSame(percentCodec0, percentCodec2);
      assertNotSame(percentCodec0, percentCodec1);
      assertNotSame(percentCodec0, percentCodec3);
      assertNotSame(percentCodec1, percentCodec2);
      assertNotSame(percentCodec1, percentCodec0);
      assertNotSame(percentCodec1, percentCodec3);
      assertSame(percentCodec2, percentCodec3);
      assertNotSame(percentCodec2, percentCodec1);
      assertNotSame(percentCodec2, percentCodec0);
      assertNotSame(percentCodec3, percentCodec1);
      assertNotSame(percentCodec3, percentCodec0);
      assertSame(percentCodec3, percentCodec2);
      assertFalse(percentCodec0.equals((Object)percentCodec2));
      assertFalse(percentCodec0.equals((Object)percentCodec1));
      assertFalse(percentCodec1.equals((Object)percentCodec2));
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertFalse(percentCodec2.equals((Object)percentCodec1));
      assertFalse(percentCodec2.equals((Object)percentCodec0));
      assertFalse(percentCodec3.equals((Object)percentCodec1));
      assertFalse(percentCodec3.equals((Object)percentCodec0));
      assertNotNull(percentCodec3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BitSet bitSet0 = new BitSet(1119);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1152, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      PercentCodec percentCodec0 = new PercentCodec(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1152, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(percentCodec0);
      
      PercentCodec percentCodec1 = PercentCodec.of(percentCodec0);
      assertNotSame(percentCodec0, percentCodec1);
      assertNotSame(percentCodec1, percentCodec0);
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1152, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(percentCodec1);
      
      PercentCodec percentCodec2 = percentCodec1.or(percentCodec0);
      assertNotSame(percentCodec0, percentCodec1);
      assertNotSame(percentCodec0, percentCodec2);
      assertNotSame(percentCodec1, percentCodec0);
      assertSame(percentCodec1, percentCodec2);
      assertNotSame(percentCodec2, percentCodec0);
      assertSame(percentCodec2, percentCodec1);
      assertFalse(percentCodec0.equals((Object)percentCodec1));
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertFalse(percentCodec2.equals((Object)percentCodec0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1152, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(percentCodec2);
      
      PercentCodec percentCodec3 = percentCodec0.setEncodeSpaceAsPlus(true);
      assertNotSame(percentCodec0, percentCodec1);
      assertSame(percentCodec0, percentCodec3);
      assertNotSame(percentCodec0, percentCodec2);
      assertSame(percentCodec3, percentCodec0);
      assertNotSame(percentCodec3, percentCodec2);
      assertNotSame(percentCodec3, percentCodec1);
      assertFalse(percentCodec0.equals((Object)percentCodec1));
      assertFalse(percentCodec0.equals((Object)percentCodec2));
      assertFalse(percentCodec3.equals((Object)percentCodec2));
      assertFalse(percentCodec3.equals((Object)percentCodec1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1152, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(percentCodec3);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)0;
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertNotNull(byteBuffer0);
      
      byteArray0[2] = (byte)65;
      ByteBuffer byteBuffer1 = ByteBuffer.wrap(byteArray0);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertEquals(0, byteBuffer1.position());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertTrue(byteBuffer1.hasRemaining());
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(3, byteBuffer1.remaining());
      assertEquals(3, byteBuffer1.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]", byteBuffer1.toString());
      assertEquals(3, byteBuffer1.limit());
      assertArrayEquals(new byte[] {(byte)97, (byte)0, (byte)65}, byteArray0);
      assertNotNull(byteBuffer1);
      assertEquals(3, byteArray0.length);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer1);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.hasRemaining());
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=3 lim=3 cap=3]", byteBuffer1.toString());
      assertEquals(3, byteBuffer1.capacity());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals(3, byteBuffer1.limit());
      assertEquals(3, byteBuffer1.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("a\u0000A", charBuffer0.toString());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte)97, (byte)0, (byte)65}, byteArray0);
      assertNotNull(charBuffer0);
      assertEquals(3, byteArray0.length);
      
      String string0 = percentCodec0.encode(charBuffer0, charset0);
      assertNotSame(percentCodec0, percentCodec1);
      assertSame(percentCodec0, percentCodec3);
      assertNotSame(percentCodec0, percentCodec2);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertFalse(percentCodec0.equals((Object)percentCodec1));
      assertFalse(percentCodec0.equals((Object)percentCodec2));
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1152, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.hasRemaining());
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=3 lim=3 cap=3]", byteBuffer1.toString());
      assertEquals(3, byteBuffer1.capacity());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals(3, byteBuffer1.limit());
      assertEquals(3, byteBuffer1.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("a\u0000A", charBuffer0.toString());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte)97, (byte)0, (byte)65}, byteArray0);
      assertNotNull(string0);
      assertEquals("%61%00%41", string0);
      assertEquals(3, byteArray0.length);
      
      PercentCodec percentCodec4 = percentCodec1.or(percentCodec2);
      assertNotSame(percentCodec0, percentCodec1);
      assertSame(percentCodec0, percentCodec3);
      assertNotSame(percentCodec0, percentCodec2);
      assertNotSame(percentCodec0, percentCodec4);
      assertNotSame(percentCodec1, percentCodec0);
      assertSame(percentCodec1, percentCodec4);
      assertNotSame(percentCodec1, percentCodec3);
      assertSame(percentCodec1, percentCodec2);
      assertNotSame(percentCodec2, percentCodec3);
      assertSame(percentCodec2, percentCodec4);
      assertSame(percentCodec2, percentCodec1);
      assertNotSame(percentCodec2, percentCodec0);
      assertSame(percentCodec4, percentCodec2);
      assertSame(percentCodec4, percentCodec1);
      assertNotSame(percentCodec4, percentCodec3);
      assertNotSame(percentCodec4, percentCodec0);
      assertFalse(percentCodec0.equals((Object)percentCodec1));
      assertFalse(percentCodec0.equals((Object)percentCodec2));
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertFalse(percentCodec1.equals((Object)percentCodec3));
      assertFalse(percentCodec2.equals((Object)percentCodec3));
      assertFalse(percentCodec2.equals((Object)percentCodec0));
      assertFalse(percentCodec4.equals((Object)percentCodec3));
      assertFalse(percentCodec4.equals((Object)percentCodec0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1152, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(percentCodec4);
      
      PercentCodec percentCodec5 = PercentCodec.of((CharSequence) charBuffer0);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertNotSame(percentCodec5, percentCodec4);
      assertNotSame(percentCodec5, percentCodec3);
      assertNotSame(percentCodec5, percentCodec1);
      assertNotSame(percentCodec5, percentCodec0);
      assertNotSame(percentCodec5, percentCodec2);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(percentCodec5.equals((Object)percentCodec4));
      assertFalse(percentCodec5.equals((Object)percentCodec3));
      assertFalse(percentCodec5.equals((Object)percentCodec1));
      assertFalse(percentCodec5.equals((Object)percentCodec0));
      assertFalse(percentCodec5.equals((Object)percentCodec2));
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.hasRemaining());
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=3 lim=3 cap=3]", byteBuffer1.toString());
      assertEquals(3, byteBuffer1.capacity());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals(3, byteBuffer1.limit());
      assertEquals(3, byteBuffer1.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("a\u0000A", charBuffer0.toString());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte)97, (byte)0, (byte)65}, byteArray0);
      assertNotNull(percentCodec5);
      assertEquals(3, byteArray0.length);
      
      PercentCodec percentCodec6 = PercentCodec.of(percentCodec3);
      assertNotSame(percentCodec6, percentCodec1);
      assertNotSame(percentCodec6, percentCodec4);
      assertNotSame(percentCodec6, percentCodec5);
      assertNotSame(percentCodec6, percentCodec2);
      assertNotSame(percentCodec6, percentCodec3);
      assertNotSame(percentCodec6, percentCodec0);
      assertNotSame(percentCodec0, percentCodec1);
      assertSame(percentCodec0, percentCodec3);
      assertNotSame(percentCodec0, percentCodec2);
      assertNotSame(percentCodec0, percentCodec5);
      assertNotSame(percentCodec0, percentCodec4);
      assertNotSame(percentCodec0, percentCodec6);
      assertNotSame(percentCodec3, percentCodec4);
      assertSame(percentCodec3, percentCodec0);
      assertNotSame(percentCodec3, percentCodec2);
      assertNotSame(percentCodec3, percentCodec1);
      assertNotSame(percentCodec3, percentCodec6);
      assertNotSame(percentCodec3, percentCodec5);
      assertFalse(percentCodec6.equals((Object)percentCodec1));
      assertFalse(percentCodec6.equals((Object)percentCodec4));
      assertFalse(percentCodec6.equals((Object)percentCodec5));
      assertFalse(percentCodec6.equals((Object)percentCodec2));
      assertFalse(percentCodec6.equals((Object)percentCodec3));
      assertFalse(percentCodec6.equals((Object)percentCodec0));
      assertFalse(percentCodec0.equals((Object)percentCodec1));
      assertFalse(percentCodec0.equals((Object)percentCodec2));
      assertFalse(percentCodec0.equals((Object)percentCodec5));
      assertFalse(percentCodec0.equals((Object)percentCodec4));
      assertFalse(percentCodec3.equals((Object)percentCodec4));
      assertFalse(percentCodec3.equals((Object)percentCodec2));
      assertFalse(percentCodec3.equals((Object)percentCodec1));
      assertFalse(percentCodec3.equals((Object)percentCodec5));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1152, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(percentCodec6);
      
      PercentCodec percentCodec7 = percentCodec2.or(percentCodec6);
      assertNotSame(percentCodec6, percentCodec1);
      assertNotSame(percentCodec6, percentCodec7);
      assertNotSame(percentCodec6, percentCodec4);
      assertNotSame(percentCodec6, percentCodec5);
      assertNotSame(percentCodec6, percentCodec2);
      assertNotSame(percentCodec6, percentCodec3);
      assertNotSame(percentCodec6, percentCodec0);
      assertSame(percentCodec7, percentCodec1);
      assertNotSame(percentCodec7, percentCodec6);
      assertNotSame(percentCodec7, percentCodec0);
      assertSame(percentCodec7, percentCodec2);
      assertSame(percentCodec7, percentCodec4);
      assertNotSame(percentCodec7, percentCodec3);
      assertNotSame(percentCodec7, percentCodec5);
      assertNotSame(percentCodec0, percentCodec1);
      assertNotSame(percentCodec0, percentCodec7);
      assertSame(percentCodec0, percentCodec3);
      assertNotSame(percentCodec0, percentCodec2);
      assertNotSame(percentCodec0, percentCodec5);
      assertNotSame(percentCodec0, percentCodec4);
      assertNotSame(percentCodec0, percentCodec6);
      assertNotSame(percentCodec1, percentCodec0);
      assertSame(percentCodec1, percentCodec7);
      assertNotSame(percentCodec1, percentCodec6);
      assertSame(percentCodec1, percentCodec4);
      assertNotSame(percentCodec1, percentCodec5);
      assertNotSame(percentCodec1, percentCodec3);
      assertSame(percentCodec1, percentCodec2);
      assertNotSame(percentCodec2, percentCodec3);
      assertNotSame(percentCodec2, percentCodec5);
      assertSame(percentCodec2, percentCodec4);
      assertSame(percentCodec2, percentCodec7);
      assertSame(percentCodec2, percentCodec1);
      assertNotSame(percentCodec2, percentCodec6);
      assertNotSame(percentCodec2, percentCodec0);
      assertNotSame(percentCodec3, percentCodec4);
      assertSame(percentCodec3, percentCodec0);
      assertNotSame(percentCodec3, percentCodec2);
      assertNotSame(percentCodec3, percentCodec1);
      assertNotSame(percentCodec3, percentCodec6);
      assertNotSame(percentCodec3, percentCodec5);
      assertNotSame(percentCodec3, percentCodec7);
      assertFalse(percentCodec6.equals((Object)percentCodec1));
      assertFalse(percentCodec6.equals((Object)percentCodec4));
      assertFalse(percentCodec6.equals((Object)percentCodec5));
      assertFalse(percentCodec6.equals((Object)percentCodec2));
      assertFalse(percentCodec6.equals((Object)percentCodec3));
      assertFalse(percentCodec6.equals((Object)percentCodec0));
      assertFalse(percentCodec7.equals((Object)percentCodec6));
      assertFalse(percentCodec7.equals((Object)percentCodec0));
      assertFalse(percentCodec7.equals((Object)percentCodec3));
      assertFalse(percentCodec7.equals((Object)percentCodec5));
      assertFalse(percentCodec0.equals((Object)percentCodec1));
      assertFalse(percentCodec0.equals((Object)percentCodec2));
      assertFalse(percentCodec0.equals((Object)percentCodec5));
      assertFalse(percentCodec0.equals((Object)percentCodec4));
      assertFalse(percentCodec0.equals((Object)percentCodec6));
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertFalse(percentCodec1.equals((Object)percentCodec6));
      assertFalse(percentCodec1.equals((Object)percentCodec5));
      assertFalse(percentCodec1.equals((Object)percentCodec3));
      assertFalse(percentCodec2.equals((Object)percentCodec3));
      assertFalse(percentCodec2.equals((Object)percentCodec5));
      assertFalse(percentCodec2.equals((Object)percentCodec6));
      assertFalse(percentCodec2.equals((Object)percentCodec0));
      assertFalse(percentCodec3.equals((Object)percentCodec4));
      assertFalse(percentCodec3.equals((Object)percentCodec2));
      assertFalse(percentCodec3.equals((Object)percentCodec1));
      assertFalse(percentCodec3.equals((Object)percentCodec6));
      assertFalse(percentCodec3.equals((Object)percentCodec5));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1152, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(percentCodec7);
      
      PercentCodec percentCodec8 = percentCodec4.removeSafe(')');
      assertNotSame(percentCodec0, percentCodec1);
      assertNotSame(percentCodec0, percentCodec7);
      assertSame(percentCodec0, percentCodec3);
      assertNotSame(percentCodec0, percentCodec2);
      assertNotSame(percentCodec0, percentCodec5);
      assertNotSame(percentCodec0, percentCodec8);
      assertNotSame(percentCodec0, percentCodec4);
      assertNotSame(percentCodec0, percentCodec6);
      assertNotSame(percentCodec8, percentCodec6);
      assertSame(percentCodec8, percentCodec7);
      assertNotSame(percentCodec8, percentCodec0);
      assertNotSame(percentCodec8, percentCodec3);
      assertSame(percentCodec8, percentCodec4);
      assertNotSame(percentCodec8, percentCodec5);
      assertSame(percentCodec8, percentCodec1);
      assertSame(percentCodec8, percentCodec2);
      assertNotSame(percentCodec1, percentCodec0);
      assertSame(percentCodec1, percentCodec8);
      assertSame(percentCodec1, percentCodec7);
      assertNotSame(percentCodec1, percentCodec6);
      assertSame(percentCodec1, percentCodec4);
      assertNotSame(percentCodec1, percentCodec5);
      assertNotSame(percentCodec1, percentCodec3);
      assertSame(percentCodec1, percentCodec2);
      assertNotSame(percentCodec2, percentCodec3);
      assertNotSame(percentCodec2, percentCodec5);
      assertSame(percentCodec2, percentCodec4);
      assertSame(percentCodec2, percentCodec7);
      assertSame(percentCodec2, percentCodec1);
      assertNotSame(percentCodec2, percentCodec6);
      assertNotSame(percentCodec2, percentCodec0);
      assertSame(percentCodec2, percentCodec8);
      assertNotSame(percentCodec4, percentCodec6);
      assertSame(percentCodec4, percentCodec7);
      assertSame(percentCodec4, percentCodec2);
      assertSame(percentCodec4, percentCodec8);
      assertSame(percentCodec4, percentCodec1);
      assertNotSame(percentCodec4, percentCodec3);
      assertNotSame(percentCodec4, percentCodec5);
      assertNotSame(percentCodec4, percentCodec0);
      assertFalse(percentCodec0.equals((Object)percentCodec1));
      assertFalse(percentCodec0.equals((Object)percentCodec7));
      assertFalse(percentCodec0.equals((Object)percentCodec2));
      assertFalse(percentCodec0.equals((Object)percentCodec5));
      assertFalse(percentCodec0.equals((Object)percentCodec4));
      assertFalse(percentCodec0.equals((Object)percentCodec6));
      assertFalse(percentCodec8.equals((Object)percentCodec6));
      assertFalse(percentCodec8.equals((Object)percentCodec0));
      assertFalse(percentCodec8.equals((Object)percentCodec3));
      assertFalse(percentCodec8.equals((Object)percentCodec5));
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertFalse(percentCodec1.equals((Object)percentCodec6));
      assertFalse(percentCodec1.equals((Object)percentCodec5));
      assertFalse(percentCodec1.equals((Object)percentCodec3));
      assertFalse(percentCodec2.equals((Object)percentCodec3));
      assertFalse(percentCodec2.equals((Object)percentCodec5));
      assertFalse(percentCodec2.equals((Object)percentCodec6));
      assertFalse(percentCodec2.equals((Object)percentCodec0));
      assertFalse(percentCodec4.equals((Object)percentCodec6));
      assertFalse(percentCodec4.equals((Object)percentCodec3));
      assertFalse(percentCodec4.equals((Object)percentCodec5));
      assertFalse(percentCodec4.equals((Object)percentCodec0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1152, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(percentCodec8);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec();
      assertNotNull(percentCodec0);
      
      PercentCodec percentCodec1 = percentCodec0.orNew(percentCodec0);
      assertNotSame(percentCodec0, percentCodec1);
      assertNotSame(percentCodec1, percentCodec0);
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertNotNull(percentCodec1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      PercentCodec percentCodec2 = percentCodec0.setEncodeSpaceAsPlus(true);
      assertSame(percentCodec0, percentCodec2);
      assertNotSame(percentCodec0, percentCodec1);
      assertNotSame(percentCodec2, percentCodec1);
      assertSame(percentCodec2, percentCodec0);
      assertFalse(percentCodec0.equals((Object)percentCodec1));
      assertFalse(percentCodec2.equals((Object)percentCodec1));
      assertNotNull(percentCodec2);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(" \u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(7, charBuffer0.remaining());
      assertArrayEquals(new char[] {' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(7, charArray0.length);
      
      String string0 = percentCodec2.encode(charBuffer0, charset0);
      assertSame(percentCodec0, percentCodec2);
      assertNotSame(percentCodec0, percentCodec1);
      assertNotSame(percentCodec2, percentCodec1);
      assertSame(percentCodec2, percentCodec0);
      assertFalse(percentCodec0.equals((Object)percentCodec1));
      assertFalse(percentCodec2.equals((Object)percentCodec1));
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(" \u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(7, charBuffer0.remaining());
      assertArrayEquals(new char[] {' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("+%00%00%00%00%00%00", string0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec((BitSet) null);
      assertNotNull(percentCodec0);
      
      char char0 = '6';
      // Undeclared exception!
      try { 
        percentCodec0.addSafe('6');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec();
      assertNotNull(percentCodec0);
      
      PercentCodec percentCodec1 = null;
      // Undeclared exception!
      try { 
        percentCodec0.orNew((PercentCodec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.rfc.PercentCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec();
      assertNotNull(percentCodec0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      String string0 = percentCodec0.encode((CharSequence) null, charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        PercentCodec.of((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.rfc.PercentCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      PercentCodec percentCodec0 = new PercentCodec(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(percentCodec0);
      
      int int0 = bitSet0.previousSetBit(51);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), int0);
      
      BitSet bitSet1 = null;
      char char0 = '{';
      PercentCodec percentCodec1 = percentCodec0.removeSafe('{');
      assertSame(percentCodec0, percentCodec1);
      assertSame(percentCodec1, percentCodec0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(percentCodec1);
      
      PercentCodec percentCodec2 = percentCodec1.or(percentCodec0);
      assertSame(percentCodec0, percentCodec2);
      assertSame(percentCodec0, percentCodec1);
      assertSame(percentCodec1, percentCodec2);
      assertSame(percentCodec1, percentCodec0);
      assertSame(percentCodec2, percentCodec0);
      assertSame(percentCodec2, percentCodec1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(percentCodec2);
      
      PercentCodec percentCodec3 = new PercentCodec((BitSet) null);
      assertFalse(percentCodec3.equals((Object)percentCodec0));
      assertFalse(percentCodec3.equals((Object)percentCodec2));
      assertFalse(percentCodec3.equals((Object)percentCodec1));
      assertNotNull(percentCodec3);
      
      // Undeclared exception!
      try { 
        percentCodec0.or(percentCodec3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec((BitSet) null);
      assertNotNull(percentCodec0);
      
      char char0 = 'N';
      // Undeclared exception!
      try { 
        percentCodec0.removeSafe('N');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.rfc.PercentCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec();
      assertNotNull(percentCodec0);
      
      PercentCodec percentCodec1 = percentCodec0.removeSafe('l');
      assertSame(percentCodec0, percentCodec1);
      assertSame(percentCodec1, percentCodec0);
      assertNotNull(percentCodec1);
      
      PercentCodec percentCodec2 = percentCodec1.orNew(percentCodec0);
      assertNotSame(percentCodec0, percentCodec2);
      assertSame(percentCodec0, percentCodec1);
      assertNotSame(percentCodec1, percentCodec2);
      assertSame(percentCodec1, percentCodec0);
      assertNotSame(percentCodec2, percentCodec1);
      assertNotSame(percentCodec2, percentCodec0);
      assertFalse(percentCodec2.equals((Object)percentCodec1));
      assertFalse(percentCodec2.equals((Object)percentCodec0));
      assertNotNull(percentCodec2);
      
      PercentCodec percentCodec3 = percentCodec0.addSafe('l');
      assertSame(percentCodec0, percentCodec3);
      assertNotSame(percentCodec0, percentCodec2);
      assertSame(percentCodec0, percentCodec1);
      assertSame(percentCodec3, percentCodec1);
      assertNotSame(percentCodec3, percentCodec2);
      assertSame(percentCodec3, percentCodec0);
      assertFalse(percentCodec0.equals((Object)percentCodec2));
      assertFalse(percentCodec3.equals((Object)percentCodec2));
      assertNotNull(percentCodec3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec((BitSet) null);
      assertNotNull(percentCodec0);
      
      // Undeclared exception!
      try { 
        PercentCodec.of(percentCodec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.rfc.PercentCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec();
      assertNotNull(percentCodec0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(15);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(15, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(15, charBuffer0.limit());
      assertEquals(15, charBuffer0.remaining());
      assertEquals(15, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 15, 15);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(15, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(15, charBuffer0.limit());
      assertEquals(15, charBuffer0.remaining());
      assertEquals(15, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(15, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.length());
      assertEquals(15, charBuffer1.capacity());
      assertEquals(15, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertNotNull(charBuffer1);
      
      PercentCodec percentCodec1 = PercentCodec.of((CharSequence) charBuffer1);
      assertNotSame(percentCodec1, percentCodec0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(15, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(15, charBuffer0.limit());
      assertEquals(15, charBuffer0.remaining());
      assertEquals(15, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(15, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.length());
      assertEquals(15, charBuffer1.capacity());
      assertEquals(15, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertNotNull(percentCodec1);
      
      PercentCodec percentCodec2 = percentCodec0.or(percentCodec1);
      assertSame(percentCodec0, percentCodec2);
      assertNotSame(percentCodec0, percentCodec1);
      assertNotSame(percentCodec1, percentCodec0);
      assertNotSame(percentCodec1, percentCodec2);
      assertSame(percentCodec2, percentCodec0);
      assertNotSame(percentCodec2, percentCodec1);
      assertFalse(percentCodec0.equals((Object)percentCodec1));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertFalse(percentCodec2.equals((Object)percentCodec1));
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(15, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(15, charBuffer0.limit());
      assertEquals(15, charBuffer0.remaining());
      assertEquals(15, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(15, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.length());
      assertEquals(15, charBuffer1.capacity());
      assertEquals(15, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertNotNull(percentCodec2);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(15, charBuffer0.limit());
      assertEquals(15, charBuffer0.capacity());
      assertEquals(15, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=15 cap=16]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(15, byteBuffer0.remaining());
      assertEquals(15, byteBuffer0.limit());
      assertEquals(16, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertNotNull(byteBuffer0);
      
      // Undeclared exception!
      try { 
        percentCodec2.encode(charBuffer1, charset0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = 'M';
      char char0 = 'Y';
      charArray0[2] = 'Y';
      char char1 = 'a';
      charArray0[3] = 'a';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.capacity());
      assertEquals("|MYa", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertArrayEquals(new char[] {'|', 'M', 'Y', 'a'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(4, charArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.capacity());
      assertEquals("|MYa", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer1.limit());
      assertEquals(4, charBuffer1.remaining());
      assertEquals(4, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(4, charBuffer1.length());
      assertEquals("|MYa", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertArrayEquals(new char[] {'|', 'M', 'Y', 'a'}, charArray0);
      assertNotNull(charBuffer1);
      assertEquals(4, charArray0.length);
      
      CharBuffer charBuffer2 = charBuffer0.compact();
      assertSame(charBuffer0, charBuffer2);
      assertSame(charBuffer2, charBuffer0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertEquals(0, charBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer2.capacity());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(0, charBuffer2.length());
      assertFalse(charBuffer2.isDirect());
      assertEquals(0, charBuffer2.remaining());
      assertTrue(charBuffer2.hasArray());
      assertFalse(charBuffer2.isReadOnly());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(4, charBuffer2.limit());
      assertEquals("", charBuffer2.toString());
      assertEquals(4, charBuffer2.position());
      assertArrayEquals(new char[] {'|', 'M', 'Y', 'a'}, charArray0);
      assertNotNull(charBuffer2);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        PercentCodec.of((CharSequence) charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec((BitSet) null);
      assertNotNull(percentCodec0);
      
      char[] charArray0 = new char[3];
      boolean boolean0 = false;
      PercentCodec percentCodec1 = percentCodec0.setEncodeSpaceAsPlus(false);
      assertSame(percentCodec0, percentCodec1);
      assertSame(percentCodec1, percentCodec0);
      assertNotNull(percentCodec1);
      
      charArray0[0] = '~';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.position());
      assertEquals("~\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.limit());
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(3, charArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, charBuffer0.position());
      assertEquals("~\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer1.limit());
      assertEquals(3, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals("~\u0000\u0000", charBuffer1.toString());
      assertEquals(3, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charBuffer1);
      assertEquals(3, charArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        percentCodec0.encode(charBuffer1, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 255L;
      longArray0[2] = (-1L);
      longArray0[3] = (-189L);
      longArray0[4] = (-1583L);
      longArray0[5] = 783L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(384, bitSet0.size());
      assertEquals(195, bitSet0.cardinality());
      assertEquals("{64, 65, 66, 67, 68, 69, 70, 71, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 328, 329}", bitSet0.toString());
      assertEquals(330, bitSet0.length());
      assertArrayEquals(new long[] {0L, 255L, (-1L), (-189L), (-1583L), 783L, 0L, 0L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(8, longArray0.length);
      
      PercentCodec percentCodec0 = new PercentCodec(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(384, bitSet0.size());
      assertEquals(195, bitSet0.cardinality());
      assertEquals("{64, 65, 66, 67, 68, 69, 70, 71, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 328, 329}", bitSet0.toString());
      assertEquals(330, bitSet0.length());
      assertArrayEquals(new long[] {0L, 255L, (-1L), (-189L), (-1583L), 783L, 0L, 0L}, longArray0);
      assertNotNull(percentCodec0);
      assertEquals(8, longArray0.length);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2460);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(2460, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2460, charBuffer0.limit());
      assertEquals(2460, charBuffer0.capacity());
      assertEquals(2460, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string0 = percentCodec0.encode(charBuffer0, charset0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(384, bitSet0.size());
      assertEquals(195, bitSet0.cardinality());
      assertEquals("{64, 65, 66, 67, 68, 69, 70, 71, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 328, 329}", bitSet0.toString());
      assertEquals(330, bitSet0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(2460, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2460, charBuffer0.limit());
      assertEquals(2460, charBuffer0.capacity());
      assertEquals(2460, charBuffer0.length());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertArrayEquals(new long[] {0L, 255L, (-1L), (-189L), (-1583L), 783L, 0L, 0L}, longArray0);
      assertNotNull(string0);
      assertEquals(8, longArray0.length);
      
      PercentCodec percentCodec1 = PercentCodec.of((CharSequence) string0);
      assertNotSame(percentCodec0, percentCodec1);
      assertNotSame(percentCodec1, percentCodec0);
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(384, bitSet0.size());
      assertEquals(195, bitSet0.cardinality());
      assertEquals("{64, 65, 66, 67, 68, 69, 70, 71, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 328, 329}", bitSet0.toString());
      assertEquals(330, bitSet0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(2460, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2460, charBuffer0.limit());
      assertEquals(2460, charBuffer0.capacity());
      assertEquals(2460, charBuffer0.length());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertArrayEquals(new long[] {0L, 255L, (-1L), (-189L), (-1583L), 783L, 0L, 0L}, longArray0);
      assertNotNull(percentCodec1);
      assertEquals(8, longArray0.length);
      
      // Undeclared exception!
      PercentCodec.of((CharSequence) string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec();
      assertNotNull(percentCodec0);
      
      PercentCodec percentCodec1 = PercentCodec.of(percentCodec0);
      assertNotSame(percentCodec0, percentCodec1);
      assertNotSame(percentCodec1, percentCodec0);
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertNotNull(percentCodec1);
      
      PercentCodec percentCodec2 = percentCodec1.setEncodeSpaceAsPlus(false);
      assertNotSame(percentCodec0, percentCodec1);
      assertNotSame(percentCodec0, percentCodec2);
      assertNotSame(percentCodec1, percentCodec0);
      assertSame(percentCodec1, percentCodec2);
      assertSame(percentCodec2, percentCodec1);
      assertNotSame(percentCodec2, percentCodec0);
      assertFalse(percentCodec0.equals((Object)percentCodec1));
      assertFalse(percentCodec1.equals((Object)percentCodec0));
      assertFalse(percentCodec2.equals((Object)percentCodec0));
      assertNotNull(percentCodec2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      PercentCodec percentCodec0 = new PercentCodec();
      assertNotNull(percentCodec0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2502);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2502 cap=2502]", byteBuffer0.toString());
      assertEquals(2502, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(2502, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2502, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals(2502, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(2502, byteBuffer0.position());
      assertEquals(2502, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=2502 lim=2502 cap=2502]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(2502, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(2502, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2502, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2502, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      String string0 = percentCodec0.encode(charBuffer0, charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals(2502, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(2502, byteBuffer0.position());
      assertEquals(2502, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=2502 lim=2502 cap=2502]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(2502, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(2502, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2502, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2502, charBuffer0.capacity());
      assertNotNull(string0);
      
      // Undeclared exception!
      percentCodec0.encode(string0, charset0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2502);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      PercentCodec percentCodec0 = PercentCodec.of((CharSequence) charBuffer0);
      String string0 = percentCodec0.encode(charBuffer0, charset0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec();
      String string0 = percentCodec0.encode((CharSequence) null, (Charset) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec();
      CharBuffer charBuffer0 = CharBuffer.allocate(119);
      PercentCodec percentCodec1 = PercentCodec.of((CharSequence) charBuffer0);
      PercentCodec percentCodec2 = percentCodec0.or(percentCodec1);
      assertNotSame(percentCodec1, percentCodec2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      PercentCodec percentCodec0 = PercentCodec.of((CharSequence) charBuffer0);
      assertNotNull(percentCodec0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec();
      PercentCodec percentCodec1 = percentCodec0.removeSafe('M');
      assertSame(percentCodec1, percentCodec0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec();
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = percentCodec0.encode(charBuffer0, charset0);
      PercentCodec percentCodec1 = PercentCodec.of((CharSequence) "%00%00%00%00");
      percentCodec0.removeSafe('\u0000');
      String string1 = percentCodec1.encode("%00%00%00%00", charset0);
      assertEquals("%00%00%00%00", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = percentCodec0.encode("%00%00%00%00", (Charset) null);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PercentCodec percentCodec0 = new PercentCodec();
      percentCodec0.orNew(percentCodec0);
      char[] charArray0 = new char[10];
      charArray0[4] = ' ';
      Charset charset0 = Charset.defaultCharset();
      percentCodec0.setEncodeSpaceAsPlus(true);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      String string0 = percentCodec0.encode(charBuffer0, charset0);
      assertEquals("%00%00%00%00+%00%00%00%00%00", string0);
  }
}
