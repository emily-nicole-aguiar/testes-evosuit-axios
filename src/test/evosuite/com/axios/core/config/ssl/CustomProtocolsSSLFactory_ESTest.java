/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 05:29:32 GMT 2024
 */

package com.axios.core.config.ssl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.config.ssl.CustomProtocolsSSLFactory;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CustomProtocolsSSLFactory_ESTest extends CustomProtocolsSSLFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[0];
          CustomProtocolsSSLFactory customProtocolsSSLFactory0 = new CustomProtocolsSSLFactory(stringArray0);
          InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
          // Undeclared exception!
          try { 
            customProtocolsSSLFactory0.createSocket(inetAddress0, 2497, inetAddress0, 0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"localhost:0\" \"listen,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkListen(SecurityManager.java:1131)
             // java.net.Socket.bind(Socket.java:660)
             // sun.security.ssl.BaseSSLSocketImpl.bind(BaseSSLSocketImpl.java:124)
             // sun.security.ssl.SSLSocketImpl.bind(SSLSocketImpl.java:73)
             // sun.security.ssl.SSLSocketImpl.<init>(SSLSocketImpl.java:219)
             // sun.security.ssl.SSLSocketFactoryImpl.createSocket(SSLSocketFactoryImpl.java:169)
             // com.axios.core.config.ssl.CustomProtocolsSSLFactory.createSocket(CustomProtocolsSSLFactory.java:79)
             // sun.reflect.GeneratedMethodAccessor72.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[0];
          CustomProtocolsSSLFactory customProtocolsSSLFactory0 = new CustomProtocolsSSLFactory(stringArray0);
          InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
          InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
          // Undeclared exception!
          try { 
            customProtocolsSSLFactory0.createSocket(inetAddress0, 0, inetAddress1, 0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"localhost:0\" \"listen,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkListen(SecurityManager.java:1131)
             // java.net.Socket.bind(Socket.java:660)
             // sun.security.ssl.BaseSSLSocketImpl.bind(BaseSSLSocketImpl.java:124)
             // sun.security.ssl.SSLSocketImpl.bind(SSLSocketImpl.java:73)
             // sun.security.ssl.SSLSocketImpl.<init>(SSLSocketImpl.java:219)
             // sun.security.ssl.SSLSocketFactoryImpl.createSocket(SSLSocketFactoryImpl.java:169)
             // com.axios.core.config.ssl.CustomProtocolsSSLFactory.createSocket(CustomProtocolsSSLFactory.java:79)
             // sun.reflect.GeneratedMethodAccessor72.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CustomProtocolsSSLFactory customProtocolsSSLFactory0 = new CustomProtocolsSSLFactory((String[]) null);
          InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
          // Undeclared exception!
          try { 
            customProtocolsSSLFactory0.createSocket("", 1490, inetAddress0, 0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"localhost:0\" \"listen,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkListen(SecurityManager.java:1131)
             // java.net.Socket.bind(Socket.java:660)
             // sun.security.ssl.BaseSSLSocketImpl.bind(BaseSSLSocketImpl.java:124)
             // sun.security.ssl.SSLSocketImpl.bind(SSLSocketImpl.java:73)
             // sun.security.ssl.SSLSocketImpl.<init>(SSLSocketImpl.java:194)
             // sun.security.ssl.SSLSocketFactoryImpl.createSocket(SSLSocketFactoryImpl.java:153)
             // com.axios.core.config.ssl.CustomProtocolsSSLFactory.createSocket(CustomProtocolsSSLFactory.java:65)
             // sun.reflect.GeneratedMethodAccessor71.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CustomProtocolsSSLFactory customProtocolsSSLFactory0 = new CustomProtocolsSSLFactory(stringArray0);
      // Undeclared exception!
      try { 
        customProtocolsSSLFactory0.createSocket((Socket) null, "!R9\"", 2208, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CustomProtocolsSSLFactory customProtocolsSSLFactory0 = new CustomProtocolsSSLFactory(stringArray0);
      // Undeclared exception!
      try { 
        customProtocolsSSLFactory0.createSocket();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      CustomProtocolsSSLFactory customProtocolsSSLFactory0 = new CustomProtocolsSSLFactory(stringArray0);
      // Undeclared exception!
      try { 
        customProtocolsSSLFactory0.createSocket((InetAddress) null, (-905));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-905
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[12];
      CustomProtocolsSSLFactory customProtocolsSSLFactory0 = new CustomProtocolsSSLFactory(stringArray0);
      String[] stringArray1 = customProtocolsSSLFactory0.getDefaultCipherSuites();
      assertEquals(45, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CustomProtocolsSSLFactory customProtocolsSSLFactory0 = new CustomProtocolsSSLFactory(stringArray0);
      // Undeclared exception!
      try { 
        customProtocolsSSLFactory0.createSocket("R[DS*kX.mm &z7W", 1048);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid host wildcard specification
         //
         verifyException("java.net.SocketPermission", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CustomProtocolsSSLFactory customProtocolsSSLFactory0 = new CustomProtocolsSSLFactory(stringArray0);
      Socket socket0 = customProtocolsSSLFactory0.createSocket();
      try { 
        customProtocolsSSLFactory0.createSocket(socket0, "2v_~:S)", 0, true);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      String[] stringArray0 = new String[3];
      CustomProtocolsSSLFactory customProtocolsSSLFactory0 = new CustomProtocolsSSLFactory(stringArray0);
      // Undeclared exception!
      try { 
        customProtocolsSSLFactory0.createSocket("%l is6bl8ank !", (-3245), inetAddress0, (-3245));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-3245
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CustomProtocolsSSLFactory customProtocolsSSLFactory0 = new CustomProtocolsSSLFactory(stringArray0);
      String[] stringArray1 = customProtocolsSSLFactory0.getSupportedCipherSuites();
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[12];
      CustomProtocolsSSLFactory customProtocolsSSLFactory0 = new CustomProtocolsSSLFactory(stringArray0);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        customProtocolsSSLFactory0.createSocket(inetAddress0, (-29), inetAddress0, (-29));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-29
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
}
