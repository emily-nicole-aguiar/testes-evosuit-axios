/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:32:24 GMT 2024
 */

package com.axios.core.config.global;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.config.global.GlobalHeaders;
import com.axios.header.RequestHeader;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GlobalHeaders_ESTest extends GlobalHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.removeHeader((String) null);
      // Undeclared exception!
      try { 
        globalHeaders1.header(globalHeaders0.headers);
       //  fail("Expecting exception: ConcurrentModificationException");
       // Unstable assertion
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GlobalHeaders[] globalHeadersArray0 = GlobalHeaders.values();
      assertEquals(1, globalHeadersArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.removeHeader("");
      assertSame(globalHeaders1, globalHeaders0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      List<String> list0 = globalHeaders0.headerList(".Rt]E MefTL[T`WRv]");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("06", (List<String>) null);
      // Undeclared exception!
      try { 
        globalHeaders0.header((Map<String, List<String>>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.config.global.GlobalHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.header("", "VIA", false);
      assertSame(globalHeaders0, globalHeaders1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      String string0 = globalHeaders0.header("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      RequestHeader requestHeader0 = RequestHeader.CACHE_CONTROL;
      GlobalHeaders globalHeaders1 = globalHeaders0.header(requestHeader0, "ACCEPT_CHARSET", false);
      assertSame(globalHeaders0, globalHeaders1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      RequestHeader requestHeader0 = RequestHeader.ACCEPT_ENCODING;
      GlobalHeaders globalHeaders1 = globalHeaders0.header(requestHeader0, "");
      assertSame(globalHeaders1, globalHeaders0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put("RUWn2Kw|~", linkedList0);
      GlobalHeaders globalHeaders1 = globalHeaders0.header((Map<String, List<String>>) hashMap0);
      assertSame(globalHeaders1, globalHeaders0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      RequestHeader requestHeader0 = RequestHeader.ACCEPT_LANGUAGE;
      GlobalHeaders globalHeaders1 = globalHeaders0.removeHeader(requestHeader0);
      assertEquals(GlobalHeaders.INSTANCE, globalHeaders1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.header((String) null, (String) null, false);
      Map<String, List<String>> map0 = globalHeaders1.headers();
      //  // Unstable assertion: assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.clearHeaders();
      assertSame(globalHeaders0, globalHeaders1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.header((String) null, (String) null, true);
      String string0 = globalHeaders1.header((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.header((String) null, (String) null, true);
      RequestHeader requestHeader0 = RequestHeader.CONNECTION;
      String string0 = globalHeaders1.header(requestHeader0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.putDefault(true);
      assertSame(globalHeaders0, globalHeaders1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.header((String) null, (String) null, true);
      RequestHeader requestHeader0 = RequestHeader.CONNECTION;
      GlobalHeaders globalHeaders2 = globalHeaders1.header(requestHeader0, (String) null);
      assertEquals(GlobalHeaders.INSTANCE, globalHeaders2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.header("Authorization", "Cache-Control");
      assertSame(globalHeaders0, globalHeaders1);
  }
}
