/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 04:59:19 GMT 2024
 */

package com.axios.core.config.global;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.config.global.GlobalHeaders;
import com.axios.header.RequestHeader;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GlobalHeaders_ESTest extends GlobalHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GlobalHeaders[] globalHeadersArray0 = GlobalHeaders.values();
      assertEquals(1, globalHeadersArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      globalHeaders0.headers = (Map<String, List<String>>) hashMap0;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put("sun.net.http.allowbstrictedHeaders", linkedList0);
      List<String> list0 = globalHeaders0.headerList("sun.net.http.allowbstrictedHeaders");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      RequestHeader requestHeader0 = RequestHeader.CONNECTION;
      GlobalHeaders globalHeaders1 = globalHeaders0.header(requestHeader0, "", false);
      String string0 = globalHeaders1.header(requestHeader0);
      //  // Unstable assertion: assertEquals("ps.5pj:dyiha<&", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders.valueOf("INSTANCE");
      globalHeaders0.removeHeader("3Tth#<~0");
      String string0 = "ACCEPT_ENCODING";
      globalHeaders0.headerList(string0);
      RequestHeader requestHeader0 = RequestHeader.AUTHORIZATION;
      boolean boolean0 = false;
      globalHeaders0.header(requestHeader0, string0, boolean0);
      String string1 = "Oz>@\"~2}1s%DcB";
      // Undeclared exception!
      try { 
        GlobalHeaders.valueOf(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.axios.core.config.global.GlobalHeaders.Oz>@\"~2}1s%DcB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.removeHeader("*wX9T1A qXP?3a|+?::");
      assertEquals(GlobalHeaders.INSTANCE, globalHeaders1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Object object0 = new Object();
      RequestHeader requestHeader0 = RequestHeader.MIME_VERSION;
      GlobalHeaders globalHeaders1 = globalHeaders0.removeHeader(requestHeader0);
      RequestHeader requestHeader1 = RequestHeader.ORIGIN;
      String string0 = globalHeaders1.header(requestHeader1);
      RequestHeader requestHeader2 = RequestHeader.ACCEPT_ENCODING;
      String string1 = "0pM\"5\"lk>Far";
      globalHeaders1.header(string0, string1);
      RequestHeader requestHeader3 = RequestHeader.CONNECTION;
      GlobalHeaders globalHeaders2 = globalHeaders0.removeHeader(requestHeader3);
      String string2 = "CONNECTION";
      globalHeaders0.headers = globalHeaders2.headers;
      globalHeaders0.header(string2);
      GlobalHeaders.values();
      String string3 = "ps.5pj:dyiha<&";
      boolean boolean0 = false;
      globalHeaders0.header(requestHeader2, string3, boolean0);
      String string4 = "=9=dP=y(0?I.l";
      boolean boolean1 = false;
      GlobalHeaders globalHeaders3 = globalHeaders2.header(string1, string4, boolean1);
      globalHeaders3.header(string1);
      globalHeaders0.header(requestHeader3, string3);
      GlobalHeaders[] globalHeadersArray0 = GlobalHeaders.values();
      assertEquals(1, globalHeadersArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      RequestHeader requestHeader0 = RequestHeader.ACCEPT_CHARSET;
      GlobalHeaders globalHeaders1 = globalHeaders0.removeHeader(requestHeader0);
      assertSame(globalHeaders0, globalHeaders1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      globalHeaders0.header((String) null);
      globalHeaders0.removeHeader((String) null);
      Map<String, List<String>> map0 = (Map<String, List<String>>)globalHeaders0.headers();
      //  // Unstable assertion: assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "i(%a2&|Sq'tzGzL";
      GlobalHeaders globalHeaders1 = GlobalHeaders.INSTANCE;
      List<String> list0 = globalHeaders1.headerList("i(%a2&|Sq'tzGzL");
      hashMap0.put(string0, list0);
      // Undeclared exception!
      try { 
        globalHeaders0.header(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.config.global.GlobalHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      String string0 = "F4QFh r)(DDaC1lTZ`j";
      boolean boolean0 = false;
      GlobalHeaders globalHeaders1 = globalHeaders0.header("F4QFh r)(DDaC1lTZ`j", "F4QFh r)(DDaC1lTZ`j", false);
      GlobalHeaders globalHeaders2 = globalHeaders1.putDefault(boolean0);
      String string1 = "n";
      String string2 = "72B'R~{O{\\0]{b";
      GlobalHeaders globalHeaders3 = globalHeaders2.header(string1, string2);
      boolean boolean1 = false;
      GlobalHeaders globalHeaders4 = globalHeaders3.putDefault(boolean1);
      String string3 = "";
      globalHeaders4.header(string3, string0, boolean1);
      globalHeaders1.headers = globalHeaders0.headers;
      globalHeaders0.headerList(string0);
      String string4 = "MIME-Version";
      GlobalHeaders globalHeaders5 = globalHeaders1.removeHeader(string4);
      String string5 = "sqi}M0u5";
      globalHeaders3.headers();
      String string6 = "sun.net.http.allowRestrictedHeaders";
      GlobalHeaders globalHeaders6 = globalHeaders5.header(string5, string6);
      globalHeaders1.header(string2, string6);
      globalHeaders3.header(string1);
      RequestHeader requestHeader0 = RequestHeader.ORIGIN;
      GlobalHeaders globalHeaders7 = globalHeaders6.removeHeader(requestHeader0);
      globalHeaders5.header(requestHeader0);
      RequestHeader requestHeader1 = RequestHeader.VIA;
      globalHeaders3.header(requestHeader1);
      GlobalHeaders.values();
      RequestHeader requestHeader2 = RequestHeader.TRANSFER_ENCODING;
      globalHeaders7.header(requestHeader2);
      globalHeaders5.header(requestHeader2);
      GlobalHeaders globalHeaders8 = globalHeaders5.removeHeader(requestHeader2);
      assertSame(globalHeaders8, globalHeaders5);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      String string0 = "55(Ie~zKH";
      boolean boolean0 = false;
      GlobalHeaders globalHeaders1 = globalHeaders0.header("55(Ie~zKH", "55(Ie~zKH", false);
      String string1 = "";
      globalHeaders1.header(string0, string1, boolean0);
      String string2 = "CX=$";
      globalHeaders1.headerList(string2);
      globalHeaders1.putDefault(boolean0);
      globalHeaders1.headers();
      globalHeaders1.headerList(string0);
      RequestHeader requestHeader0 = RequestHeader.PRAGMA;
      GlobalHeaders globalHeaders2 = globalHeaders0.header(requestHeader0, string0);
      String string3 = "$VALUES";
      globalHeaders2.headerList(string3);
      globalHeaders2.header(requestHeader0);
      // Undeclared exception!
      try { 
        globalHeaders0.header(globalHeaders2.headers);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      String string0 = "o?>T";
      GlobalHeaders globalHeaders1 = globalHeaders0.header("o?>T", "o?>T");
      globalHeaders1.header(string0);
      globalHeaders1.headers();
      boolean boolean0 = false;
      GlobalHeaders globalHeaders2 = globalHeaders0.putDefault(boolean0);
      assertSame(globalHeaders0, globalHeaders2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      RequestHeader requestHeader0 = RequestHeader.MIME_VERSION;
      GlobalHeaders globalHeaders1 = globalHeaders0.header(requestHeader0, "Y&g$Z.cs.>NVgO");
      String string0 = "Pragma";
      globalHeaders1.header(string0);
      RequestHeader requestHeader1 = RequestHeader.SET_COOKIE;
      String string1 = "\\)TO>KJh8O";
      boolean boolean0 = false;
      GlobalHeaders globalHeaders2 = globalHeaders1.header(requestHeader1, string1, boolean0);
      assertEquals(GlobalHeaders.INSTANCE, globalHeaders2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.clearHeaders();
      RequestHeader requestHeader0 = RequestHeader.UPGRADE;
      String string0 = "DATE";
      boolean boolean0 = true;
      GlobalHeaders globalHeaders2 = globalHeaders1.header(requestHeader0, string0, boolean0);
      assertSame(globalHeaders1, globalHeaders2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.putDefault(false);
      String string0 = "2PfPq0.g4tm";
      boolean boolean0 = true;
      GlobalHeaders globalHeaders2 = globalHeaders1.header(string0, string0, boolean0);
      assertSame(globalHeaders0, globalHeaders2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.header("", (String) null, false);
      GlobalHeaders globalHeaders2 = globalHeaders1.clearHeaders();
      assertSame(globalHeaders0, globalHeaders2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.header((String) null, (String) null, false);
      assertSame(globalHeaders0, globalHeaders1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.putDefault(false);
      String string0 = "";
      List<String> list0 = globalHeaders1.headerList(string0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      String string0 = "RQ[#0OwZ;c3<\"u%#";
      GlobalHeaders globalHeaders1 = globalHeaders0.header("RQ[#0OwZ;c3<\"u%#", "");
      String string1 = globalHeaders1.header(string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      hashMap0.put((String) null, linkedList0);
      hashMap0.put("", linkedList0);
      GlobalHeaders globalHeaders1 = globalHeaders0.header(hashMap0);
      RequestHeader requestHeader0 = RequestHeader.ACCEPT_CHARSET;
      globalHeaders1.header(requestHeader0);
      globalHeaders0.headers();
      GlobalHeaders[] globalHeadersArray0 = GlobalHeaders.values();
      assertEquals(1, globalHeadersArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.header((Map<String, List<String>>) null);
      assertEquals(GlobalHeaders.INSTANCE, globalHeaders1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put("", linkedList0);
      GlobalHeaders globalHeaders1 = globalHeaders0.header(hashMap0);
      RequestHeader requestHeader0 = RequestHeader.ACCEPT_CHARSET;
      String string0 = globalHeaders1.header(requestHeader0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      String string0 = globalHeaders0.header((RequestHeader) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GlobalHeaders globalHeaders0 = GlobalHeaders.INSTANCE;
      GlobalHeaders globalHeaders1 = globalHeaders0.putDefault(false);
      boolean boolean0 = true;
      GlobalHeaders globalHeaders2 = globalHeaders1.putDefault(boolean0);
      assertSame(globalHeaders2, globalHeaders0);
  }
}
