/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:35:24 GMT 2024
 */

package com.axios.core.http.url;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.http.url.UrlBuilder;
import com.axios.core.http.url.UrlPath;
import com.axios.core.http.url.UrlQuery;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UrlBuilder_ESTest extends UrlBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("Uv4t5Bn0ar-Sz.r``s", charset0, true, true);
      UrlBuilder urlBuilder0 = new UrlBuilder("", "", 0, urlPath0, urlQuery0, "", charset0);
      URL uRL0 = urlBuilder0.toURL((URLStreamHandler) null);
      assertEquals("http://:0/?Uv4t5Bn0ar-Sz.r%60%60s", uRL0.toExternalForm());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      URL uRL0 = urlBuilder0.toURL((URLStreamHandler) null);
      assertEquals("http:/", uRL0.toString());
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      UrlBuilder urlBuilder1 = urlBuilder0.setHost("");
      assertEquals((-1), urlBuilder1.getPort());
      
      urlBuilder0.setPort(0);
      urlBuilder0.toURL();
      assertEquals(0, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("}");
      UrlBuilder urlBuilder1 = urlBuilder0.setPort(66);
      URL uRL0 = urlBuilder1.toURL();
      assertEquals(66, urlBuilder0.getPort());
      assertEquals("http://}:66/", uRL0.toExternalForm());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      URL uRL0 = urlBuilder0.toURL();
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("http:/", uRL0.toExternalForm());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("#");
      assertEquals("", urlBuilder0.getHost());
      
      UrlBuilder urlBuilder1 = urlBuilder0.setHost((String) null);
      URI uRI0 = urlBuilder1.toURI();
      assertEquals("http:?#", uRI0.toString());
      assertEquals("http", urlBuilder1.getScheme());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("", charset0, false);
      UrlBuilder urlBuilder0 = new UrlBuilder("/", "!;hJlKYF/I7|uv; (d", 4, urlPath0, urlQuery0, ":jV9 TE;,|", charset0);
      URI uRI0 = urlBuilder0.toURI();
      assertEquals("/://!;hJlKYF%2FI7%7Cuv;%20(d:4?#:jV9%2520TE;,%257C", uRI0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UrlQuery urlQuery0 = new UrlQuery(hashMap0);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = new UrlBuilder("%sf_3J=?OyL~", "%sf_3J=?OyL~", 125, (UrlPath) null, urlQuery0, "EmC2", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.setScheme("");
      assertEquals("EmC2", urlBuilder1.getFragment());
      assertEquals(125, urlBuilder1.getPort());
      assertEquals("%sf_3J=?OyL~", urlBuilder1.getHost());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("]#:tV41ZWJWRoB\"-k");
      urlBuilder0.setPort(2);
      UrlQuery urlQuery0 = UrlQuery.of("1U", (Charset) null);
      urlBuilder0.setQuery(urlQuery0);
      assertEquals(2, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("}");
      UrlQuery urlQuery0 = new UrlQuery();
      UrlBuilder urlBuilder1 = urlBuilder0.setQuery(urlQuery0);
      assertEquals((-1), urlBuilder1.getPort());
      assertEquals("}", urlBuilder1.getHost());
      assertEquals("http", urlBuilder1.getScheme());
      assertEquals("", urlBuilder1.getFragment());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      assertEquals((-1), urlBuilder0.getPort());
      
      urlBuilder0.setPort(0);
      urlBuilder0.setScheme("");
      assertEquals(0, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRL0, (Charset) null);
      urlBuilder0.setPort((-3032));
      assertEquals((-3032), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "dbaSd&k)'", 0, ".b{E9`13a:g.", "", "", charset0);
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      UrlPath urlPath0 = UrlPath.of(charBuffer0, charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.setPath(urlPath0);
      assertEquals("", urlBuilder1.getFragment());
      assertEquals("", urlBuilder1.getScheme());
      assertEquals(0, urlBuilder1.getPort());
      assertEquals("dbaSd&k)'", urlBuilder1.getHost());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of("", charset0);
      UrlQuery urlQuery0 = new UrlQuery(false);
      UrlBuilder urlBuilder0 = UrlBuilder.of("Fr", "", 0, urlPath0, urlQuery0, "Xfq>=)7kF*GZ", charset0);
      assertEquals("", urlBuilder0.getHost());
      
      urlBuilder0.setHost("}RK");
      assertEquals(0, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(":,in", "lY<", 98, "m:e$B#@I8n}", "qRqE;", ":,in", charset0);
      assertEquals("lY<", urlBuilder0.getHost());
      
      urlBuilder0.setHost("S%LC`M0*^eN[Ai5V");
      assertEquals(":,in", urlBuilder0.getFragment());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("nt}S(-9-XSA2kKvn");
      UrlBuilder urlBuilder1 = urlBuilder0.setPort(58);
      urlBuilder1.setFragment("nt}S(-9-XSA2kKvn");
      assertEquals(58, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of((String) null, (String) null, 1, (String) null, "! o\"I+", "x&g#Y", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.setCharset(charset0);
      assertEquals("x&g#Y", urlBuilder1.getFragment());
      assertEquals(1, urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("}");
      UrlBuilder urlBuilder1 = urlBuilder0.setCharset((Charset) null);
      assertEquals("}", urlBuilder1.getHost());
      assertEquals("http", urlBuilder1.getScheme());
      assertEquals("", urlBuilder1.getFragment());
      assertEquals((-1), urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("http://http:0/?com.axios.core.map.TableMap=java.lang.String@0000000005#com.axios.core.map.TableMap");
      assertEquals(0, urlBuilder0.getPort());
      assertEquals("http", urlBuilder0.getHost());
      assertEquals("com.axios.core.map.TableMap", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("htt[:99");
      assertEquals("htt[", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals(99, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("http://http:0/?com.axios.core.map.TableMap=java.lang.String@0000000005#com.axios.core.map.TableMap", charset0);
      assertEquals(0, urlBuilder0.getPort());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals("com.axios.core.map.TableMap", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("http://:41/?rE,+xVt:dAcsDSJ#[.", charset0);
      assertEquals("", urlBuilder0.getHost());
      assertEquals(41, urlBuilder0.getPort());
      assertEquals("[.", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("http://http:0/?2%7C(iB=java.lang.String@0000000005#com.axios.core.map.TableMap");
      assertEquals("com.axios.core.map.TableMap", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getHost());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals(0, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("|tp:1/");
      assertEquals(1, urlBuilder0.getPort());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("|tp", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("bv", "", 0, "?f[g',?Yszh7[", uRLStreamHandler0);
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRL0, (Charset) null);
      assertEquals("bv", urlBuilder0.getScheme());
      assertEquals(0, urlBuilder0.getPort());
      assertEquals("", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getFragment());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "http://", 1092, "$}h:f[bOx \"Hn", uRLStreamHandler0);
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRL0, charset0);
      assertEquals("[http://]", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals(1092, urlBuilder0.getPort());
      assertEquals("", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("}");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = urlBuilder0.toURL(uRLStreamHandler0);
      UrlBuilder urlBuilder1 = UrlBuilder.of(uRL0, (Charset) null);
      assertEquals("}", uRL0.getAuthority());
      assertEquals("http", urlBuilder1.getScheme());
      assertEquals("", urlBuilder1.getFragment());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UrlQuery urlQuery0 = new UrlQuery(false);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "http", 0, (UrlPath) null, urlQuery0, "com.axios.core.map.TableMap", charset0);
      URI uRI0 = urlBuilder0.toURI();
      UrlBuilder urlBuilder1 = UrlBuilder.of(uRI0, charset0);
      assertEquals("http://http:0/?#com.axios.core.map.TableMap", uRI0.toString());
      assertEquals(0, urlBuilder1.getPort());
      assertEquals("http", urlBuilder1.getScheme());
      assertEquals("http", urlBuilder1.getHost());
      assertEquals("com.axios.core.map.TableMap", urlBuilder1.getFragment());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      urlBuilder0.setPort(2201);
      URI uRI0 = urlBuilder0.toURI();
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder.of(uRI0, charset0);
      assertEquals(2201, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("http://http:0/?http=java.lang.String@0000000005", charset0);
      assertEquals("http", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals(0, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("http://", charset0);
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals("", urlBuilder0.getHost());
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.of("http://http:0/?2%7C(iB=java.lang.String@0000000005#com.axios.core.map.TableMap");
      assertEquals(0, urlBuilder0.getPort());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals("com.axios.core.map.TableMap", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.of("http://");
      assertEquals("", urlBuilder0.getHost());
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      urlBuilder0.getScheme();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("nt}S(-9-XSA2kKvn");
      String string0 = urlBuilder0.getScheme();
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("http", string0);
      assertEquals("nt}S(-9-XSA2kKvn", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getFragment());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("]#:tV41ZWJWRoB\"-k");
      UrlBuilder urlBuilder1 = urlBuilder0.addQuery("http://[]#:tV41ZWJWRoB\"-k]/#]#:tV41ZWJWRoB\"-k", ");}2LgH^zA 6zf@P");
      urlBuilder1.getQueryStr();
      assertEquals((-1), urlBuilder1.getPort());
      assertEquals("]", urlBuilder1.getHost());
      assertEquals("http", urlBuilder1.getScheme());
      assertEquals(":tV41ZWJWRoB\"-k", urlBuilder1.getFragment());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlQuery urlQuery0 = UrlQuery.of("AY`i]&", (Charset) null, false);
      UrlBuilder urlBuilder0 = new UrlBuilder("", "AY`i]&", 2, urlPath0, urlQuery0, "", (Charset) null);
      urlBuilder0.getQuery();
      assertEquals(2, urlBuilder0.getPort());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("AY`i]&", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of("#", charset0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UrlQuery urlQuery0 = UrlQuery.of((Map<? extends CharSequence, ?>) hashMap0, true);
      UrlBuilder urlBuilder0 = new UrlBuilder("#", "rRT<fkTt/~", 0, urlPath0, urlQuery0, "rRT<fkTt/~", charset0);
      int int0 = urlBuilder0.getPort();
      assertEquals(0, int0);
      assertEquals("rRT<fkTt/~", urlBuilder0.getHost());
      assertEquals("rRT<fkTt/~", urlBuilder0.getFragment());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UrlPath urlPath0 = UrlPath.of("", (Charset) null);
      UrlQuery urlQuery0 = UrlQuery.of("", (Charset) null);
      UrlBuilder urlBuilder0 = new UrlBuilder("", "", 35, urlPath0, urlQuery0, "", (Charset) null);
      int int0 = urlBuilder0.getPort();
      assertEquals(35, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(":,in", "lY<", 98, "m:e$B#@I8n}", "qRqE;", ":,in", charset0);
      UrlPath urlPath0 = new UrlPath();
      urlBuilder0.setPath(urlPath0);
      urlBuilder0.getPathStr();
      assertEquals(98, urlBuilder0.getPort());
      assertEquals("lY<", urlBuilder0.getHost());
      assertEquals(":,in", urlBuilder0.getFragment());
      assertEquals(":,in", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("nt}S(-9-XSA2kKvn");
      urlBuilder0.getPath();
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("nt}S(-9-XSA2kKvn", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("Uv4t5Bn0ar-Sz.r``s", charset0, true, true);
      UrlBuilder urlBuilder0 = new UrlBuilder("", "", 0, urlPath0, urlQuery0, "", charset0);
      urlBuilder0.getHost();
      assertEquals(0, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      urlBuilder0.getFragmentEncoded();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("EXv~Fqd EuLws.'~");
      String string0 = urlBuilder0.getFragmentEncoded();
      assertEquals("", string0);
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("EXv~Fqd EuLws.'~", urlBuilder0.getHost());
      assertEquals("http", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      urlBuilder0.getFragment();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("nt}S(-9-XSA2kKvn");
      assertEquals("", urlBuilder0.getFragment());
      
      urlBuilder0.setFragment("nt}S(-9-XSA2kKvn");
      urlBuilder0.getFragment();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("com.axios.core.tool.http.HttpTool");
      urlBuilder0.getCharset();
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("com.axios.core.tool.http.HttpTool", urlBuilder0.getHost());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals("", urlBuilder0.getFragment());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      String string0 = urlBuilder0.getAuthority();
      assertNull(string0);
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("Vd+'&Kh471og#1ym", "com.axios.core.http.url.UrlPath", (-1777), "Vd+'&Kh471og#1ym", "K0[", "K0[", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.addQuery("Vd+'&Kh471og#1ym", "com.axios.core.http.url.UrlPath");
      assertEquals((-1777), urlBuilder1.getPort());
      assertEquals("Vd+'&Kh471og#1ym", urlBuilder1.getScheme());
      assertEquals("com.axios.core.http.url.UrlPath", urlBuilder1.getHost());
      assertEquals("K0[", urlBuilder1.getFragment());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UrlQuery urlQuery0 = new UrlQuery(false);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "http", 0, (UrlPath) null, urlQuery0, "com.axios.core.map.TableMap", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.addPath("com.axios.core.map.TableMap");
      assertEquals("com.axios.core.map.TableMap", urlBuilder1.getFragment());
      assertEquals("http", urlBuilder1.getHost());
      assertEquals(0, urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlQuery urlQuery0 = new UrlQuery(false);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "RR:LW/A{1A#$", 6084, urlPath0, urlQuery0, "/?", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.addPath("RR:LW/A{1A#$");
      assertEquals("/?", urlBuilder1.getFragment());
      assertEquals(6084, urlBuilder1.getPort());
      assertEquals("RR:LW/A{1A#$", urlBuilder1.getHost());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of("", charset0);
      UrlQuery urlQuery0 = new UrlQuery();
      UrlBuilder urlBuilder0 = UrlBuilder.of(" gcO8F", "", (-1), urlPath0, urlQuery0, "Jq;;'{T:1Qs", charset0);
      // Undeclared exception!
      try { 
        urlBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        UrlBuilder.ofHttp("e6$T~f%X1:t", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        UrlBuilder.ofHttp((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlBuilder.ofHttp(":[pf.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlBuilder.ofHttp("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        UrlBuilder.of((URI) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        UrlBuilder.of("mh|Ga~", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlBuilder.of("K)!y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      urlBuilder0.setScheme("http:/");
      // Undeclared exception!
      try { 
        urlBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("_.-~", "", 817, (String) null, (String) null, "com.axios.core.http.url.UrlQuery", charset0);
      // Undeclared exception!
      try { 
        urlBuilder0.addPath((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.url.UrlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(158);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      char[] charArray0 = new char[5];
      charBuffer0.get(charArray0);
      // Undeclared exception!
      try { 
        urlBuilder0.addPath(charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlQuery urlQuery0 = new UrlQuery(false);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "RR:LW/A{1A#$", 6084, urlPath0, urlQuery0, "/?", charset0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = urlBuilder0.toURL(uRLStreamHandler0);
      assertEquals("[RR:LW/A{1A#$]:6084", uRL0.getAuthority());
      assertEquals("/?", urlBuilder0.getFragment());
      assertEquals("RR:LW/A{1A#$", urlBuilder0.getHost());
      assertNotNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "", (-992), "", "", (String) null, charset0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = urlBuilder0.toURL(uRLStreamHandler0);
      assertNull(uRL0);
      assertEquals((-992), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      UrlBuilder urlBuilder1 = urlBuilder0.setFragment("");
      assertEquals((-1), urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of((String) null, (String) null, 0, "", (String) null, "", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.setFragment("$dWV!+Qs1.-N!Wmlm");
      assertEquals(0, urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      urlBuilder0.getQueryStr();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlQuery urlQuery0 = new UrlQuery(false);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "RR:LW/A{1A#$", 6084, urlPath0, urlQuery0, "/?", charset0);
      String string0 = urlBuilder0.getQueryStr();
      assertEquals("RR:LW/A{1A#$", urlBuilder0.getHost());
      assertEquals("/?", urlBuilder0.getFragment());
      assertNotNull(string0);
      assertEquals(6084, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UrlQuery urlQuery0 = new UrlQuery(hashMap0);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = new UrlBuilder("%sf_3J=?OyL~", "%sf_3J=?OyL~", 125, (UrlPath) null, urlQuery0, "EmC2", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.addPathSegment("EmC2");
      UrlBuilder urlBuilder2 = urlBuilder1.addPathSegment("EmC2");
      assertEquals("EmC2", urlBuilder2.getFragment());
      assertEquals(125, urlBuilder2.getPort());
      assertEquals("%sf_3J=?OyL~", urlBuilder2.getHost());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("q7e!Yhb$|or'h", charset0);
      UrlBuilder urlBuilder0 = new UrlBuilder("", "q7e!Yhb$|or'h", 0, (UrlPath) null, urlQuery0, "#", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.addPathSegment("");
      assertEquals("", urlBuilder1.getFragment());
      assertEquals("q7e!Yhb$|or'h", urlBuilder1.getHost());
      assertEquals(0, urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(":,in", "lY<", 98, "m:e$B#@I8n}", "qRqE;", ":,in", charset0);
      String string0 = urlBuilder0.getPathStr();
      assertEquals(":,in", urlBuilder0.getFragment());
      assertEquals("lY<", urlBuilder0.getHost());
      assertEquals(98, urlBuilder0.getPort());
      assertEquals(":,in", urlBuilder0.getScheme());
      assertEquals("/m%3Ae$B%23@I8n%7D", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      String string0 = urlBuilder0.getPathStr();
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UrlQuery urlQuery0 = new UrlQuery(hashMap0);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = new UrlBuilder("%sf_3J=?OyL~", "%sf_3J=?OyL~", 125, (UrlPath) null, urlQuery0, "EmC2", charset0);
      String string0 = urlBuilder0.getAuthority();
      assertEquals("%sf_3J=?OyL~:125", string0);
      assertEquals("EmC2", urlBuilder0.getFragment());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of("", charset0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UrlQuery urlQuery0 = new UrlQuery(hashMap0, false);
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "", (-1696), urlPath0, urlQuery0, "", charset0);
      String string0 = urlBuilder0.getAuthority();
      assertEquals("", string0);
      assertEquals((-1696), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("}3U^I", charset0);
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("}3U^I", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "dbaSd&k)'", 0, ".b{E9`13a:g.", "", "", charset0);
      String string0 = urlBuilder0.getHost();
      assertEquals("", urlBuilder0.getScheme());
      assertEquals("dbaSd&k)'", string0);
      assertEquals("", urlBuilder0.getFragment());
      assertEquals(0, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        UrlBuilder.of((URL) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        UrlBuilder.of((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      // Undeclared exception!
      try { 
        urlBuilder0.addQuery("http", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlQuery urlQuery0 = new UrlQuery(false);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "RR:LW/A{1A#$", 6084, urlPath0, urlQuery0, "/?", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.addQuery("", "");
      assertEquals("/?", urlBuilder1.getFragment());
      assertEquals("RR:LW/A{1A#$", urlBuilder1.getHost());
      assertEquals(6084, urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      UrlQuery urlQuery0 = new UrlQuery();
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "htnp", 0, (UrlPath) null, urlQuery0, "", charset0);
      urlBuilder0.addQuery("htnp", "htnp");
      urlBuilder0.build();
      assertEquals(0, urlBuilder0.getPort());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("htnp", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      UrlBuilder urlBuilder1 = urlBuilder0.addPathSegment(charBuffer0);
      assertEquals((-1), urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlBuilder.ofHttpWithoutEncode("://");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("]#:tV41ZWJWRoB\"-k");
      urlBuilder0.setPort(37);
      urlBuilder0.toURI();
      assertEquals(37, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, charset0);
      urlBuilder0.getFragment();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      urlBuilder0.getQuery();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("]#:tV41ZWJWRoB\"-k");
      UrlBuilder urlBuilder1 = urlBuilder0.addPath("http://[]#:tV41ZWJWRoB\"-k]/#:tV41ZWJWRoB\"-k");
      assertEquals((-1), urlBuilder1.getPort());
      assertEquals(":tV41ZWJWRoB\"-k", urlBuilder1.getFragment());
      assertEquals("]", urlBuilder1.getHost());
      assertEquals("http", urlBuilder1.getScheme());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("]#:tV41ZWJWRoB\"-k");
      String string0 = urlBuilder0.toString();
      assertEquals("http://]/#:tV41ZWJWRoB\"-k", string0);
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      UrlQuery urlQuery0 = new UrlQuery();
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "htnp", 0, (UrlPath) null, urlQuery0, "", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.setQuery(urlQuery0);
      assertEquals("", urlBuilder1.getFragment());
      assertEquals("htnp", urlBuilder1.getHost());
      assertEquals(0, urlBuilder1.getPort());
      assertEquals("", urlBuilder1.getScheme());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      urlBuilder0.getPath();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlQuery urlQuery0 = new UrlQuery(false);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "RR:LW/A{1A#$", 6084, urlPath0, urlQuery0, "/?", charset0);
      urlBuilder0.toURL();
      assertEquals("/?", urlBuilder0.getFragment());
      assertEquals("RR:LW/A{1A#$", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getScheme());
      assertEquals(6084, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlQuery urlQuery0 = new UrlQuery(false);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "RR:LW/A{1A#$", 6084, urlPath0, urlQuery0, "/?", charset0);
      String string0 = urlBuilder0.getScheme();
      assertEquals("/?", urlBuilder0.getFragment());
      assertEquals("", string0);
      assertEquals("RR:LW/A{1A#$", urlBuilder0.getHost());
      assertEquals(6084, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      URI uRI0 = MockURI.URI("");
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, charset0);
      String string0 = urlBuilder0.getHost();
      assertEquals((-1), urlBuilder0.getPort());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      UrlQuery urlQuery0 = new UrlQuery();
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "htnp", 0, (UrlPath) null, urlQuery0, "", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.setCharset(charset0);
      assertEquals("", urlBuilder1.getScheme());
      assertEquals("htnp", urlBuilder1.getHost());
      assertEquals(0, urlBuilder1.getPort());
      assertEquals("", urlBuilder1.getFragment());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      int int0 = urlBuilder0.getPort();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlQuery urlQuery0 = new UrlQuery(false);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "RR:LW/A{1A#$", 6084, urlPath0, urlQuery0, "/?", charset0);
      String string0 = urlBuilder0.getFragmentEncoded();
      assertEquals(6084, urlBuilder0.getPort());
      assertEquals("RR:LW/A{1A#$", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getScheme());
      assertEquals("/?", string0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlBuilder.ofHttpWithoutEncode("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      String string0 = urlBuilder0.getSchemeWithDefault();
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("http", string0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of(charBuffer0, charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.setPath(urlPath0);
      assertEquals((-1), urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlBuilder.of("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }
}
