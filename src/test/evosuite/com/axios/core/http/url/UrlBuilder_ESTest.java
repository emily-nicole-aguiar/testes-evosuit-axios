/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 05:02:26 GMT 2024
 */

package com.axios.core.http.url;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.http.url.UrlBuilder;
import com.axios.core.http.url.UrlPath;
import com.axios.core.http.url.UrlQuery;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UrlBuilder_ESTest extends UrlBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, charset0);
      URL uRL0 = urlBuilder0.toURL((URLStreamHandler) null);
      assertEquals("http://foo.bar/", uRL0.toExternalForm());
      assertEquals("http", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, charset0);
      assertEquals("http", urlBuilder0.getScheme());
      
      UrlBuilder urlBuilder1 = urlBuilder0.setScheme("-:6~)4");
      urlBuilder1.toURL();
      assertEquals("", urlBuilder0.getFragment());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      assertEquals((-1), urlBuilder0.getPort());
      
      urlBuilder0.setPort(0);
      UrlBuilder urlBuilder1 = urlBuilder0.setHost("%<[R@erCk#6");
      urlBuilder1.toURL();
      assertEquals(0, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode(":");
      URL uRL0 = urlBuilder0.toURL();
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals("http:/", uRL0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      UrlPath urlPath0 = new UrlPath();
      UrlBuilder urlBuilder1 = urlBuilder0.setPath(urlPath0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      UrlQuery urlQuery0 = UrlQuery.of((Map<? extends CharSequence, ?>) hashMap0);
      UrlBuilder urlBuilder2 = urlBuilder1.setQuery(urlQuery0);
      URI uRI0 = urlBuilder2.toURI();
      assertEquals((-1), urlBuilder2.getPort());
      assertEquals("http:?", uRI0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of((String) null, (String) null, 0, (String) null, (String) null, (String) null, charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.setScheme("x:`t");
      assertEquals(0, urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("utf8", "utf8", 63, "utf8", "utf8", "utf8", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.setScheme("utf8");
      assertEquals(63, urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("fu#_4m==");
      assertEquals((-1), urlBuilder0.getPort());
      
      urlBuilder0.setPort(0);
      UrlQuery urlQuery0 = UrlQuery.of("fu#_4m==", (Charset) null, true, true);
      UrlBuilder urlBuilder1 = urlBuilder0.setQuery(urlQuery0);
      assertEquals(0, urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      urlBuilder0.setPort((-2092));
      assertEquals((-2092), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      assertEquals((-1), urlBuilder0.getPort());
      
      UrlBuilder urlBuilder1 = urlBuilder0.setPort(0);
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of(charBuffer0, charset0);
      urlBuilder1.setPath(urlPath0);
      assertEquals(0, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("Vd+'&Kh471og#1ym", "com.axios.core.http.url.UrlPath", (-1777), "Vd+'&Kh471og#1ym", "K0[", "K0[", charset0);
      UrlPath urlPath0 = new UrlPath();
      UrlBuilder urlBuilder1 = urlBuilder0.setPath(urlPath0);
      assertEquals((-1777), urlBuilder1.getPort());
      assertEquals("K0[", urlBuilder1.getFragment());
      assertEquals("com.axios.core.http.url.UrlPath", urlBuilder1.getHost());
      assertEquals("Vd+'&Kh471og#1ym", urlBuilder1.getScheme());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("_r.Tv Su'}1kuS8a", "_r.Tv Su'}1kuS8a", 592, "_r.Tv Su'}1kuS8a", "com.axios.core.rfc.PercentCodec", "com.axios.core.rfc.PercentCodec", charset0);
      assertEquals("_r.Tv Su'}1kuS8a", urlBuilder0.getHost());
      
      urlBuilder0.setHost("w#;OLKw");
      assertEquals("_r.Tv Su'}1kuS8a", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("nt}S(-9-XSA2kKvn");
      UrlBuilder urlBuilder1 = urlBuilder0.setPort(58);
      urlBuilder1.setFragment("nt}S(-9-XSA2kKvn");
      assertEquals(58, urlBuilder0.getPort());
      assertEquals("nt}S(-9-XSA2kKvn", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      UrlQuery urlQuery0 = new UrlQuery(false);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "http", 0, (UrlPath) null, urlQuery0, "", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.setCharset(charset0);
      assertEquals(0, urlBuilder1.getPort());
      assertEquals("http", urlBuilder1.getHost());
      assertEquals("", urlBuilder1.getFragment());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      URI uRI0 = MockURI.URI("/");
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.setCharset(charset0);
      assertEquals("", urlBuilder1.getFragment());
      assertEquals((-1), urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("http://http:0/?com.axios.core.map.TableMap=java.lang.String@0000000005#com.axios.core.map.TableMap");
      assertEquals("com.axios.core.map.TableMap", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals(0, urlBuilder0.getPort());
      assertEquals("http", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("htt[:99");
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("htt[", urlBuilder0.getHost());
      assertEquals(99, urlBuilder0.getPort());
      assertEquals("http", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("http://http:0/?com.axios.core.map.TableMap=java.lang.String@0000000005#com.axios.core.map.TableMap", charset0);
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals(0, urlBuilder0.getPort());
      assertEquals("com.axios.core.map.TableMap", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("http://http:0/?2%7C(iB=java.lang.String@0000000005#com.axios.core.map.TableMap");
      assertEquals("com.axios.core.map.TableMap", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getHost());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals(0, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      UrlQuery urlQuery0 = new UrlQuery(false);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "http", 0, (UrlPath) null, urlQuery0, "com.axios.core.map.TableMap", charset0);
      URI uRI0 = urlBuilder0.toURI();
      UrlBuilder urlBuilder1 = UrlBuilder.of(uRI0, charset0);
      assertEquals("http://http:0/?#com.axios.core.map.TableMap", uRI0.toString());
      assertEquals("http", urlBuilder1.getScheme());
      assertEquals(0, urlBuilder1.getPort());
      assertEquals("http", urlBuilder1.getHost());
      assertEquals("com.axios.core.map.TableMap", urlBuilder1.getFragment());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("http://http:0/?http=java.lang.String@0000000005", charset0);
      assertEquals("", urlBuilder0.getFragment());
      assertEquals(0, urlBuilder0.getPort());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals("http", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("http://", charset0);
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("", urlBuilder0.getHost());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = new UrlPath();
      UrlQuery urlQuery0 = UrlQuery.of("http://", charset0, false, true);
      UrlBuilder urlBuilder0 = UrlBuilder.of("R{8-rW1", ", values=", 35, urlPath0, urlQuery0, "http", charset0);
      URI uRI0 = urlBuilder0.toURI();
      assertNull(uRI0);
      assertEquals("http", urlBuilder0.getFragment());
      assertEquals(35, urlBuilder0.getPort());
      assertEquals(", values=", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "GRE^JR`B|6CGK%G/", (-111), urlPath0, (UrlQuery) null, "", charset0);
      assertEquals((-111), urlBuilder0.getPort());
      assertEquals("GRE^JR`B|6CGK%G/", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getFragment());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.of("http://http:0/?2%7C(iB=java.lang.String@0000000005#com.axios.core.map.TableMap");
      assertEquals("http", urlBuilder0.getHost());
      assertEquals("com.axios.core.map.TableMap", urlBuilder0.getFragment());
      assertEquals(0, urlBuilder0.getPort());
      assertEquals("http", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.of("http://:41/");
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals("", urlBuilder0.getHost());
      assertEquals(41, urlBuilder0.getPort());
      assertEquals("", urlBuilder0.getFragment());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.of("http://");
      assertEquals("", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, charset0);
      String string0 = urlBuilder0.getScheme();
      assertEquals("http", string0);
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("foo.bar", urlBuilder0.getHost());
      assertNotNull(string0);
      assertEquals("", urlBuilder0.getFragment());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      UrlPath urlPath0 = UrlPath.of("", (Charset) null);
      UrlQuery urlQuery0 = UrlQuery.of("", (Charset) null);
      UrlBuilder urlBuilder0 = new UrlBuilder("", "", 35, urlPath0, urlQuery0, "", (Charset) null);
      urlBuilder0.getScheme();
      assertEquals(35, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of((CharSequence) null, charset0);
      UrlQuery urlQuery0 = UrlQuery.of("#=Own\u0002Qyx", charset0);
      UrlBuilder urlBuilder0 = UrlBuilder.of((String) null, (String) null, 0, urlPath0, urlQuery0, (String) null, charset0);
      urlBuilder0.getQueryStr();
      assertEquals(0, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("_r.Tv Su'}1kuS8a", "_r.Tv Su'}1kuS8a", 592, "_r.Tv Su'}1kuS8a", "com.axios.core.rfc.PercentCodec", "com.axios.core.rfc.PercentCodec", charset0);
      urlBuilder0.getQuery();
      assertEquals(592, urlBuilder0.getPort());
      assertEquals("_r.Tv Su'}1kuS8a", urlBuilder0.getScheme());
      assertEquals("com.axios.core.rfc.PercentCodec", urlBuilder0.getFragment());
      assertEquals("_r.Tv Su'}1kuS8a", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of(",", charset0);
      UrlQuery urlQuery0 = UrlQuery.of(".z", charset0, false, false);
      UrlBuilder urlBuilder0 = new UrlBuilder(",", ",", 0, urlPath0, urlQuery0, "#", charset0);
      int int0 = urlBuilder0.getPort();
      assertEquals(0, int0);
      assertEquals(",", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals(",", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      int int0 = urlBuilder0.getPort();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      urlBuilder0.getPath();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, charset0);
      String string0 = urlBuilder0.getHost();
      assertNotNull(string0);
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("foo.bar", string0);
      assertEquals("ftp", urlBuilder0.getScheme());
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp(":", (Charset) null);
      String string0 = urlBuilder0.getHost();
      assertNotNull(string0);
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      urlBuilder0.getFragmentEncoded();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      URI uRI0 = MockURI.URI("com.axios.core.http.url.UrlPath", "com.axios.core.http.url.UrlPath", "com.axios.core.http.url.UrlPath");
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, (Charset) null);
      String string0 = urlBuilder0.getFragmentEncoded();
      assertEquals("com.axios.core.http.url.UrlPath", string0);
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("nt}S(-9-XSA2kKvn");
      assertEquals("", urlBuilder0.getFragment());
      
      urlBuilder0.setFragment("nt}S(-9-XSA2kKvn");
      urlBuilder0.getFragment();
      assertEquals("nt}S(-9-XSA2kKvn", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, charset0);
      String string0 = urlBuilder0.getFragment();
      assertEquals("foo.bar", urlBuilder0.getHost());
      assertEquals("ftp", urlBuilder0.getScheme());
      assertEquals("", string0);
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.forName("GBK");
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRL0, charset0);
      urlBuilder0.getCharset();
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals("www.someFakeButWellFormedURL.org", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getFragment());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      String string0 = urlBuilder0.getAuthority();
      assertNull(string0);
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp(":", (Charset) null);
      String string0 = urlBuilder0.getAuthority();
      assertNotNull(string0);
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, charset0);
      String string0 = urlBuilder0.build();
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("http://foo.bar/", string0);
      assertEquals("http", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of((CharSequence) null, charset0);
      UrlQuery urlQuery0 = UrlQuery.of("#=Own\u0002Qyx", charset0);
      UrlBuilder urlBuilder0 = UrlBuilder.of((String) null, (String) null, 0, urlPath0, urlQuery0, (String) null, charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.addQuery("#=Own\u0002Qyx", "#=Own\u0002Qyx");
      assertEquals(0, urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      assertEquals((-1), urlBuilder0.getPort());
      
      urlBuilder0.setPort(0);
      urlBuilder0.addPathSegment("");
      assertEquals(0, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      assertEquals((-1), urlBuilder0.getPort());
      
      urlBuilder0.setPort(0);
      urlBuilder0.addPath("%<[R@erCk#6");
      assertEquals(0, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("_r.Tv Su'}1kuS8a", "_r.Tv Su'}1kuS8a", 592, "_r.Tv Su'}1kuS8a", "com.axios.core.rfc.PercentCodec", "com.axios.core.rfc.PercentCodec", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.addPath("_r.Tv Su'}1kuS8a");
      assertEquals(592, urlBuilder1.getPort());
      assertEquals("_r.Tv Su'}1kuS8a", urlBuilder1.getHost());
      assertEquals("com.axios.core.rfc.PercentCodec", urlBuilder1.getFragment());
      assertEquals("_r.Tv Su'}1kuS8a", urlBuilder1.getScheme());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("bv", "", 0, "?f[g',?Yszh7[", uRLStreamHandler0);
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRL0, (Charset) null);
      // Undeclared exception!
      try { 
        urlBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlBuilder.ofHttpWithoutEncode("://");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        UrlBuilder.ofHttp("e6$T~f%X1:t", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        UrlBuilder.ofHttp((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlBuilder.ofHttp(":[pf.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlBuilder.ofHttp("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        UrlBuilder.of((URL) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        UrlBuilder.of((URI) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Charset charset0 = Charset.forName("GBK");
      // Undeclared exception!
      try { 
        UrlBuilder.of("GBK", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        UrlBuilder.of("", charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlBuilder.of("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      // Undeclared exception!
      try { 
        urlBuilder0.addQuery("http", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      // Undeclared exception!
      urlBuilder0.addPath(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of((String) null, (String) null, 0, (String) null, (String) null, (String) null, charset0);
      // Undeclared exception!
      try { 
        urlBuilder0.addPath((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.url.UrlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      CharBuffer charBuffer0 = CharBuffer.allocate(158);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      char[] charArray0 = new char[5];
      charBuffer0.get(charArray0);
      // Undeclared exception!
      try { 
        urlBuilder0.addPath(charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      UrlPath urlPath0 = UrlPath.of("", (Charset) null);
      UrlQuery urlQuery0 = UrlQuery.of("", (Charset) null);
      urlQuery0.parse("rE,+xVt:dAcsDSJ#[.", (Charset) null);
      UrlBuilder urlBuilder0 = new UrlBuilder("", "", 41, urlPath0, urlQuery0, "", (Charset) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = urlBuilder0.toURL(uRLStreamHandler0);
      assertEquals(41, uRL0.getPort());
      assertEquals("[.", uRL0.getRef());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "", (-992), "", "", (String) null, charset0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = urlBuilder0.toURL(uRLStreamHandler0);
      assertNull(uRL0);
      assertEquals((-992), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      UrlBuilder urlBuilder1 = urlBuilder0.setFragment("");
      assertEquals((-1), urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of((String) null, (String) null, 0, (String) null, (String) null, (String) null, charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.setFragment("/");
      assertEquals(0, urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      urlBuilder0.getQueryStr();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("`{oU1%G(k", charset0);
      String string0 = urlBuilder0.getQueryStr();
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals("`{oU1%G(k", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      UrlBuilder urlBuilder1 = urlBuilder0.addPathSegment("http:/");
      assertEquals((-1), urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      URI uRI0 = MockURI.URI("/");
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.addPathSegment("/");
      assertEquals("", urlBuilder1.getFragment());
      assertEquals((-1), urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, charset0);
      String string0 = urlBuilder0.getPathStr();
      assertEquals("foo.bar", urlBuilder0.getHost());
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("", string0);
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      String string0 = urlBuilder0.getPathStr();
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("", charset0, false);
      UrlBuilder urlBuilder0 = new UrlBuilder("/", "!;hJlKYF/I7|uv; (d", 4, urlPath0, urlQuery0, ":jV9 TE;,|", charset0);
      String string0 = urlBuilder0.getAuthority();
      assertEquals(":jV9 TE;,|", urlBuilder0.getFragment());
      assertEquals("!;hJlKYF/I7|uv; (d:4", string0);
      assertEquals("/", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("http://:41/?rE,+xVt:dAcsDSJ#[.", charset0);
      assertEquals(41, urlBuilder0.getPort());
      assertEquals("[.", urlBuilder0.getFragment());
      assertEquals("", urlBuilder0.getHost());
      assertEquals("http", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "", 98, "", "", "", charset0);
      URL uRL0 = urlBuilder0.toURL();
      assertNotNull(uRL0);
      
      UrlBuilder urlBuilder1 = UrlBuilder.of(uRL0, charset0);
      assertEquals("http", urlBuilder1.getScheme());
      assertEquals("http://:98/", uRL0.toString());
      assertEquals("", urlBuilder1.getHost());
      assertEquals("", urlBuilder1.getFragment());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      URI uRI0 = MockURI.URI("/");
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, charset0);
      String string0 = urlBuilder0.getFragmentEncoded();
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.of("http://:41/?rE,+xVt:dAcsDSJ#[.", (Charset) null);
      assertEquals("", urlBuilder0.getHost());
      assertEquals(41, urlBuilder0.getPort());
      assertEquals("[.", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("http", charset0);
      urlBuilder0.getSchemeWithDefault();
      assertEquals("http", urlBuilder0.getHost());
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      UrlQuery urlQuery0 = new UrlQuery(false);
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "http", 0, (UrlPath) null, urlQuery0, "com.axios.core.map.TableMap", charset0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = urlBuilder0.toURL(uRLStreamHandler0);
      assertEquals("com.axios.core.map.TableMap", urlBuilder0.getFragment());
      assertEquals("http:0", uRL0.getAuthority());
      assertEquals("", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URI uRI0 = MockURI.URI("com.axios.core.http.url.UrlPath", "com.axios.core.http.url.UrlPath", "com.axios.core.http.url.UrlPath");
      UrlBuilder urlBuilder0 = UrlBuilder.of(uRI0, (Charset) null);
      // Undeclared exception!
      try { 
        urlBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      UrlBuilder urlBuilder1 = urlBuilder0.addQuery("http:/", "");
      assertEquals((-1), urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "", 63, "", "", "", (Charset) null);
      UrlBuilder urlBuilder1 = urlBuilder0.addQuery("", "");
      assertEquals(63, urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode(":");
      UrlBuilder urlBuilder1 = urlBuilder0.addPath(":");
      assertEquals("", urlBuilder1.getHost());
      assertEquals("http", urlBuilder1.getScheme());
      assertEquals("", urlBuilder1.getFragment());
      assertEquals((-1), urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlQuery urlQuery0 = UrlQuery.of("AY`i]&", (Charset) null, false);
      UrlBuilder urlBuilder0 = new UrlBuilder("", "AY`i]&", 2, urlPath0, urlQuery0, "", (Charset) null);
      UrlBuilder urlBuilder1 = urlBuilder0.addPathSegment("");
      assertEquals(2, urlBuilder1.getPort());
      assertEquals("", urlBuilder1.getScheme());
      assertEquals("AY`i]&", urlBuilder1.getHost());
      assertEquals("", urlBuilder1.getFragment());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("http://:63/");
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals(63, urlBuilder0.getPort());
      assertEquals("", urlBuilder0.getHost());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      urlBuilder0.setPort(2201);
      URI uRI0 = urlBuilder0.toURI();
      Charset charset0 = Charset.defaultCharset();
      UrlBuilder urlBuilder1 = UrlBuilder.of(uRI0, charset0);
      assertEquals(2201, urlBuilder0.getPort());
      assertEquals(2201, urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      urlBuilder0.getFragment();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      urlBuilder0.getQuery();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.of("", "", 63, "", "", "", (Charset) null);
      urlBuilder0.getCharset();
      assertEquals(63, urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      String string0 = urlBuilder0.toString();
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("http:/", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlQuery urlQuery0 = UrlQuery.of("AY`i]&", (Charset) null, false);
      UrlBuilder urlBuilder0 = new UrlBuilder("", "AY`i]&", 2, urlPath0, urlQuery0, "", (Charset) null);
      UrlBuilder urlBuilder1 = urlBuilder0.setQuery(urlQuery0);
      assertEquals(2, urlBuilder1.getPort());
      assertEquals("AY`i]&", urlBuilder1.getHost());
      assertEquals("", urlBuilder1.getFragment());
      assertEquals("", urlBuilder1.getScheme());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      UrlBuilder urlBuilder1 = urlBuilder0.setHost("_}sw&IX");
      assertEquals((-1), urlBuilder1.getPort());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttpWithoutEncode("nt}S(-9-XSA2kKvn");
      urlBuilder0.getPath();
      assertEquals((-1), urlBuilder0.getPort());
      assertEquals("http", urlBuilder0.getScheme());
      assertEquals("nt}S(-9-XSA2kKvn", urlBuilder0.getHost());
      assertEquals("", urlBuilder0.getFragment());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      urlBuilder0.getScheme();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlQuery urlQuery0 = UrlQuery.of("AY`i]&", (Charset) null, false);
      UrlBuilder urlBuilder0 = new UrlBuilder("", "AY`i]&", 2, urlPath0, urlQuery0, "", (Charset) null);
      UrlBuilder urlBuilder1 = urlBuilder0.setCharset((Charset) null);
      assertEquals("", urlBuilder1.getScheme());
      assertEquals("", urlBuilder1.getFragment());
      assertEquals(2, urlBuilder1.getPort());
      assertEquals("AY`i]&", urlBuilder1.getHost());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlQuery urlQuery0 = UrlQuery.of("AY`i]&", (Charset) null, false);
      UrlBuilder urlBuilder0 = new UrlBuilder("", "AY`i]&", 2, urlPath0, urlQuery0, "", (Charset) null);
      int int0 = urlBuilder0.getPort();
      assertEquals("AY`i]&", urlBuilder0.getHost());
      assertEquals(2, int0);
      assertEquals("", urlBuilder0.getFragment());
      assertEquals("", urlBuilder0.getScheme());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlBuilder.ofHttpWithoutEncode("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("", charset0, false);
      UrlBuilder urlBuilder0 = new UrlBuilder("/", "!;hJlKYF/I7|uv; (d", 4, urlPath0, urlQuery0, ":jV9 TE;,|", charset0);
      URI uRI0 = urlBuilder0.toURI();
      assertEquals("/://!;hJlKYF%2FI7%7Cuv;%20(d:4?#:jV9%2520TE;,%257C", uRI0.toString());
      assertNotNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("", charset0, false);
      UrlBuilder urlBuilder0 = new UrlBuilder("/", "!;hJlKYF/I7|uv; (d", 4, urlPath0, urlQuery0, ":jV9 TE;,|", charset0);
      UrlBuilder urlBuilder1 = urlBuilder0.setPath(urlPath0);
      assertEquals("/", urlBuilder1.getScheme());
      assertEquals(4, urlBuilder1.getPort());
      assertEquals(":jV9 TE;,|", urlBuilder1.getFragment());
      assertEquals("!;hJlKYF/I7|uv; (d", urlBuilder1.getHost());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      urlBuilder0.getHost();
      assertEquals((-1), urlBuilder0.getPort());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlBuilder.of("K)!y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
}
