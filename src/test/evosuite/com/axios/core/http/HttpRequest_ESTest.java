/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 00:59:31 GMT 2024
 */

package com.axios.core.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.cookie.ThreadLocalCookieStore;
import com.axios.core.connection.Connection;
import com.axios.core.http.HttpRequest;
import com.axios.core.http.url.UrlBuilder;
import com.axios.core.http.url.UrlPath;
import com.axios.core.http.url.UrlQuery;
import com.axios.core.requestMethod.RequestMethod;
import com.axios.core.resource.BytesResource;
import com.axios.core.resource.MultiFileResource;
import com.axios.core.resource.Resource;
import com.axios.response.HttpResponse;
import java.io.File;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.HttpCookie;
import java.net.URI;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.sql.SQLClientInfoException;
import java.sql.SQLRecoverableException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpRequest_ESTest extends HttpRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpRequest.closeCookie();
      CookieManager cookieManager0 = HttpRequest.getCookieManager();
      assertNull(cookieManager0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("close");
      httpRequest0.executeAsync();
      Connection connection0 = httpRequest0.getConnection();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("455@8o~rzA~dp0'Dpy");
      Object object0 = new Object();
      httpRequest0.form("HTTP/1.1", object0);
      Map<String, Resource> map0 = httpRequest0.fileForm();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("jzjB2qdDC!");
      MockFile mockFile0 = new MockFile("pHPs^./BbCFZ**LaU");
      HttpRequest httpRequest1 = httpRequest0.form("2I7Op;J sbRR_s0Lt", (File) mockFile0, "pHPs^./BbCFZ**LaU");
      Map<String, Resource> map0 = httpRequest1.fileForm();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://close/");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "q2.r~Ej\u00019U#");
      HttpRequest httpRequest0 = HttpRequest.options("close");
      HttpResponse httpResponse0 = httpRequest0.executeAsync();
      assertNotNull(httpResponse0);
      assertEquals(200, httpResponse0.status);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("455@8o~rzA~dp0'Dpy");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://8o~rzA~dp0'Dpy/");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "HTTP/1.1");
      HttpResponse httpResponse0 = httpRequest0.execute(true);
      assertEquals(200, httpResponse0.status);
      assertNotNull(httpResponse0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("FO~U");
      httpRequest0.contentLength((-3475));
      String string0 = httpRequest0.contentLength();
      assertEquals("-3475", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("X6N6=pnSy");
      // Undeclared exception!
      try { 
        httpRequest0.setUrl("k8LJ3cjgDq'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("Keep-Alive");
      // Undeclared exception!
      try { 
        httpRequest0.setUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.put("9X&B?8*vsH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.put("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.post("i%ZC:O}viS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.post("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.patch("ISd\"rIVFdE\u0007_u>tUj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.patch("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.options("]+G2:j~jr6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.options("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("json");
      HttpRequest httpRequest1 = httpRequest0.enableDefaultCookie();
      Map<String, List<String>> map0 = httpRequest1.headers();
      httpRequest1.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest1.keepAlive(true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch(",o{#g!t}y\"}\f/%[Ab");
      httpRequest0.headers = null;
      // Undeclared exception!
      try { 
        httpRequest0.isKeepAlive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.CaseInsensitiveMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.head("]b}25N&nN+dV._3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.head("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = new UrlPath();
      UrlBuilder urlBuilder0 = UrlBuilder.of("multipart/form-data", "+V$0d", 1626, urlPath0, (UrlQuery) null, "", charset0);
      HttpRequest httpRequest0 = new HttpRequest(urlBuilder0);
      // Undeclared exception!
      try { 
        httpRequest0.getUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.get("qd^zx>:|])|78");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.get((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("multipart/form-data");
      byte[] byteArray0 = new byte[2];
      httpRequest0.headers = null;
      // Undeclared exception!
      try { 
        httpRequest0.form("TEXT_PLAIN", byteArray0, "PUT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.CaseInsensitiveMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("close");
      File file0 = MockFile.createTempFile("HTTP/1.1", "$fn{Y8s%J8SNHG ");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      File[] fileArray0 = new File[3];
      fileArray0[0] = file0;
      fileArray0[2] = file0;
      // Undeclared exception!
      try { 
        httpRequest0.form("HTTP/1.1", (Object) hashMap0, (Object[]) fileArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      HttpRequest httpRequest0 = new HttpRequest(urlBuilder0);
      // Undeclared exception!
      try { 
        httpRequest0.executeAsync();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("xml");
      // Undeclared exception!
      try { 
        httpRequest0.execute(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("multipart/form-datacom.axios.core.tool.UrlTool");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      httpRequest0.setUrlHandler(uRLStreamHandler0);
      // Undeclared exception!
      try { 
        httpRequest0.execute(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.connection.Connection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      HttpRequest httpRequest0 = new HttpRequest(urlBuilder0);
      // Undeclared exception!
      try { 
        httpRequest0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.delete("=i ;X{*\"Zb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.delete((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("multipart/form-data");
      HttpRequest httpRequest1 = httpRequest0.timeout((byte)0);
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(threadLocalCookieStore0, cookiePolicy0);
      URI uRI0 = MockURI.create("HTTP/1.0");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Map<String, List<String>> map0 = cookieManager0.get(uRI0, hashMap0);
      httpRequest1.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest1.contentType("com.axios.core.http.HttpInterceptor$Interceptor");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("bA`V`");
      HttpRequest httpRequest1 = httpRequest0.body("HTTP/1.1");
      Map<String, List<String>> map0 = httpRequest0.headers();
      httpRequest1.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest0.contentLength(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("close");
      File file0 = MockFile.createTempFile("multipart/form-data", "multipart/form-data>lo&['iUK+[Y:^", (File) null);
      HttpRequest httpRequest1 = httpRequest0.form("", file0, "multipart/form-data");
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(threadLocalCookieStore0, cookiePolicy0);
      URI uRI0 = MockURI.aFileURI;
      Map<String, List<String>> map0 = httpRequest1.headers;
      Map<String, List<String>> map1 = cookieManager0.get(uRI0, map0);
      httpRequest1.headers = map1;
      // Undeclared exception!
      try { 
        httpRequest1.body("multipart/form-data", "xmnyjtab7e]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HttpRequest httpRequest0 = null;
      try {
        httpRequest0 = new HttpRequest("vX:al");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HttpRequest httpRequest0 = null;
      try {
        httpRequest0 = new HttpRequest("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("455@8o~rzA~dp0'Dpy");
      HttpResponse httpResponse0 = httpRequest0.execute(true);
      assertEquals("UTF-8", httpResponse0.charset());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("}Fx#9;3,k6S]2");
      HttpRequest httpRequest1 = httpRequest0.body((byte[]) null);
      assertEquals("UTF-8", httpRequest1.charset());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("rrP>e ~");
      HttpRequest httpRequest1 = httpRequest0.keepAlive(false);
      ArrayDeque<File> arrayDeque0 = new ArrayDeque<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(arrayDeque0);
      HttpRequest httpRequest2 = httpRequest1.form("HTTP/1.0", (Resource) multiFileResource0);
      assertSame(httpRequest2, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("DATE");
      byte[] byteArray0 = new byte[3];
      BytesResource bytesResource0 = new BytesResource(byteArray0);
      HttpRequest httpRequest1 = httpRequest0.form("DATE", (Resource) bytesResource0);
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("abcdefghijklmnopqrstuvwxyz0123456789");
      MockFile mockFile0 = new MockFile("multipart/form-dataACCEPT_LANGUApE", "HTTP/1.0");
      HttpRequest httpRequest1 = httpRequest0.form("multipart/form-dataACCEPT_LANGUApE", (Object) mockFile0);
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("com.axios.header.RequestHeader");
      HttpCookie[] httpCookieArray0 = new HttpCookie[0];
      HttpRequest httpRequest1 = httpRequest0.cookie(httpCookieArray0);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("Z");
      HttpCookie[] httpCookieArray0 = new HttpCookie[2];
      HttpRequest httpRequest1 = httpRequest0.cookie(httpCookieArray0);
      assertEquals(RequestMethod.DELETE, httpRequest1.getMethod());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("F:#");
      httpRequest0.httpVersion("HTTP/1.0");
      boolean boolean0 = httpRequest0.isKeepAlive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("Accept-Charset");
      boolean boolean0 = httpRequest0.isKeepAlive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of("PVcZJqk]S-#", charset0);
      HashMap<String, SQLClientInfoException> hashMap0 = new HashMap<String, SQLClientInfoException>();
      UrlQuery urlQuery0 = new UrlQuery(hashMap0, true);
      UrlBuilder urlBuilder0 = new UrlBuilder("PVcZJqk]S-#", ";^ o-d>(JW", (-52), urlPath0, urlQuery0, ";^ o-d>(JW", charset0);
      HttpRequest httpRequest0 = new HttpRequest(urlBuilder0);
      HttpRequest httpRequest1 = httpRequest0.setUrl(urlBuilder0);
      assertEquals(RequestMethod.GET, httpRequest1.getMethod());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put("H6x4/AYI");
      HttpRequest httpRequest1 = httpRequest0.contentLength(503);
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("CgS;y/~~x^-@");
      HttpRequest httpRequest1 = httpRequest0.setConnectionTimeout(0);
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("`VmjOQl\"V");
      HttpRequest httpRequest1 = httpRequest0.cookie("i?4~e\"ivR");
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("HTTP/1.0");
      HttpRequest httpRequest1 = httpRequest0.setReadTimeout((byte) (-102));
      assertEquals("UTF-8", httpRequest1.charset());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("Close");
      HttpRequest httpRequest1 = httpRequest0.setMaxRedirectCount(3351);
      httpRequest1.charset = null;
      HttpRequest httpRequest2 = httpRequest1.body("HTTP/1.0", "multipart/form-data");
      assertEquals(RequestMethod.DELETE, httpRequest2.getMethod());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("FO~U");
      File file0 = MockFile.createTempFile("HTTP/1.0", "HTTP/1.1");
      HttpRequest httpRequest1 = httpRequest0.form((String) null, file0);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("Close");
      HttpRequest httpRequest1 = httpRequest0.body("HTTP/1.0", "multipart/form-data");
      // Undeclared exception!
      try { 
        httpRequest1.execute(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("F:#");
      RequestMethod requestMethod0 = RequestMethod.TRACE;
      httpRequest0.setMethod(requestMethod0);
      HttpResponse httpResponse0 = httpRequest0.execute();
      assertEquals("HTTP/1.1", httpResponse0.httpVersion());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("close");
      RequestMethod requestMethod0 = RequestMethod.PUT;
      httpRequest0.method(requestMethod0);
      httpRequest0.body("");
      // Undeclared exception!
      try { 
        httpRequest0.executeAsync();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("close");
      httpRequest0.body("{");
      // Undeclared exception!
      try { 
        httpRequest0.executeAsync();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("Close");
      // Undeclared exception!
      try { 
        httpRequest0.execute(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("A}~Y(>h-Qre+68@");
      RequestMethod requestMethod0 = RequestMethod.POST;
      httpRequest0.setMethod(requestMethod0);
      // Undeclared exception!
      try { 
        httpRequest0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://multipart/form-data");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "multipart/form-data");
      HttpRequest httpRequest0 = HttpRequest.options("multipart/form-data");
      httpRequest0.setFollowRedirects(true);
      HttpResponse httpResponse0 = httpRequest0.execute();
      assertNotNull(httpResponse0);
      assertEquals(200, httpResponse0.status);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("rrP>e ~");
      byte[] byteArray0 = new byte[0];
      httpRequest0.body(byteArray0);
      // Undeclared exception!
      try { 
        httpRequest0.execute(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal character in authority at index 7: http://rrP>e ~/
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("multipart/form-data");
      HttpRequest httpRequest1 = httpRequest0.body("!-&'()A+,;=");
      // Undeclared exception!
      try { 
        httpRequest1.execute();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("455L7@8o~rzA~dp0'DpZ");
      LinkedList<HttpCookie> linkedList0 = new LinkedList<HttpCookie>();
      HttpRequest httpRequest1 = httpRequest0.cookie((Collection<HttpCookie>) linkedList0);
      HttpResponse httpResponse0 = httpRequest1.execute(true);
      assertEquals("UTF-8", httpResponse0.charset());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("multipart/form-data");
      httpRequest0.setFollowRedirects(true);
      HttpResponse httpResponse0 = httpRequest0.execute(true);
      assertEquals(404, httpResponse0.getStatus());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("multipart/form-data");
      httpRequest0.execute(true);
      // Undeclared exception!
      try { 
        httpRequest0.execute();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("FO~U");
      HttpRequest httpRequest1 = httpRequest0.body((String) null, (String) null);
      assertEquals(RequestMethod.GET, httpRequest1.getMethod());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("close");
      httpRequest0.contentType("close");
      HttpRequest httpRequest1 = httpRequest0.body("{");
      assertEquals(RequestMethod.OPTIONS, httpRequest1.getMethod());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("jzjB2qdDC!");
      HttpRequest httpRequest1 = httpRequest0.form("jzjB2qdDC!", (Resource) null);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("jzjB2qdDC!");
      HttpRequest httpRequest1 = httpRequest0.form((String) null, (byte[]) null, "{Z03");
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("multipart/form-data");
      HttpRequest httpRequest1 = httpRequest0.form("multipart/form-datajson", (File) null, "HTTP/1.1");
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("H6x4/AYI");
      File[] fileArray0 = new File[1];
      // Undeclared exception!
      try { 
        httpRequest0.form("H6x4/AYI", fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("FO~U");
      HttpRequest httpRequest1 = httpRequest0.form("com.axios.header.requestheader", (File[]) null);
      assertSame(httpRequest0, httpRequest1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("close");
      File[] fileArray0 = new File[3];
      // Undeclared exception!
      try { 
        httpRequest0.form("HTTP/1.0", fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.resource.FileResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("A}~Y(>h-Qre+68@");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("3N(ITNC0-}$?p.8^", "");
      HttpRequest httpRequest1 = httpRequest0.formStr(hashMap0);
      assertEquals(RequestMethod.PATCH, httpRequest1.getMethod());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("close");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<String, Object>) hashMap0);
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("gs19");
      File[] fileArray0 = new File[0];
      MultiFileResource multiFileResource0 = new MultiFileResource(fileArray0);
      HttpRequest httpRequest1 = httpRequest0.form("HTTP/1.0", (Object) multiFileResource0, (Object[]) fileArray0);
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("close");
      File file0 = MockFile.createTempFile("HTTP/1.1", "$fn{Y8s%J8SNHG ");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      File[] fileArray0 = new File[3];
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      // Undeclared exception!
      try { 
        httpRequest0.form("HTTP/1.1", (Object) hashMap0, (Object[]) fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("Close");
      HttpRequest httpRequest1 = httpRequest0.form(")Z7", (Object) null);
      assertEquals("UTF-8", httpRequest1.charset());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("multipart/form-data");
      byte[] byteArray0 = new byte[2];
      HttpRequest httpRequest1 = httpRequest0.form("HTTP/1.0", byteArray0, "PUT");
      Map<String, Object> map0 = httpRequest0.form();
      assertNotNull(map0);
      
      httpRequest1.form(map0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("F:#");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("qnwIk3A2A?C,cv", "HTTP/1.0", (Throwable) null);
      HttpRequest httpRequest1 = httpRequest0.form((String) null, (Object) sQLRecoverableException0);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("1@O!xR]I8y NUNWQoq");
      ArrayList<HttpCookie> arrayList0 = new ArrayList<HttpCookie>();
      HttpCookie httpCookie0 = new HttpCookie("g[l^e!:", "g[l^e!:");
      arrayList0.add(httpCookie0);
      HttpRequest httpRequest1 = httpRequest0.cookie((Collection<HttpCookie>) arrayList0);
      assertEquals(RequestMethod.PATCH, httpRequest1.getMethod());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("F:#");
      byte[] byteArray0 = new byte[1];
      httpRequest0.httpVersion("HTTP/1.0");
      httpRequest0.form("HTTP/1.1", byteArray0, "qnwIk3A2A?C,cv");
      boolean boolean0 = httpRequest0.isKeepAlive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("A}~Y(>h-Qre+68@");
      HttpRequest httpRequest1 = httpRequest0.keepAlive(false);
      boolean boolean0 = httpRequest1.isKeepAlive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HttpRequest.setGlobalTimeout(11);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("1@O!xR]I8y NUNWQoq");
      Map<String, Object> map0 = httpRequest0.form();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("com.axios.header.RequestHeader");
      // Undeclared exception!
      try { 
        httpRequest0.form("+V$0d", (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("455L7@8o~rzA~dp0'DpZ");
      RequestMethod requestMethod0 = httpRequest0.getMethod();
      assertEquals(RequestMethod.HEAD, requestMethod0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("HEAD");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest1 = httpRequest0.formStr(hashMap0);
      assertEquals(RequestMethod.HEAD, httpRequest1.getMethod());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("Close");
      String string0 = httpRequest0.getUrl();
      assertEquals("http://Close/", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("Accept-Charset");
      HttpRequest httpRequest1 = httpRequest0.setUrl("HTTP/1.0");
      assertEquals("UTF-8", httpRequest1.charset());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("Accept-Charset");
      String string0 = httpRequest0.contentLength();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CookieManager cookieManager0 = HttpRequest.getCookieManager();
      HttpRequest.setCookieManager(cookieManager0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("jzjB2qdDC!");
      HttpRequest httpRequest1 = httpRequest0.setFollowRedirects(false);
      assertEquals(RequestMethod.POST, httpRequest1.getMethod());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("multipart/form-data");
      Connection connection0 = httpRequest0.getConnection();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("close");
      HttpRequest httpRequest1 = httpRequest0.disableCookie();
      assertEquals("UTF-8", httpRequest1.charset());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("F:#");
      // Undeclared exception!
      try { 
        httpRequest0.fileForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("json");
      HttpRequest httpRequest1 = httpRequest0.body("HTTP/1.1", "json");
      MockFile mockFile0 = new MockFile("json", "json");
      httpRequest1.form("HTTP/1.0", (File) mockFile0, "HTTP/1.0");
      // Undeclared exception!
      try { 
        httpRequest0.execute(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }
}
