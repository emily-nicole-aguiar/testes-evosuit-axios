/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 03:40:39 GMT 2024
 */

package com.axios.core.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.map.MapWrapper;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MapWrapper_ESTest extends MapWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, String> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, String>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", hashMap0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleEntry1, "com.axios.core.map.MapWrapper");
      MapWrapper<AbstractMap.SimpleEntry<String, Object>, String> mapWrapper0 = new MapWrapper<AbstractMap.SimpleEntry<String, Object>, String>(hashMap0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      mapWrapper0.forEach(consumer0);
      // Undeclared exception!
      try { 
        mapWrapper0.putAll(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<String, Object>, HashMap<String, Object>> hashMap0 = new HashMap<HashMap<String, Object>, HashMap<String, Object>>();
      MapWrapper<HashMap<String, Object>, HashMap<String, Object>> mapWrapper0 = new MapWrapper<HashMap<String, Object>, HashMap<String, Object>>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      mapWrapper0.replace(hashMap1, hashMap1, hashMap1);
      Integer integer0 = new Integer((-1));
      mapWrapper0.remove((Object) integer0);
      MapWrapper<HashMap<String, Object>, HashMap<String, Object>> mapWrapper1 = new MapWrapper<HashMap<String, Object>, HashMap<String, Object>>(mapWrapper0);
      HashMap<AbstractMap.SimpleEntry<String, Object>, String> hashMap2 = new HashMap<AbstractMap.SimpleEntry<String, Object>, String>();
      MapWrapper<AbstractMap.SimpleEntry<String, Object>, String> mapWrapper2 = new MapWrapper<AbstractMap.SimpleEntry<String, Object>, String>(hashMap2);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("9SvML?{0A{3+g1z?9(", "");
      hashMap2.put(abstractMap_SimpleEntry0, "9SvML?{0A{3+g1z?9(");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("n#}WG}.]j 81kk").when(biFunction0).apply(any() , any());
      mapWrapper2.computeIfPresent(abstractMap_SimpleEntry0, biFunction0);
      mapWrapper2.replace((AbstractMap.SimpleEntry<String, Object>) null, "");
      mapWrapper2.isEmpty();
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper3 = new MapWrapper<Integer, Object>(hashMap3);
      mapWrapper3.size();
      MapWrapper<HashMap<Object, Integer>, Object> mapWrapper4 = new MapWrapper<HashMap<Object, Integer>, Object>((Map<HashMap<Object, Integer>, Object>) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper0 = new MapWrapper<Object, Object>(hashMap0);
      MapWrapper<Object, Object> mapWrapper1 = new MapWrapper<Object, Object>(mapWrapper0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = mapWrapper1.merge(hashMap0, hashMap0, biFunction0);
      MapWrapper<Object, Object> mapWrapper2 = new MapWrapper<Object, Object>(mapWrapper1);
      // Undeclared exception!
      try { 
        mapWrapper0.put(object0, mapWrapper2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleEntry<Object, String>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, String>>();
      Integer integer0 = new Integer((-1064));
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(object0, "'EtM9O }pVN");
      hashMap0.put(integer0, abstractMap_SimpleEntry0);
      Integer integer1 = new Integer((-1064));
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(hashMap0, "NI502LB262*+");
      abstractMap_SimpleEntry1.setValue("NI502LB262*+");
      hashMap0.put(integer1, abstractMap_SimpleEntry1);
      MapWrapper<Integer, AbstractMap.SimpleEntry<Object, String>> mapWrapper0 = new MapWrapper<Integer, AbstractMap.SimpleEntry<Object, String>>(hashMap0);
      mapWrapper0.isEmpty();
      HashMap<String, MapWrapper<Object, Object>> hashMap1 = new HashMap<String, MapWrapper<Object, Object>>();
      MapWrapper<String, MapWrapper<Object, Object>> mapWrapper1 = new MapWrapper<String, MapWrapper<Object, Object>>(hashMap1);
      mapWrapper1.remove((Object) "NI502LB262*+");
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      MapWrapper<Object, Integer> mapWrapper2 = new MapWrapper<Object, Integer>(hashMap2);
      HashMap<MapWrapper<Object, String>, Object> hashMap3 = new HashMap<MapWrapper<Object, String>, Object>();
      MapWrapper<MapWrapper<Object, String>, Object> mapWrapper3 = new MapWrapper<MapWrapper<Object, String>, Object>(hashMap3);
      mapWrapper3.getRaw();
      HashMap<MapWrapper<String, Object>, Object> hashMap4 = new HashMap<MapWrapper<String, Object>, Object>();
      MapWrapper<MapWrapper<String, Object>, Object> mapWrapper4 = new MapWrapper<MapWrapper<String, Object>, Object>(hashMap4);
      HashMap<Integer, Object> hashMap5 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper5 = new MapWrapper<Integer, Object>(hashMap5);
      MapWrapper<Integer, Object> mapWrapper6 = new MapWrapper<Integer, Object>(mapWrapper5);
      MapWrapper<Integer, Object> mapWrapper7 = new MapWrapper<Integer, Object>(mapWrapper6);
      MapWrapper<Integer, Object> mapWrapper8 = new MapWrapper<Integer, Object>(mapWrapper7);
      assertTrue(mapWrapper8.isEmpty());
      
      mapWrapper8.putAll(mapWrapper0);
      assertFalse(mapWrapper8.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>>();
      MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>> mapWrapper0 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>>(hashMap0);
      MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>> mapWrapper1 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>>(mapWrapper0);
      MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>> mapWrapper2 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>>(mapWrapper1);
      MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>> mapWrapper3 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>>(mapWrapper2);
      Integer integer0 = new Integer(1044);
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      MapWrapper<String, String> mapWrapper4 = new MapWrapper<String, String>(hashMap1);
      Map.Entry.comparingByKey();
      mapWrapper3.putIfAbsent(abstractMap_SimpleImmutableEntry1, mapWrapper4);
      MapWrapper<String, String> mapWrapper5 = new MapWrapper<String, String>(mapWrapper4);
      MapWrapper<String, String> mapWrapper6 = new MapWrapper<String, String>(mapWrapper5);
      mapWrapper3.replace(abstractMap_SimpleImmutableEntry1, mapWrapper6, mapWrapper5);
      MapWrapper<AbstractMap.SimpleEntry<Integer, String>, Integer> mapWrapper7 = new MapWrapper<AbstractMap.SimpleEntry<Integer, String>, Integer>((Map<AbstractMap.SimpleEntry<Integer, String>, Integer>) null);
      // Undeclared exception!
      try { 
        mapWrapper7.get(mapWrapper6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<HashMap<String, Object>, HashMap<Object, String>> hashMap0 = new HashMap<HashMap<String, Object>, HashMap<Object, String>>();
      MapWrapper<HashMap<String, Object>, HashMap<Object, String>> mapWrapper0 = new MapWrapper<HashMap<String, Object>, HashMap<Object, String>>(hashMap0);
      MapWrapper<HashMap<String, Object>, HashMap<Object, String>> mapWrapper1 = new MapWrapper<HashMap<String, Object>, HashMap<Object, String>>(mapWrapper0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      mapWrapper1.clear();
      hashMap2.put("", "");
      hashMap2.put("", "f$?^)K0E&o7");
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>(hashMap2);
      hashMap3.put(hashMap0, (String) null);
      mapWrapper1.put(hashMap1, hashMap3);
      // Undeclared exception!
      try { 
        mapWrapper1.remove((Object) mapWrapper0, (Object) mapWrapper0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper0 = new MapWrapper<Integer, Object>(hashMap0);
      Integer integer0 = new Integer((-2268));
      mapWrapper0.putIfAbsent(integer0, hashMap0);
      Integer integer1 = new Integer((-2268));
      mapWrapper0.remove((Object) integer1);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      MapWrapper<Object, String> mapWrapper1 = new MapWrapper<Object, String>(hashMap1);
      MapWrapper<Object, String> mapWrapper2 = new MapWrapper<Object, String>(mapWrapper1);
      MapWrapper<Object, String> mapWrapper3 = new MapWrapper<Object, String>(mapWrapper2);
      MapWrapper<Object, String> mapWrapper4 = new MapWrapper<Object, String>(mapWrapper3);
      mapWrapper4.remove((Object) mapWrapper0);
      MapWrapper<MapWrapper<Object, String>, String> mapWrapper5 = new MapWrapper<MapWrapper<Object, String>, String>((Map<MapWrapper<Object, String>, String>) null);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapWrapper5.computeIfPresent(mapWrapper4, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper0 = new MapWrapper<Object, Object>(hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = mapWrapper0.merge(hashMap0, hashMap0, biFunction0);
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> hashMap1 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>(1);
      MapWrapper<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> mapWrapper1 = new MapWrapper<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>(hashMap1);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("@", "@");
      // Undeclared exception!
      try { 
        mapWrapper1.getOrDefault(object0, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Map<AbstractMap.SimpleImmutableEntry<String, String>, String> map0 = null;
      MapWrapper<AbstractMap.SimpleImmutableEntry<String, String>, String> mapWrapper0 = new MapWrapper<AbstractMap.SimpleImmutableEntry<String, String>, String>((Map<AbstractMap.SimpleImmutableEntry<String, String>, String>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MapWrapper<Object, String> mapWrapper0 = new MapWrapper<Object, String>((Map<Object, String>) null);
      mapWrapper0.equals((Object) null);
      // Undeclared exception!
      try { 
        mapWrapper0.putAll((Map<?, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper0 = new MapWrapper<Integer, Object>(hashMap0);
      MapWrapper<Integer, Object> mapWrapper1 = new MapWrapper<Integer, Object>(mapWrapper0);
      mapWrapper0.spliterator();
      MapWrapper<Integer, Object> mapWrapper2 = new MapWrapper<Integer, Object>(mapWrapper1);
      Integer integer0 = new Integer(1344);
      hashMap0.put(integer0, integer0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      mapWrapper2.replaceAll(biFunction0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      mapWrapper0.forEach(biConsumer0);
      MapWrapper<Object, Integer> mapWrapper3 = new MapWrapper<Object, Integer>(hashMap1);
      MapWrapper<Object, Integer> mapWrapper4 = new MapWrapper<Object, Integer>(mapWrapper3);
      mapWrapper4.containsKey(mapWrapper1);
      mapWrapper3.hashCode();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> hashMap2 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>();
      MapWrapper<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer> mapWrapper5 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Object, Integer>, Integer>(hashMap2);
      mapWrapper5.isEmpty();
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap3 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      MapWrapper<Object, AbstractMap.SimpleImmutableEntry<Object, String>> mapWrapper6 = new MapWrapper<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(hashMap3);
      mapWrapper6.isEmpty();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> hashMap4 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      MapWrapper<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> mapWrapper7 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>(hashMap4);
      mapWrapper7.hashCode();
      mapWrapper4.putAll(hashMap2);
      MapWrapper<Integer, MapWrapper<Object, String>> mapWrapper8 = new MapWrapper<Integer, MapWrapper<Object, String>>((Map<Integer, MapWrapper<Object, String>>) null);
      Integer integer1 = new Integer(1344);
      // Undeclared exception!
      try { 
        mapWrapper8.replace(integer1, (MapWrapper<Object, String>) null, (MapWrapper<Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, String> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, String>();
      MapWrapper<AbstractMap.SimpleEntry<String, Object>, String> mapWrapper0 = new MapWrapper<AbstractMap.SimpleEntry<String, Object>, String>(hashMap0);
      MapWrapper<AbstractMap.SimpleEntry<String, Object>, String> mapWrapper1 = new MapWrapper<AbstractMap.SimpleEntry<String, Object>, String>(mapWrapper0);
      BiFunction<Object, Object, String> biFunction0 = null;
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper2 = new MapWrapper<Object, Object>(hashMap1);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", mapWrapper2);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        mapWrapper0.merge(abstractMap_SimpleEntry1, "su*8(8e!t(`'3'B'$g", (BiFunction<? super String, ? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Map<String, Object> map0 = null;
      MapWrapper<String, Object> mapWrapper0 = new MapWrapper<String, Object>((Map<String, Object>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapWrapper<Object, String> mapWrapper0 = new MapWrapper<Object, String>(hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("com.axios.core.map.MapWrapper").when(biFunction0).apply(any() , any());
      String string0 = mapWrapper0.compute((Object) null, biFunction0);
      assertEquals("com.axios.core.map.MapWrapper", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<MapWrapper<Object, Integer>, String> hashMap0 = new HashMap<MapWrapper<Object, Integer>, String>();
      MapWrapper<MapWrapper<Object, Integer>, String> mapWrapper0 = new MapWrapper<MapWrapper<Object, Integer>, String>(hashMap0);
      Integer integer0 = new Integer(0);
      mapWrapper0.getOrDefault(integer0, "mGEApz~G+)ZkTeBiAt ");
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper1 = new MapWrapper<Integer, Object>(hashMap1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      mapWrapper1.forEach(biConsumer0);
      MapWrapper<Object, MapWrapper<Integer, Integer>> mapWrapper2 = new MapWrapper<Object, MapWrapper<Integer, Integer>>((Map<Object, MapWrapper<Integer, Integer>>) null);
      MapWrapper<Object, MapWrapper<Integer, Integer>> mapWrapper3 = new MapWrapper<Object, MapWrapper<Integer, Integer>>(mapWrapper2);
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapWrapper3.forEach(biConsumer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Map<MapWrapper<Object, String>, Object> map0 = null;
      MapWrapper<MapWrapper<Object, String>, Object> mapWrapper0 = new MapWrapper<MapWrapper<Object, String>, Object>((Map<MapWrapper<Object, String>, Object>) null);
      MapWrapper<MapWrapper<Object, String>, Object> mapWrapper1 = new MapWrapper<MapWrapper<Object, String>, Object>(mapWrapper0);
      MapWrapper<MapWrapper<Object, String>, Object> mapWrapper2 = new MapWrapper<MapWrapper<Object, String>, Object>(mapWrapper1);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapWrapper<Object, String> mapWrapper3 = new MapWrapper<Object, String>(hashMap0);
      MapWrapper<Object, String> mapWrapper4 = new MapWrapper<Object, String>(mapWrapper3);
      MapWrapper<Object, String> mapWrapper5 = new MapWrapper<Object, String>(mapWrapper4);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapWrapper2.compute(mapWrapper5, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      MapWrapper<Integer, String> mapWrapper0 = new MapWrapper<Integer, String>(hashMap0);
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Integer> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Integer>(0);
      String string0 = "";
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", mapWrapper0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      Integer integer0 = new Integer(0);
      hashMap1.put(abstractMap_SimpleEntry0, integer0);
      MapWrapper<AbstractMap.SimpleEntry<Object, Object>, Integer> mapWrapper1 = new MapWrapper<AbstractMap.SimpleEntry<Object, Object>, Integer>(hashMap1);
      mapWrapper1.values();
      MapWrapper<Object, Integer> mapWrapper2 = new MapWrapper<Object, Integer>((Map<Object, Integer>) null);
      MapWrapper<Object, Integer> mapWrapper3 = new MapWrapper<Object, Integer>(mapWrapper2);
      // Undeclared exception!
      try { 
        mapWrapper2.getOrDefault(mapWrapper3, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<MapWrapper<Object, Object>, Object> hashMap0 = new HashMap<MapWrapper<Object, Object>, Object>();
      MapWrapper<MapWrapper<Object, Object>, Object> mapWrapper0 = new MapWrapper<MapWrapper<Object, Object>, Object>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper1 = new MapWrapper<Object, Object>(hashMap1);
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Object> function2 = function0.compose((Function<? super Object, ?>) function1);
      Function<Object, Object> function3 = function2.andThen((Function<? super Object, ?>) function0);
      mapWrapper0.computeIfAbsent(mapWrapper1, function3);
      HashMap<String, MapWrapper<Object, String>> hashMap2 = new HashMap<String, MapWrapper<Object, String>>();
      MapWrapper<String, MapWrapper<Object, String>> mapWrapper2 = new MapWrapper<String, MapWrapper<Object, String>>(hashMap2);
      MapWrapper<String, MapWrapper<Object, String>> mapWrapper3 = new MapWrapper<String, MapWrapper<Object, String>>(mapWrapper2);
      Integer integer0 = new Integer(1053);
      mapWrapper3.containsValue(integer0);
      HashMap<AbstractMap.SimpleEntry<Object, Object>, String> hashMap3 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, String>();
      MapWrapper<AbstractMap.SimpleEntry<Object, Object>, String> mapWrapper4 = new MapWrapper<AbstractMap.SimpleEntry<Object, Object>, String>(hashMap3);
      MapWrapper<AbstractMap.SimpleEntry<Object, Object>, String> mapWrapper5 = new MapWrapper<AbstractMap.SimpleEntry<Object, Object>, String>(mapWrapper4);
      MapWrapper<AbstractMap.SimpleEntry<Object, Object>, String> mapWrapper6 = new MapWrapper<AbstractMap.SimpleEntry<Object, Object>, String>(mapWrapper5);
      mapWrapper6.putAll(mapWrapper5);
      HashMap<Integer, String> hashMap4 = new HashMap<Integer, String>();
      MapWrapper<Integer, String> mapWrapper7 = new MapWrapper<Integer, String>(hashMap4);
      MapWrapper<Integer, String> mapWrapper8 = new MapWrapper<Integer, String>(mapWrapper7);
      BiConsumer<Integer, String> biConsumer0 = (BiConsumer<Integer, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      mapWrapper8.forEach(biConsumer0);
      assertFalse(mapWrapper8.equals((Object)mapWrapper7));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapWrapper<String, Integer> mapWrapper0 = new MapWrapper<String, Integer>(hashMap0);
      mapWrapper0.equals("");
      MapWrapper<String, Integer> mapWrapper1 = new MapWrapper<String, Integer>(mapWrapper0);
      mapWrapper1.remove((Object) mapWrapper0);
      mapWrapper1.containsValue(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap1.put(hashMap0, (Integer) null);
      MapWrapper<Object, Integer> mapWrapper2 = new MapWrapper<Object, Integer>(hashMap1);
      mapWrapper2.containsKey(hashMap0);
      HashMap<MapWrapper<Integer, Integer>, String> hashMap2 = new HashMap<MapWrapper<Integer, Integer>, String>();
      HashMap<Integer, Integer> hashMap3 = new HashMap<Integer, Integer>();
      MapWrapper<Integer, Integer> mapWrapper3 = new MapWrapper<Integer, Integer>(hashMap3);
      MapWrapper<Integer, Integer> mapWrapper4 = new MapWrapper<Integer, Integer>(mapWrapper3);
      MapWrapper<Integer, Integer> mapWrapper5 = new MapWrapper<Integer, Integer>(mapWrapper4);
      MapWrapper<Integer, Integer> mapWrapper6 = new MapWrapper<Integer, Integer>(mapWrapper5);
      // Undeclared exception!
      try { 
        hashMap2.merge(mapWrapper6, "", (BiFunction<? super String, ? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<MapWrapper<Object, Object>, Object> hashMap0 = new HashMap<MapWrapper<Object, Object>, Object>();
      MapWrapper<MapWrapper<Object, Object>, Object> mapWrapper0 = new MapWrapper<MapWrapper<Object, Object>, Object>(hashMap0);
      MapWrapper<Object, Object> mapWrapper1 = new MapWrapper<Object, Object>((Map<Object, Object>) null);
      mapWrapper0.replace(mapWrapper1, (Object) hashMap0, (Object) "l$88so-_usNKU8;");
      Iterator<Map.Entry<MapWrapper<Object, Object>, Object>> iterator0 = (Iterator<Map.Entry<MapWrapper<Object, Object>, Object>>)mapWrapper0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> hashMap0 = new HashMap<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      MapWrapper<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> mapWrapper0 = new MapWrapper<MapWrapper<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>(0);
      MapWrapper<Integer, Object> mapWrapper1 = new MapWrapper<Integer, Object>(hashMap1);
      MapWrapper<Integer, Object> mapWrapper2 = new MapWrapper<Integer, Object>(mapWrapper1);
      Integer integer0 = new Integer(187);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
      hashMap0.put(mapWrapper2, abstractMap_SimpleImmutableEntry0);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper3 = new MapWrapper<Integer, Object>(hashMap2);
      MapWrapper<Integer, Object> mapWrapper4 = new MapWrapper<Integer, Object>(mapWrapper3);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Object>((Integer) null, mapWrapper4);
      mapWrapper0.putIfAbsent(mapWrapper4, abstractMap_SimpleImmutableEntry1);
      assertEquals(1, mapWrapper0.size());
      
      mapWrapper0.clear();
      HashMap<Integer, Integer> hashMap3 = new HashMap<Integer, Integer>();
      MapWrapper<Integer, Integer> mapWrapper5 = new MapWrapper<Integer, Integer>(hashMap3);
      mapWrapper5.getRaw();
      HashMap<AbstractMap.SimpleEntry<Integer, String>, Integer> hashMap4 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, Integer>();
      MapWrapper<AbstractMap.SimpleEntry<Integer, String>, Integer> mapWrapper6 = new MapWrapper<AbstractMap.SimpleEntry<Integer, String>, Integer>(hashMap4);
      MapWrapper<AbstractMap.SimpleEntry<Integer, String>, Integer> mapWrapper7 = new MapWrapper<AbstractMap.SimpleEntry<Integer, String>, Integer>(mapWrapper6);
      MapWrapper<AbstractMap.SimpleEntry<Integer, String>, Integer> mapWrapper8 = new MapWrapper<AbstractMap.SimpleEntry<Integer, String>, Integer>(mapWrapper7);
      assertFalse(mapWrapper7.equals((Object)mapWrapper6));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      MapWrapper<AbstractMap.SimpleEntry<Object, Object>, Object> mapWrapper0 = new MapWrapper<AbstractMap.SimpleEntry<Object, Object>, Object>(hashMap0);
      Map<AbstractMap.SimpleEntry<Object, Object>, Object> map0 = mapWrapper0.getRaw();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      MapWrapper<Object, Integer> mapWrapper0 = new MapWrapper<Object, Integer>(hashMap0);
      MapWrapper<Object, Integer> mapWrapper1 = new MapWrapper<Object, Integer>(mapWrapper0);
      Integer integer0 = new Integer((-1342));
      hashMap0.put("", integer0);
      Integer integer1 = new Integer((-341));
      mapWrapper0.put(hashMap0, integer1);
      Integer integer2 = new Integer((-4107));
      // Undeclared exception!
      try { 
        mapWrapper1.replace((Object) hashMap0, integer2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, MapWrapper<Object, Integer>> hashMap0 = new HashMap<Integer, MapWrapper<Object, Integer>>();
      MapWrapper<Integer, MapWrapper<Object, Integer>> mapWrapper0 = new MapWrapper<Integer, MapWrapper<Object, Integer>>(hashMap0);
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, (MapWrapper<Object, Integer>) null);
      MapWrapper<Integer, MapWrapper<Object, Integer>> mapWrapper1 = new MapWrapper<Integer, MapWrapper<Object, Integer>>(mapWrapper0);
      mapWrapper1.getRaw();
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, String>> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, String>>();
      MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, String>> mapWrapper2 = new MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, String>>(hashMap1);
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, String>>> iterator0 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, String>>>)mapWrapper2.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<MapWrapper<String, Integer>, MapWrapper<Object, Object>> hashMap0 = new HashMap<MapWrapper<String, Integer>, MapWrapper<Object, Object>>();
      MapWrapper<MapWrapper<String, Integer>, MapWrapper<Object, Object>> mapWrapper0 = new MapWrapper<MapWrapper<String, Integer>, MapWrapper<Object, Object>>(hashMap0);
      mapWrapper0.iterator();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      MapWrapper<String, Integer> mapWrapper1 = new MapWrapper<String, Integer>(hashMap1);
      mapWrapper1.isEmpty();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper2 = new MapWrapper<Integer, Object>(hashMap2);
      MapWrapper<Object, Integer> mapWrapper3 = new MapWrapper<Object, Integer>((Map<Object, Integer>) null);
      MapWrapper<Object, Integer> mapWrapper4 = new MapWrapper<Object, Integer>(mapWrapper3);
      MapWrapper<Object, Integer> mapWrapper5 = new MapWrapper<Object, Integer>(mapWrapper4);
      String string0 = ">EN\\S7zGJ}0OXau\\K<";
      mapWrapper2.remove((Object) mapWrapper5, (Object) ">ENS7zGJ}0OXauK<");
      MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object> mapWrapper6 = new MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object>((Map<AbstractMap.SimpleEntry<Integer, Object>, Object>) null);
      MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object> mapWrapper7 = new MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object>(mapWrapper6);
      int int0 = 16;
      Integer integer0 = new Integer(16);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, hashMap0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        mapWrapper7.replace(abstractMap_SimpleEntry0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<MapWrapper<String, Object>, Object> hashMap0 = new HashMap<MapWrapper<String, Object>, Object>();
      MapWrapper<MapWrapper<String, Object>, Object> mapWrapper0 = new MapWrapper<MapWrapper<String, Object>, Object>(hashMap0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      mapWrapper0.forEach(biConsumer0);
      MapWrapper<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>> mapWrapper1 = new MapWrapper<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>>((Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, String>>) null);
      // Undeclared exception!
      try { 
        mapWrapper1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, MapWrapper<Object, String>> hashMap0 = new HashMap<String, MapWrapper<Object, String>>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      MapWrapper<Object, String> mapWrapper0 = new MapWrapper<Object, String>(hashMap1);
      hashMap0.put("", mapWrapper0);
      MapWrapper<String, MapWrapper<Object, String>> mapWrapper1 = new MapWrapper<String, MapWrapper<Object, String>>(hashMap0);
      MapWrapper<String, MapWrapper<Object, String>> mapWrapper2 = new MapWrapper<String, MapWrapper<Object, String>>(mapWrapper1);
      MapWrapper<String, Integer> mapWrapper3 = new MapWrapper<String, Integer>((Map<String, Integer>) null);
      MapWrapper<String, Integer> mapWrapper4 = new MapWrapper<String, Integer>(mapWrapper3);
      // Undeclared exception!
      try { 
        mapWrapper4.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<MapWrapper<String, Object>, String> hashMap0 = new HashMap<MapWrapper<String, Object>, String>();
      MapWrapper<MapWrapper<String, Object>, String> mapWrapper0 = new MapWrapper<MapWrapper<String, Object>, String>(hashMap0);
      Iterator<Map.Entry<MapWrapper<String, Object>, String>> iterator0 = (Iterator<Map.Entry<MapWrapper<String, Object>, String>>)mapWrapper0.iterator();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper1 = new MapWrapper<Object, Object>(hashMap1);
      mapWrapper1.equals(iterator0);
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> hashMap2 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      MapWrapper<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> mapWrapper2 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>(hashMap2);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(hashMap0, "x^Se@4l");
      Integer integer0 = new Integer((-550));
      mapWrapper2.replace(abstractMap_SimpleImmutableEntry0, integer0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(hashMap2, "");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      Integer integer1 = new Integer(539);
      mapWrapper2.replace(abstractMap_SimpleImmutableEntry1, integer1);
      Map<Integer, Integer> map0 = null;
      MapWrapper<Integer, Integer> mapWrapper3 = new MapWrapper<Integer, Integer>((Map<Integer, Integer>) null);
      Integer integer2 = new Integer((-1));
      // Undeclared exception!
      try { 
        mapWrapper3.remove((Object) integer2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MapWrapper<Integer, String> mapWrapper0 = new MapWrapper<Integer, String>((Map<Integer, String>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer(1827);
      hashMap0.put("", integer0);
      MapWrapper<String, Object> mapWrapper0 = new MapWrapper<String, Object>(hashMap0);
      mapWrapper0.replace("", (Object) hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      MapWrapper<Object, String> mapWrapper1 = new MapWrapper<Object, String>(hashMap1);
      MapWrapper<Object, String> mapWrapper2 = new MapWrapper<Object, String>(mapWrapper1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      mapWrapper1.forEach(consumer0);
      MapWrapper<Object, String> mapWrapper3 = new MapWrapper<Object, String>(mapWrapper2);
      mapWrapper3.values();
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper4 = new MapWrapper<Object, Object>(hashMap2);
      MapWrapper<Object, Object> mapWrapper5 = new MapWrapper<Object, Object>(mapWrapper4);
      MapWrapper<Object, Object> mapWrapper6 = new MapWrapper<Object, Object>(mapWrapper5);
      Object object0 = new Object();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapWrapper6.merge(mapWrapper0, object0, biFunction0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(2264);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(hashMap0, "g54<28;1J`5G>'{");
      hashMap0.put(integer0, abstractMap_SimpleImmutableEntry0);
      MapWrapper<Object, AbstractMap.SimpleImmutableEntry<Object, String>> mapWrapper0 = new MapWrapper<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      MapWrapper<String, Integer> mapWrapper1 = new MapWrapper<String, Integer>(hashMap1);
      MapWrapper<String, Integer> mapWrapper2 = new MapWrapper<String, Integer>(mapWrapper1);
      MapWrapper<String, Integer> mapWrapper3 = new MapWrapper<String, Integer>(mapWrapper2);
      MapWrapper<String, Integer> mapWrapper4 = new MapWrapper<String, Integer>(mapWrapper3);
      mapWrapper0.put(mapWrapper4, (AbstractMap.SimpleImmutableEntry<Object, String>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.remove((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MapWrapper<Integer, Integer> mapWrapper0 = new MapWrapper<Integer, Integer>((Map<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object> mapWrapper0 = new MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object>(hashMap0);
      MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object> mapWrapper1 = new MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object>(mapWrapper0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      mapWrapper0.forEach(biConsumer1);
      mapWrapper0.forEach(biConsumer0);
      MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object> mapWrapper2 = new MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object>(mapWrapper1);
      MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object> mapWrapper3 = new MapWrapper<AbstractMap.SimpleEntry<Integer, Object>, Object>(mapWrapper2);
      assertFalse(mapWrapper3.equals((Object)mapWrapper2));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapWrapper<String, Integer> mapWrapper0 = new MapWrapper<String, Integer>(hashMap0);
      MapWrapper<Object, Integer> mapWrapper1 = new MapWrapper<Object, Integer>((Map<Object, Integer>) null);
      boolean boolean0 = mapWrapper0.containsValue(mapWrapper1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      MapWrapper<Integer, String> mapWrapper0 = new MapWrapper<Integer, String>(hashMap0);
      Integer integer0 = new Integer((-1111));
      String string0 = mapWrapper0.replace(integer0, "\"p{");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, Object> mapWrapper0 = new MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(hashMap0);
      MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, Object> mapWrapper1 = new MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(mapWrapper0);
      MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, Object> mapWrapper2 = new MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(mapWrapper1);
      MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, Object> mapWrapper3 = new MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(mapWrapper2);
      boolean boolean0 = mapWrapper3.containsKey(mapWrapper1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Object, MapWrapper<String, Integer>> hashMap0 = new HashMap<Object, MapWrapper<String, Integer>>();
      MapWrapper<Object, MapWrapper<String, Integer>> mapWrapper0 = new MapWrapper<Object, MapWrapper<String, Integer>>(hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      MapWrapper<String, Integer> mapWrapper1 = new MapWrapper<String, Integer>(hashMap1);
      hashMap0.put((Object) null, mapWrapper1);
      MapWrapper<String, Integer> mapWrapper2 = new MapWrapper<String, Integer>(hashMap1);
      MapWrapper<String, Integer> mapWrapper3 = new MapWrapper<String, Integer>(hashMap1);
      hashMap0.put(mapWrapper3, mapWrapper3);
      hashMap0.put(hashMap1, mapWrapper2);
      MapWrapper<String, Integer> mapWrapper4 = new MapWrapper<String, Integer>(hashMap1);
      mapWrapper4.putAll(mapWrapper1);
      MapWrapper<String, Integer> mapWrapper5 = new MapWrapper<String, Integer>(mapWrapper4);
      mapWrapper0.getOrDefault(hashMap0, mapWrapper5);
      mapWrapper0.size();
      HashMap<Integer, MapWrapper<Object, Object>> hashMap2 = new HashMap<Integer, MapWrapper<Object, Object>>(0, 3);
      MapWrapper<Integer, MapWrapper<Object, Object>> mapWrapper6 = new MapWrapper<Integer, MapWrapper<Object, Object>>(hashMap2);
      mapWrapper6.values();
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      MapWrapper<Object, String> mapWrapper7 = new MapWrapper<Object, String>(hashMap3);
      MapWrapper<Object, String> mapWrapper8 = new MapWrapper<Object, String>(mapWrapper7);
      mapWrapper8.equals(mapWrapper2);
      HashMap<Integer, Object> hashMap4 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper9 = new MapWrapper<Integer, Object>(hashMap4);
      mapWrapper9.putAll(hashMap4);
      HashMap<Integer, Integer> hashMap5 = new HashMap<Integer, Integer>();
      MapWrapper<Integer, Integer> mapWrapper10 = new MapWrapper<Integer, Integer>(hashMap5);
      MapWrapper<Integer, Integer> mapWrapper11 = new MapWrapper<Integer, Integer>(mapWrapper10);
      mapWrapper11.iterator();
      HashMap<String, AbstractMap.SimpleEntry<String, Integer>> hashMap6 = null;
      try {
        hashMap6 = new HashMap<String, AbstractMap.SimpleEntry<String, Integer>>(0, (-1857.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1857.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapWrapper<String, String> mapWrapper0 = new MapWrapper<String, String>(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      MapWrapper<Object, Integer> mapWrapper1 = new MapWrapper<Object, Integer>(hashMap1);
      MapWrapper<Object, Integer> mapWrapper2 = new MapWrapper<Object, Integer>(mapWrapper1);
      mapWrapper0.equals(mapWrapper2);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      mapWrapper0.compute("", biFunction0);
      mapWrapper0.entrySet();
      MapWrapper<Integer, Object> mapWrapper3 = new MapWrapper<Integer, Object>((Map<Integer, Object>) null);
      // Undeclared exception!
      try { 
        mapWrapper3.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Map<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> map0 = null;
      MapWrapper<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> mapWrapper0 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>) null);
      MapWrapper<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> mapWrapper1 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>(mapWrapper0);
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("^jEAEQRs$J^h", mapWrapper1);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        mapWrapper1.putIfAbsent(abstractMap_SimpleImmutableEntry1, "^jEAEQRs$J^h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapWrapper<String, String> mapWrapper0 = new MapWrapper<String, String>(hashMap0);
      MapWrapper<String, String> mapWrapper1 = new MapWrapper<String, String>(mapWrapper0);
      mapWrapper1.hashCode();
      MapWrapper<String, String> mapWrapper2 = new MapWrapper<String, String>(mapWrapper1);
      mapWrapper2.clear();
      MapWrapper<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, Integer>> mapWrapper3 = new MapWrapper<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, Integer>>((Map<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Integer, Integer>>) null);
      Object object0 = null;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      // Undeclared exception!
      try { 
        mapWrapper3.remove((Object) null, (Object) integer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MapWrapper<String, String> mapWrapper0 = new MapWrapper<String, String>((Map<String, String>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Map<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> map0 = null;
      MapWrapper<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> mapWrapper0 = new MapWrapper<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>((Map<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MapWrapper<Integer, Object> mapWrapper0 = new MapWrapper<Integer, Object>((Map<Integer, Object>) null);
      MapWrapper<Integer, Object> mapWrapper1 = new MapWrapper<Integer, Object>(mapWrapper0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        mapWrapper1.put(integer0, mapWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>();
      MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, String> mapWrapper0 = new MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, String>(hashMap0);
      mapWrapper0.spliterator();
      // Undeclared exception!
      try { 
        mapWrapper0.computeIfPresent((AbstractMap.SimpleImmutableEntry<String, Object>) null, (BiFunction<? super AbstractMap.SimpleImmutableEntry<String, Object>, ? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      MapWrapper<Integer, String> mapWrapper0 = new MapWrapper<Integer, String>(hashMap0);
      mapWrapper0.putAll(hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MapWrapper<Object, MapWrapper<Object, String>> mapWrapper0 = new MapWrapper<Object, MapWrapper<Object, String>>((Map<Object, MapWrapper<Object, String>>) null);
      mapWrapper0.getRaw();
      HashMap<MapWrapper<Object, Object>, MapWrapper<String, Object>> hashMap0 = new HashMap<MapWrapper<Object, Object>, MapWrapper<String, Object>>();
      MapWrapper<MapWrapper<Object, Object>, MapWrapper<String, Object>> mapWrapper1 = new MapWrapper<MapWrapper<Object, Object>, MapWrapper<String, Object>>(hashMap0);
      MapWrapper<MapWrapper<Object, Object>, MapWrapper<String, Object>> mapWrapper2 = new MapWrapper<MapWrapper<Object, Object>, MapWrapper<String, Object>>(mapWrapper1);
      boolean boolean0 = mapWrapper2.isEmpty();
      assertTrue(boolean0);
      
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper3 = new MapWrapper<Integer, Object>(hashMap1);
      MapWrapper<Integer, Object> mapWrapper4 = new MapWrapper<Integer, Object>(mapWrapper3);
      mapWrapper4.hashCode();
      assertTrue(mapWrapper3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper0 = new MapWrapper<Integer, Object>(hashMap0);
      Integer integer0 = new Integer(14);
      mapWrapper0.putIfAbsent(integer0, integer0);
      // Undeclared exception!
      try { 
        mapWrapper0.forEach((BiConsumer<? super Integer, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapWrapper<String, Object> mapWrapper0 = new MapWrapper<String, Object>(hashMap0);
      mapWrapper0.toString();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper1 = new MapWrapper<Integer, Object>(hashMap1);
      MapWrapper<Integer, Object> mapWrapper2 = new MapWrapper<Integer, Object>(mapWrapper1);
      MapWrapper<Integer, Object> mapWrapper3 = new MapWrapper<Integer, Object>(mapWrapper2);
      Collection<Object> collection0 = mapWrapper3.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "com.axios.core.map.MapWrapper";
      hashMap0.put("com.axios.core.map.MapWrapper", (Integer) null);
      MapWrapper<String, Integer> mapWrapper0 = new MapWrapper<String, Integer>(hashMap0);
      // Undeclared exception!
      try { 
        mapWrapper0.computeIfAbsent("com.axios.core.map.MapWrapper", (Function<? super String, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, String>, String> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, String>, String>();
      hashMap0.put((AbstractMap.SimpleImmutableEntry<String, String>) null, "o-Y!A}Eyq|T");
      hashMap0.put((AbstractMap.SimpleImmutableEntry<String, String>) null, "]W~RNYbel'.r:HOkM");
      hashMap0.replace((AbstractMap.SimpleImmutableEntry<String, String>) null, ")lwPc(!D'S5N51Pb", "]1#`{lp9*~,PHbflK");
      MapWrapper<AbstractMap.SimpleImmutableEntry<String, String>, String> mapWrapper0 = new MapWrapper<AbstractMap.SimpleImmutableEntry<String, String>, String>(hashMap0);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      mapWrapper0.merge((AbstractMap.SimpleImmutableEntry<String, String>) null, "", biFunction0);
      mapWrapper0.equals("e.;JduYotNx");
      MapWrapper<String, Object> mapWrapper1 = new MapWrapper<String, Object>((Map<String, Object>) null);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapWrapper1.replaceAll(biFunction1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MapWrapper<Integer, MapWrapper<String, Object>> mapWrapper0 = new MapWrapper<Integer, MapWrapper<String, Object>>((Map<Integer, MapWrapper<String, Object>>) null);
      // Undeclared exception!
      try { 
        mapWrapper0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper0 = new MapWrapper<Object, Object>(hashMap0);
      MapWrapper<Object, Object> mapWrapper1 = new MapWrapper<Object, Object>(hashMap0);
      Function<Object, Object> function0 = Function.identity();
      mapWrapper0.computeIfAbsent(mapWrapper1, function0);
      HashMap<String, AbstractMap.SimpleEntry<Object, String>> hashMap1 = new HashMap<String, AbstractMap.SimpleEntry<Object, String>>();
      MapWrapper<String, AbstractMap.SimpleEntry<Object, String>> mapWrapper2 = new MapWrapper<String, AbstractMap.SimpleEntry<Object, String>>(hashMap1);
      Integer integer0 = new Integer(1);
      boolean boolean0 = mapWrapper2.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapWrapper<Object, String> mapWrapper0 = new MapWrapper<Object, String>(hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      mapWrapper0.merge(hashMap0, "", biFunction0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper1 = new MapWrapper<Object, Object>(hashMap1);
      MapWrapper<Object, Object> mapWrapper2 = new MapWrapper<Object, Object>(mapWrapper1);
      int int0 = mapWrapper2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<MapWrapper<String, Object>, String> hashMap0 = new HashMap<MapWrapper<String, Object>, String>();
      MapWrapper<MapWrapper<String, Object>, String> mapWrapper0 = new MapWrapper<MapWrapper<String, Object>, String>(hashMap0);
      mapWrapper0.remove((Object) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(1, 1);
      MapWrapper<String, Object> mapWrapper1 = new MapWrapper<String, Object>(hashMap1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      mapWrapper1.replaceAll(biFunction0);
      HashMap<MapWrapper<Integer, String>, Object> hashMap2 = new HashMap<MapWrapper<Integer, String>, Object>();
      MapWrapper<MapWrapper<Integer, String>, Object> mapWrapper2 = new MapWrapper<MapWrapper<Integer, String>, Object>(hashMap2);
      mapWrapper2.entrySet();
      HashMap<Object, Integer> hashMap3 = new HashMap<Object, Integer>();
      MapWrapper<Object, Integer> mapWrapper3 = new MapWrapper<Object, Integer>(hashMap3);
      boolean boolean0 = mapWrapper3.remove((Object) hashMap3, (Object) hashMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapWrapper<Integer, Object> mapWrapper0 = new MapWrapper<Integer, Object>(hashMap0);
      MapWrapper<Integer, Object> mapWrapper1 = new MapWrapper<Integer, Object>(mapWrapper0);
      boolean boolean0 = mapWrapper1.equals(mapWrapper0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapWrapper<String, Integer> mapWrapper0 = new MapWrapper<String, Integer>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>(mapWrapper0);
      MapWrapper<Object, Object> mapWrapper1 = new MapWrapper<Object, Object>(hashMap1);
      MapWrapper<Object, Object> mapWrapper2 = new MapWrapper<Object, Object>(mapWrapper1);
      Object object0 = mapWrapper2.get(hashMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapWrapper<Object, String> mapWrapper0 = new MapWrapper<Object, String>(hashMap0);
      hashMap0.putAll(mapWrapper0);
      hashMap0.values();
      MapWrapper<Object, String> mapWrapper1 = new MapWrapper<Object, String>(mapWrapper0);
      mapWrapper1.hashCode();
      mapWrapper1.clear();
      HashMap<AbstractMap.SimpleEntry<String, Object>, MapWrapper<Integer, String>> hashMap1 = new HashMap<AbstractMap.SimpleEntry<String, Object>, MapWrapper<Integer, String>>();
      MapWrapper<AbstractMap.SimpleEntry<String, Object>, MapWrapper<Integer, String>> mapWrapper2 = new MapWrapper<AbstractMap.SimpleEntry<String, Object>, MapWrapper<Integer, String>>(hashMap1);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("wRxjW,$UV Hj", mapWrapper1);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      MapWrapper<Integer, String> mapWrapper3 = new MapWrapper<Integer, String>(hashMap2);
      MapWrapper<Integer, String> mapWrapper4 = new MapWrapper<Integer, String>(mapWrapper3);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry1);
      mapWrapper2.put(abstractMap_SimpleEntry2, mapWrapper3);
      MapWrapper<Integer, String> mapWrapper5 = new MapWrapper<Integer, String>(mapWrapper4);
      mapWrapper2.put(abstractMap_SimpleEntry1, mapWrapper5);
      mapWrapper2.keySet();
      assertEquals(1, mapWrapper2.size());
      
      HashMap<AbstractMap.SimpleEntry<String, Object>, String> hashMap3 = new HashMap<AbstractMap.SimpleEntry<String, Object>, String>();
      MapWrapper<AbstractMap.SimpleEntry<String, Object>, String> mapWrapper6 = new MapWrapper<AbstractMap.SimpleEntry<String, Object>, String>(hashMap3);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      mapWrapper6.computeIfPresent(abstractMap_SimpleEntry1, biFunction0);
      assertFalse(mapWrapper1.equals((Object)mapWrapper0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<AbstractMap.SimpleEntry<String, Object>, String> hashMap1 = new HashMap<AbstractMap.SimpleEntry<String, Object>, String>();
      MapWrapper<AbstractMap.SimpleEntry<String, Object>, String> mapWrapper0 = new MapWrapper<AbstractMap.SimpleEntry<String, Object>, String>(hashMap1);
      mapWrapper0.replace((AbstractMap.SimpleEntry<String, Object>) null, "");
      mapWrapper0.isEmpty();
      MapWrapper<HashMap<Object, Integer>, Object> mapWrapper1 = new MapWrapper<HashMap<Object, Integer>, Object>((Map<HashMap<Object, Integer>, Object>) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapWrapper<String, String> mapWrapper0 = new MapWrapper<String, String>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MapWrapper<String, Object> mapWrapper1 = new MapWrapper<String, Object>(hashMap1);
      assertTrue(mapWrapper1.isEmpty());
      
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      mapWrapper1.merge("urcwkhD/1Y#L$Oezp", hashMap0, biFunction1);
      assertFalse(mapWrapper1.isEmpty());
      
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      MapWrapper<Object, Integer> mapWrapper2 = new MapWrapper<Object, Integer>(hashMap2);
      BiFunction<Integer, Object, Integer> biFunction2 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      mapWrapper0.containsValue(hashMap1);
      mapWrapper0.putAll(hashMap0);
      MapWrapper<String, String> mapWrapper3 = new MapWrapper<String, String>(mapWrapper0);
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Comparable<Object>> hashMap3 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Comparable<Object>>();
      MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, Comparable<Object>> mapWrapper4 = new MapWrapper<AbstractMap.SimpleImmutableEntry<String, Object>, Comparable<Object>>(hashMap3);
      boolean boolean0 = mapWrapper4.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("H^`", "");
      hashMap0.put("9", "");
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      hashMap1.clear();
      MapWrapper<String, String> mapWrapper0 = new MapWrapper<String, String>(hashMap1);
      mapWrapper0.equals((Object) null);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      mapWrapper0.computeIfPresent("!%Y^NE>GYK&", biFunction0);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      mapWrapper0.entrySet();
      mapWrapper0.toString();
      HashMap<MapWrapper<String, String>, AbstractMap.SimpleEntry<Object, Object>> hashMap2 = new HashMap<MapWrapper<String, String>, AbstractMap.SimpleEntry<Object, Object>>();
      MapWrapper<MapWrapper<String, String>, AbstractMap.SimpleEntry<Object, Object>> mapWrapper1 = new MapWrapper<MapWrapper<String, String>, AbstractMap.SimpleEntry<Object, Object>>(hashMap2);
      mapWrapper1.clear();
      Set<Map.Entry<MapWrapper<String, String>, AbstractMap.SimpleEntry<Object, Object>>> set0 = (Set<Map.Entry<MapWrapper<String, String>, AbstractMap.SimpleEntry<Object, Object>>>)mapWrapper1.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MapWrapper<Integer, Integer> mapWrapper0 = new MapWrapper<Integer, Integer>((Map<Integer, Integer>) null);
      MapWrapper<Integer, Integer> mapWrapper1 = new MapWrapper<Integer, Integer>(mapWrapper0);
      MapWrapper<Integer, Integer> mapWrapper2 = new MapWrapper<Integer, Integer>(mapWrapper1);
      Integer integer0 = new Integer((-2998));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mapWrapper0.compute(integer0, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>>();
      MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>> mapWrapper0 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>>(hashMap0);
      MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>> mapWrapper1 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>>(mapWrapper0);
      MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>> mapWrapper2 = new MapWrapper<AbstractMap.SimpleImmutableEntry<Integer, String>, MapWrapper<String, String>>(mapWrapper1);
      Integer integer0 = new Integer(1057);
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleImmutableEntry0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      MapWrapper<String, String> mapWrapper3 = new MapWrapper<String, String>(hashMap1);
      Map.Entry.comparingByKey();
      mapWrapper2.putIfAbsent(abstractMap_SimpleImmutableEntry1, mapWrapper3);
      MapWrapper<String, String> mapWrapper4 = new MapWrapper<String, String>(mapWrapper3);
      MapWrapper<String, String> mapWrapper5 = new MapWrapper<String, String>(mapWrapper4);
      mapWrapper2.replace(abstractMap_SimpleImmutableEntry1, mapWrapper5, mapWrapper4);
      MapWrapper<HashMap<String, String>, String> mapWrapper6 = new MapWrapper<HashMap<String, String>, String>((Map<HashMap<String, String>, String>) null);
      MapWrapper<HashMap<String, String>, String> mapWrapper7 = new MapWrapper<HashMap<String, String>, String>(mapWrapper6);
      // Undeclared exception!
      try { 
        mapWrapper7.get(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.MapWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      MapWrapper<AbstractMap.SimpleEntry<String, Object>, Object> mapWrapper0 = new MapWrapper<AbstractMap.SimpleEntry<String, Object>, Object>(hashMap0);
      MapWrapper<AbstractMap.SimpleEntry<String, Object>, Object> mapWrapper1 = new MapWrapper<AbstractMap.SimpleEntry<String, Object>, Object>(mapWrapper0);
      mapWrapper1.getOrDefault(hashMap0, mapWrapper0);
      HashMap<Object, MapWrapper<Integer, Integer>> hashMap1 = new HashMap<Object, MapWrapper<Integer, Integer>>();
      MapWrapper<Object, MapWrapper<Integer, Integer>> mapWrapper2 = new MapWrapper<Object, MapWrapper<Integer, Integer>>(hashMap1);
      mapWrapper1.spliterator();
      MapWrapper<Object, MapWrapper<Integer, Integer>> mapWrapper3 = new MapWrapper<Object, MapWrapper<Integer, Integer>>(mapWrapper2);
      Object object0 = new Object();
      boolean boolean0 = mapWrapper3.containsKey(mapWrapper1);
      HashMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> hashMap2 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>();
      MapWrapper<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> mapWrapper4 = new MapWrapper<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>(hashMap2);
      Integer integer0 = new Integer(1434);
      MapWrapper<Object, Object> mapWrapper5 = new MapWrapper<Object, Object>((Map<Object, Object>) null);
      MapWrapper<Object, Object> mapWrapper6 = new MapWrapper<Object, Object>(mapWrapper5);
      MapWrapper<Object, Object> mapWrapper7 = new MapWrapper<Object, Object>(mapWrapper5);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, mapWrapper7);
      Integer integer1 = new Integer(1434);
      HashMap<MapWrapper<Object, String>, MapWrapper<String, String>> hashMap3 = new HashMap<MapWrapper<Object, String>, MapWrapper<String, String>>();
      MapWrapper<MapWrapper<Object, String>, MapWrapper<String, String>> mapWrapper8 = new MapWrapper<MapWrapper<Object, String>, MapWrapper<String, String>>(hashMap3);
      HashMap<Object, Integer> hashMap4 = new HashMap<Object, Integer>();
      MapWrapper<Object, Integer> mapWrapper9 = new MapWrapper<Object, Integer>(hashMap4);
      MapWrapper<Object, Integer> mapWrapper10 = new MapWrapper<Object, Integer>(mapWrapper9);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      mapWrapper10.forEach(biConsumer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<Comparable<Object>, Object> hashMap5 = new HashMap<Comparable<Object>, Object>();
      MapWrapper<Comparable<Object>, Object> mapWrapper11 = new MapWrapper<Comparable<Object>, Object>(hashMap5);
      boolean boolean1 = mapWrapper11.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapWrapper<String, Integer> mapWrapper0 = new MapWrapper<String, Integer>(hashMap0);
      boolean boolean0 = mapWrapper0.equals("");
      assertFalse(boolean0);
      
      MapWrapper<String, Integer> mapWrapper1 = new MapWrapper<String, Integer>(mapWrapper0);
      mapWrapper1.remove((Object) mapWrapper0);
      boolean boolean1 = mapWrapper1.containsValue(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap1.put(hashMap0, (Integer) null);
      MapWrapper<Object, Integer> mapWrapper2 = new MapWrapper<Object, Integer>(hashMap1);
      boolean boolean2 = mapWrapper2.containsKey(hashMap0);
      assertFalse(boolean2 == boolean1);
      
      HashMap<MapWrapper<Integer, Integer>, String> hashMap2 = new HashMap<MapWrapper<Integer, Integer>, String>();
      HashMap<Integer, Integer> hashMap3 = new HashMap<Integer, Integer>();
      MapWrapper<Integer, Integer> mapWrapper3 = new MapWrapper<Integer, Integer>(hashMap3);
      MapWrapper<Integer, Integer> mapWrapper4 = new MapWrapper<Integer, Integer>(mapWrapper3);
      MapWrapper<Integer, Integer> mapWrapper5 = new MapWrapper<Integer, Integer>(mapWrapper4);
      MapWrapper<Integer, Integer> mapWrapper6 = new MapWrapper<Integer, Integer>(mapWrapper5);
      Integer integer0 = new Integer((-1598));
      Function<Integer, Integer> function0 = Function.identity();
      mapWrapper6.computeIfAbsent(integer0, function0);
      assertTrue(mapWrapper5.equals((Object)mapWrapper6));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapWrapper<Object, Object> mapWrapper0 = new MapWrapper<Object, Object>(hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      mapWrapper0.replaceAll(biFunction0);
      HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap1 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      MapWrapper<String, AbstractMap.SimpleEntry<Object, Object>> mapWrapper1 = new MapWrapper<String, AbstractMap.SimpleEntry<Object, Object>>(hashMap1);
      Integer integer0 = new Integer((-3));
      mapWrapper1.getRaw();
      Object object0 = new Object();
      Integer integer1 = new Integer((-3));
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      MapWrapper<String, Integer> mapWrapper2 = new MapWrapper<String, Integer>(hashMap3);
      HashMap<String, Object> hashMap4 = new HashMap<String, Object>();
      MapWrapper<String, Object> mapWrapper3 = new MapWrapper<String, Object>(hashMap4);
      hashMap0.put(mapWrapper3, hashMap1);
      mapWrapper2.put("o", integer0);
      mapWrapper0.isEmpty();
      mapWrapper0.entrySet();
      assertFalse(mapWrapper0.isEmpty());
      
      HashMap<String, AbstractMap.SimpleImmutableEntry<String, String>> hashMap5 = new HashMap<String, AbstractMap.SimpleImmutableEntry<String, String>>();
      MapWrapper<String, AbstractMap.SimpleImmutableEntry<String, String>> mapWrapper4 = new MapWrapper<String, AbstractMap.SimpleImmutableEntry<String, String>>(hashMap5);
      mapWrapper4.remove((Object) "o", (Object) hashMap1);
      assertTrue(mapWrapper4.isEmpty());
  }
}
