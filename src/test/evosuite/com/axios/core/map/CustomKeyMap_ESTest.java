/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 05:33:32 GMT 2024
 */

package com.axios.core.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.map.CaseInsensitiveMap;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Map;
import java.util.Spliterator;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CustomKeyMap_ESTest extends CustomKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>();
      CaseInsensitiveMap<Object, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, String>(2224, 2224);
      CaseInsensitiveMap<String, String> caseInsensitiveMap2 = new CaseInsensitiveMap<String, String>();
      Object object0 = caseInsensitiveMap2.customKey(caseInsensitiveMap1);
      caseInsensitiveMap1.put(object0, "$SKNa0oLSN1yiTf");
      // Undeclared exception!
      try { 
        caseInsensitiveMap0.putAll(caseInsensitiveMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>();
      int int0 = 1;
      CaseInsensitiveMap<Object, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, String>(1);
      Object object0 = caseInsensitiveMap1.customKey(caseInsensitiveMap0);
      caseInsensitiveMap0.put(object0, "1?6QK2)V!4\" N0");
      // Undeclared exception!
      try { 
        caseInsensitiveMap0.replace((Object) caseInsensitiveMap0, "+v'R6O|W*", "+v'R6O|W*");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1469;
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>();
      Object object0 = new Object();
      caseInsensitiveMap0.put(caseInsensitiveMap0, (String) null);
      caseInsensitiveMap0.remove(object0);
      caseInsensitiveMap0.get((Object) null);
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, Object>(1469, 1469);
      // Undeclared exception!
      try { 
        caseInsensitiveMap1.replace((Object) caseInsensitiveMap0, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>();
      Integer integer0 = new Integer(0);
      caseInsensitiveMap0.replace((Object) integer0, "I_H?fK%.GgQ7<NF?p");
      caseInsensitiveMap0.put("I_H?fK%.GgQ7<NF?p", (String) null);
      Object object0 = new Object();
      caseInsensitiveMap0.get((Object) null);
      boolean boolean0 = caseInsensitiveMap0.remove((Object) "I_H?fK%.GgQ7<NF?p", (Object) null);
      boolean boolean1 = caseInsensitiveMap0.replace(object0, (String) null, (String) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CaseInsensitiveMap<String, String> caseInsensitiveMap0 = new CaseInsensitiveMap<String, String>();
      CaseInsensitiveMap<String, String> caseInsensitiveMap1 = new CaseInsensitiveMap<String, String>(caseInsensitiveMap0);
      caseInsensitiveMap1.put("", "");
      caseInsensitiveMap1.replace("", "");
      String string0 = caseInsensitiveMap1.get(caseInsensitiveMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>(1469);
      Object object0 = new Object();
      caseInsensitiveMap0.put(object0, "-!cIS!uMu.XFG5j");
      caseInsensitiveMap0.remove(object0);
      caseInsensitiveMap0.get((Object) null);
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, Object>(1469, 1469);
      caseInsensitiveMap1.replace((Object) caseInsensitiveMap0, (Object) null);
      assertTrue(caseInsensitiveMap0.isEmpty());
      assertEquals(0, caseInsensitiveMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("G~TDE)@Evci.", "com.axios.core.map.CaseInsensitiveMap");
      CaseInsensitiveMap<String, String> caseInsensitiveMap0 = new CaseInsensitiveMap<String, String>(hashMap0);
      caseInsensitiveMap0.replace("com.axios.core.map.CustomKeyMap", "com.axios.core.map.CustomKeyMap", "com.axios.core.map.CustomKeyMap");
      CaseInsensitiveMap<String, Integer> caseInsensitiveMap1 = new CaseInsensitiveMap<String, Integer>();
      Integer integer0 = new Integer((-1462));
      caseInsensitiveMap1.put("com.axios.core.map.CustomKeyMap", integer0);
      // Undeclared exception!
      try { 
        caseInsensitiveMap1.putAll(caseInsensitiveMap1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>(1372, 1372);
      CaseInsensitiveMap<Object, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, String>(1372, 1372);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      caseInsensitiveMap0.computeIfPresent(caseInsensitiveMap1, biFunction0);
      caseInsensitiveMap0.put("", caseInsensitiveMap1);
      caseInsensitiveMap1.put(caseInsensitiveMap0, "");
      // Undeclared exception!
      try { 
        caseInsensitiveMap1.remove((Object) caseInsensitiveMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>();
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, Object>(caseInsensitiveMap0);
      Spliterator<Map.Entry<Object, Object>> spliterator0 = (Spliterator<Map.Entry<Object, Object>>)caseInsensitiveMap1.spliterator();
      String string0 = "";
      caseInsensitiveMap1.put(spliterator0, "");
      Object object0 = caseInsensitiveMap1.customKey(caseInsensitiveMap0);
      caseInsensitiveMap0.put(object0, object0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        caseInsensitiveMap1.put(object0, object1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CaseInsensitiveMap<Object, Integer> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Integer>(0);
      Integer integer0 = new Integer(0);
      caseInsensitiveMap0.put((Object) null, integer0);
      caseInsensitiveMap0.get((Object) null);
      CaseInsensitiveMap<String, String> caseInsensitiveMap1 = new CaseInsensitiveMap<String, String>(0);
      CaseInsensitiveMap<Object, String> caseInsensitiveMap2 = new CaseInsensitiveMap<Object, String>(caseInsensitiveMap1);
      CaseInsensitiveMap<Object, String> caseInsensitiveMap3 = new CaseInsensitiveMap<Object, String>(caseInsensitiveMap2);
      caseInsensitiveMap3.put(caseInsensitiveMap0, (String) null);
      int int0 = 60;
      CaseInsensitiveMap<String, Object> caseInsensitiveMap4 = new CaseInsensitiveMap<String, Object>(60);
      Object object0 = new Object();
      caseInsensitiveMap4.replace((String) null, object0, (Object) "K.Mkh+pkz");
      // Undeclared exception!
      try { 
        caseInsensitiveMap1.putAll((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.CustomKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CaseInsensitiveMap<Integer, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Integer, Object>();
      CaseInsensitiveMap<Integer, Object> caseInsensitiveMap1 = new CaseInsensitiveMap<Integer, Object>(caseInsensitiveMap0);
      caseInsensitiveMap0.putAll(caseInsensitiveMap1);
      assertNotSame(caseInsensitiveMap1, caseInsensitiveMap0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>(4328);
      CaseInsensitiveMap<Object, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, String>(caseInsensitiveMap0);
      String string0 = "";
      caseInsensitiveMap0.put("", "");
      caseInsensitiveMap1.put(caseInsensitiveMap0, "");
      caseInsensitiveMap1.containsKey(caseInsensitiveMap0);
      CaseInsensitiveMap<Object, String> caseInsensitiveMap2 = new CaseInsensitiveMap<Object, String>();
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap3 = new CaseInsensitiveMap<Object, Object>(4328, 2210.3F);
      Object object0 = new Object();
      Object object1 = caseInsensitiveMap3.customKey(object0);
      Object object2 = caseInsensitiveMap2.customKey(object1);
      caseInsensitiveMap0.put(object2, (String) null);
      CaseInsensitiveMap<String, Object> caseInsensitiveMap4 = new CaseInsensitiveMap<String, Object>(1762, 4328);
      CaseInsensitiveMap<String, Object> caseInsensitiveMap5 = null;
      try {
        caseInsensitiveMap5 = new CaseInsensitiveMap<String, Object>((-2417.6382F), caseInsensitiveMap4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -2417.6382
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CaseInsensitiveMap<String, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<String, Object>(0, 1.0F);
      caseInsensitiveMap0.put((String) null, (Object) null);
      caseInsensitiveMap0.put("", "");
      boolean boolean0 = caseInsensitiveMap0.replace("", (Object) "", (Object) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      CaseInsensitiveMap<String, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<String, Object>(585);
      Object object0 = caseInsensitiveMap0.customKey(hashMap0);
      hashMap0.put(object0, "");
      int int0 = 2773;
      Integer integer0 = new Integer(2773);
      CaseInsensitiveMap<Object, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, String>(2773);
      String string0 = "n K_5:0FKIU`5O?";
      // Undeclared exception!
      try { 
        caseInsensitiveMap1.remove((Object) hashMap0, (Object) "n K_5:0FKIU`5O?");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 4328;
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>(4328);
      String string0 = "";
      caseInsensitiveMap0.put("", "");
      caseInsensitiveMap0.put(caseInsensitiveMap0, "");
      // Undeclared exception!
      try { 
        caseInsensitiveMap0.containsKey(caseInsensitiveMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CaseInsensitiveMap<Object, Integer> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Integer>();
      CaseInsensitiveMap<String, Object> caseInsensitiveMap1 = new CaseInsensitiveMap<String, Object>();
      int int0 = (-8);
      Integer integer0 = new Integer((-8));
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap2 = new CaseInsensitiveMap<Object, Object>(caseInsensitiveMap1);
      caseInsensitiveMap2.put(caseInsensitiveMap0, caseInsensitiveMap1);
      caseInsensitiveMap0.put(caseInsensitiveMap2, integer0);
      caseInsensitiveMap2.remove((Object) caseInsensitiveMap1, (Object) "");
      caseInsensitiveMap1.remove((Object) integer0);
      caseInsensitiveMap2.replace((Object) "", (Object) null);
      // Undeclared exception!
      try { 
        caseInsensitiveMap1.get(caseInsensitiveMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>();
      boolean boolean0 = caseInsensitiveMap0.replace((Object) caseInsensitiveMap0, "+v'R6O|W*", "+v'R6O|W*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CaseInsensitiveMap<Integer, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Integer, String>();
      CaseInsensitiveMap<Object, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, String>();
      boolean boolean0 = caseInsensitiveMap1.containsKey(caseInsensitiveMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>();
      caseInsensitiveMap0.put(":}EIm>^Tuq9]`?wf&", "I=]cFF");
      String string0 = caseInsensitiveMap0.put(":}EIm>^Tuq9]`?wf&", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>();
      boolean boolean0 = caseInsensitiveMap0.replace((Object) caseInsensitiveMap0, "+v'R6O|W*", "+v'R6O|W*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CaseInsensitiveMap<Integer, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Integer, String>();
      CaseInsensitiveMap<Object, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, String>();
      boolean boolean0 = caseInsensitiveMap1.containsKey(caseInsensitiveMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CaseInsensitiveMap<Object, Integer> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Integer>();
      CaseInsensitiveMap<String, Object> caseInsensitiveMap1 = new CaseInsensitiveMap<String, Object>();
      Integer integer0 = new Integer(0);
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap2 = new CaseInsensitiveMap<Object, Object>(caseInsensitiveMap1);
      caseInsensitiveMap2.put(caseInsensitiveMap0, caseInsensitiveMap1);
      caseInsensitiveMap2.remove((Object) caseInsensitiveMap1, (Object) "");
      caseInsensitiveMap1.remove((Object) integer0);
      caseInsensitiveMap2.replace((Object) "", (Object) null);
      Object object0 = caseInsensitiveMap1.get(caseInsensitiveMap0);
      assertNull(object0);
  }
}
