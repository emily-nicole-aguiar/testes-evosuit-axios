/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:34:03 GMT 2024
 */

package com.axios.core.assertion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.assertion.Assert;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Assert_ESTest extends Assert_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("%/?o", supplier0);
      Assert.notBlank("%/?o", "[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notNull((Object) "%/?o", supplier1);
      Assert.notBlank("%/?o");
      Assert.notBlank("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank", "");
      Assert.notBlank("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      Assert.isBlankChar(65279);
      Supplier<Throwable> supplier2 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      Assert.notBlank(charBuffer0, supplier2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Assert.notBlank(" 2,F7v");
      String string0 = "";
      String string1 = "pM^Ela=q.3UGZ9n";
      MockThrowable mockThrowable0 = new MockThrowable("pM^Ela=q.3UGZ9n");
      Assert.isBlankChar(' ');
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(mockThrowable0).when(supplier0).get();
      try { 
        Assert.notBlank("", supplier0);
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Assert.notNull(object0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Assert.isBlankChar(8199);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Assert.notNull("k@Om`wfG^I");
      Assert assert0 = new Assert();
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("k@Om`wfG^I", supplier0);
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notNull(object1);
      Supplier<Throwable> supplier2 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("t_e;\"UOjN9[qqXFJ-5", supplier2);
      Assert.isBlankChar((-2697));
      Assert.isBlankChar('f');
      Assert.isBlankChar('f');
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Assert.notNull(object0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Assert.isBlankChar(8233);
      Assert.notNull("k@Om`wfG^I");
      Assert assert0 = new Assert();
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("k@Om`wfG^I", supplier0);
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("k@Om`wfG^I", supplier1);
      Supplier<Throwable> supplier2 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notNull(object1);
      Supplier<Throwable> supplier3 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("t_e;\"UOjN9[qqXFJ-5", supplier3);
      Assert.isBlankChar((-2697));
      Assert.isBlankChar('f');
      Assert.isBlankChar('f');
      Assert.notBlank("t_e;\"UOjN9[qqXFJ-5", "Q&|UJ{Kgq");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Assert.notBlank("%/?o", "[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("E");
      Assert.notBlank("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank", "9");
      Assert.notBlank("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      Assert.isBlankChar('4');
      Assert.isBlankChar(65303);
      Integer integer0 = new Integer(65303);
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("%/?o", supplier0);
      Assert.notBlank("%/?o", "[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notNull((Object) "%/?o", supplier1);
      Assert.notBlank("E");
      Assert.notBlank("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank", "");
      Assert.notBlank("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      Assert.isBlankChar('4');
      Assert.isBlankChar(65279);
      Integer integer0 = new Integer(65279);
      Supplier<Throwable> supplier2 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notNull(integer0, supplier2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(mockThrowable1).when(supplier0).get();
      try { 
        Assert.notNull((Integer) null, supplier0);
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("x|");
      MockThrowable mockThrowable1 = new MockThrowable();
      String string0 = "";
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "x|", (-608));
      mockThrowable1.setOriginForDelegate(stackTraceElement0);
      mockThrowable1.addSuppressed(mockThrowable0);
      mockThrowable1.fillInStackTrace();
      mockThrowable0.addSuppressed(mockThrowable1);
      mockThrowable0.printStackTrace();
      Assert.notNull((Throwable) mockThrowable0);
      Assert.isBlank("x|");
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("x|", supplier0);
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(mockThrowable1).when(supplier1).get();
      try { 
        Assert.notBlank(charBuffer0, supplier1);
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 8234;
      Assert.isBlankChar(8234);
      Integer integer0 = new Integer(8234);
      Assert.notNull(integer0, "5sm;[lB;k[TXgS'");
      Assert.isBlankChar('Y');
      Assert.notBlank("5sm;[lB;k[TXgS'");
      String string0 = "";
      try { 
        Assert.notBlank("", "5sm;[lB;k[TXgS'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5sm;[lB;k[TXgS'
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      try { 
        Assert.notNull((Object) null, supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequence charSequence0 = Assert.notBlank((CharSequence) charBuffer0, "");
      CharSequence charSequence1 = Assert.notBlank(charSequence0);
      Assert.isBlank(charSequence1);
      Integer integer0 = new Integer(1);
      Integer integer1 = Assert.notNull(integer0, "");
      Assert assert0 = new Assert();
      Assert.isBlankChar(1);
      Assert.isBlankChar('o');
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notNull((Object) integer0, supplier0);
      Assert.notNull(integer1);
      CharBuffer charBuffer1 = Assert.notNull(charBuffer0, "");
      Assert.isBlankChar((-1));
      CharBuffer charBuffer2 = Assert.notBlank(charBuffer1);
      Integer integer2 = new Integer(8234);
      Assert.notNull(integer2);
      Assert.isBlank(charBuffer0);
      Assert.isBlankChar((-1));
      Assert.notBlank(charBuffer0, "");
      Assert.isBlank("");
      Assert.isBlankChar('o');
      Assert.isBlank(charBuffer2);
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notNull("H/c)T8$ol:oC%k+", supplier1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Assert.isBlank((CharSequence) null);
      Assert.isBlank((CharSequence) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = 'Y';
      charArray0[2] = 'S';
      charArray0[3] = 'R';
      charArray0[4] = '\"';
      charArray0[5] = 'r';
      charArray0[6] = '@';
      charArray0[7] = '7';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1163), (-1163));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = null;
      try { 
        Assert.notNull((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Assert.isBlankChar(']');
      try { 
        Assert.notNull((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Assert.isBlankChar(0);
      Assert.isBlankChar((-1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Assert.isBlankChar(0);
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notNull((Object) "", supplier0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      charBuffer0.rewind();
      charBuffer0.limit(0);
      Assert.notNull(charBuffer0);
      Assert.notNull(charBuffer0, "");
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      try { 
        Assert.notBlank("", supplier1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Assert.isBlankChar(284);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(284);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Assert.isBlank(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(">K>V(Vj0<J<:yB{|W!s");
      Assert.notNull((Throwable) mockThrowable0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Assert.notNull((Object) "", (Supplier<Throwable>) null);
      Assert.isBlankChar('U');
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Assert.notNull((Object) "[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      Assert.notBlank("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank", "[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Assert.isBlankChar('J');
      MockThrowable mockThrowable0 = new MockThrowable();
      Assert.notNull((Object) mockThrowable0, "_w!n6|");
      Assert assert0 = new Assert();
      Assert.notBlank("qLH\t^vb5Y~Md");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      try { 
        Assert.notBlank((CharSequence) stringBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have text; it must not be null, empty, or blank
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Assert.notNull(integer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Assert.notBlank("wZ$2");
      Assert.isBlank("wZ$2");
      Assert assert0 = new Assert();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "com.axios.core.assertion.Assert";
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("com.axios.core.assertion.Assert", supplier0);
      try { 
        Assert.notBlank((CharBuffer) null, "YmKko>~x,@(e;ItKH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YmKko>~x,@(e;ItKH
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        Assert.notBlank((CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have text; it must not be null, empty, or blank
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Assert.notBlank("PME>:;lPTf_HGQU~c", "");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = Assert.notNull(object0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Assert.isBlankChar(8199);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Assert.notNull("k@Om`wfG^I");
      Assert assert0 = new Assert();
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("k@Om`wfG^I", supplier0);
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notNull(object1);
      Supplier<Throwable> supplier2 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("t_e;\"UOjN9[qqXFJ-5", supplier2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Assert.isBlankChar('f');
      Assert.isBlankChar('f');
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = Assert.notBlank("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank", "");
      assertEquals("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank", string0);
      assertNotNull(string0);
      
      String string1 = Assert.notBlank("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      assertEquals("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = Assert.isBlankChar(65279);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = (MockThrowable)Assert.notNull((Throwable) mockThrowable0);
      assertSame(mockThrowable0, mockThrowable1);
      assertSame(mockThrowable1, mockThrowable0);
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable1.toString());
      assertNotNull(mockThrowable1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = Assert.notNull(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      boolean boolean0 = Assert.isBlankChar(8234);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Assert assert0 = new Assert();
      assertNotNull(assert0);
      
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Throwable> supplier2 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = Assert.isBlankChar(1952);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = Assert.isBlankChar('f');
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      boolean boolean4 = Assert.isBlankChar('f');
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Assert assert0 = new Assert();
      assertNotNull(assert0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = Assert.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = "Y";
      Assert assert0 = new Assert();
      assertNotNull(assert0);
      
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      try { 
        Assert.notBlank((String) null, supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "";
      try { 
        Assert.notNull((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = Assert.notBlank(" 2,F7v");
      assertEquals(" 2,F7v", string0);
      assertNotNull(string0);
      
      String string1 = "";
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      try { 
        Assert.notBlank("", supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1969;
      CharBuffer charBuffer0 = CharBuffer.allocate(1969);
      try { 
        Assert.notBlank((CharSequence) charBuffer0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer((-425));
      boolean boolean0 = Assert.isBlank("[Assertion failed] - this argument is required; it must not be null");
      assertFalse(boolean0);
  }
}
