/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 05:11:55 GMT 2024
 */

package com.axios.core.tool.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.tool.file.MoveVisitor;
import java.nio.file.CopyOption;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MoveVisitor_ESTest extends MoveVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      MoveVisitor moveVisitor0 = new MoveVisitor((Path) null, path0, (CopyOption[]) null);
      // Undeclared exception!
      try { 
        moveVisitor0.visitFile(path0, basicFileAttributes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.file.MoveVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile((String) null, "");
      Path path0 = mockFile0.toPath();
      MoveVisitor moveVisitor0 = new MoveVisitor(path0, path0, copyOptionArray0);
      MockFile mockFile1 = new MockFile(mockFile0, "M");
      Path path1 = mockFile1.toPath();
      // Undeclared exception!
      try { 
        moveVisitor0.visitFile(path1, basicFileAttributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      MoveVisitor moveVisitor0 = new MoveVisitor(path0, path0, (CopyOption[]) null);
      // Undeclared exception!
      try { 
        moveVisitor0.preVisitDirectory((Path) null, basicFileAttributes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      MoveVisitor moveVisitor0 = new MoveVisitor(path0, path0, copyOptionArray0);
      MockFile mockFile1 = new MockFile("", "H*SmX2");
      Path path1 = mockFile1.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        moveVisitor0.preVisitDirectory(path1, basicFileAttributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CopyOption[] copyOptionArray0 = new CopyOption[0];
      MoveVisitor moveVisitor0 = null;
      try {
        moveVisitor0 = new MoveVisitor((Path) null, (Path) null, copyOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("");
          Path path0 = mockFile0.toPath();
          MoveVisitor moveVisitor0 = new MoveVisitor(path0, path0, (CopyOption[]) null);
          BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
          MockFile mockFile1 = new MockFile("4|sEh$eL>OtbLEYBP2~&");
          Path path1 = mockFile1.toPath();
          // Undeclared exception!
          try { 
            moveVisitor0.preVisitDirectory(path1, basicFileAttributes0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"4|sEh$eL>OtbLEYBP2~&\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // com.axios.core.tool.file.MoveVisitor.preVisitDirectory(MoveVisitor.java:42)
             // sun.reflect.GeneratedMethodAccessor95.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      CopyOption[] copyOptionArray0 = new CopyOption[3];
      MoveVisitor moveVisitor0 = new MoveVisitor(path0, path0, copyOptionArray0);
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult0 = moveVisitor0.preVisitDirectory(path0, basicFileAttributes0);
      BasicFileAttributes basicFileAttributes1 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult1 = moveVisitor0.preVisitDirectory(path0, basicFileAttributes1);
      assertSame(fileVisitResult1, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F4kY/zH/v@57]N", "F4kY/zH/v@57]N");
      Path path0 = mockFile0.toPath();
      CopyOption[] copyOptionArray0 = new CopyOption[9];
      MoveVisitor moveVisitor0 = new MoveVisitor(path0, path0, copyOptionArray0);
  }
}
