/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:16:12 GMT 2024
 */

package com.axios.core.tool.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.tool.text.StrJoiner;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLTimeoutException;
import java.util.ArrayDeque;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Stack;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrJoiner_ESTest extends StrJoiner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
      StrJoiner strJoiner0 = StrJoiner.of((CharSequence) charBuffer1, (CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertNotNull(strJoiner0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StrJoiner strJoiner0 = new StrJoiner((CharSequence) null);
      Function<String, String> function0 = Function.identity();
      String[] stringArray0 = new String[9];
      StrJoiner strJoiner1 = strJoiner0.append(stringArray0, (Function<String, ? extends CharSequence>) function0);
      assertSame(strJoiner1, strJoiner0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      StrJoiner strJoiner0 = new StrJoiner(charBuffer0);
      StrJoiner strJoiner1 = strJoiner0.append((CharSequence) charBuffer0, 0, 0);
      assertSame(strJoiner1, strJoiner0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrJoiner.of((StrJoiner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.text.StrJoiner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StrJoiner strJoiner0 = new StrJoiner(stringBuffer0);
      StrJoiner strJoiner1 = strJoiner0.setPrefix(stringBuffer0);
      StrJoiner strJoiner2 = strJoiner0.setPrefix(stringBuffer0);
      strJoiner0.setDelimiter(stringBuffer0);
      StrJoiner strJoiner3 = strJoiner1.setWrapElement(true);
      strJoiner3.append('*');
      StrJoiner.of((CharSequence) stringBuffer0, (CharSequence) stringBuffer0, (CharSequence) stringBuffer0);
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      StrJoiner strJoiner4 = strJoiner1.append(iterator0);
      assertSame(strJoiner4, strJoiner2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrJoiner strJoiner0 = new StrJoiner((CharSequence) null);
      // Undeclared exception!
      try { 
        strJoiner0.append((CharSequence) null, 410, 410);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.text.StrJoiner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StrJoiner strJoiner0 = new StrJoiner(charBuffer0);
      // Undeclared exception!
      try { 
        strJoiner0.append((CharSequence) charBuffer0, (-106), (-27));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      StrJoiner strJoiner0 = new StrJoiner(charBuffer0, charBuffer1);
      StrJoiner strJoiner1 = strJoiner0.append((CharSequence) charBuffer1);
      // Undeclared exception!
      try { 
        strJoiner1.append('P');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrJoiner strJoiner0 = StrJoiner.of((CharSequence) null);
      StrJoiner strJoiner1 = strJoiner0.append((CharSequence) null);
      assertSame(strJoiner1, strJoiner0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrJoiner strJoiner0 = new StrJoiner((CharSequence) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      StrJoiner strJoiner1 = strJoiner0.append(iterator0, (Function<Object, ? extends CharSequence>) null);
      assertSame(strJoiner0, strJoiner1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StrJoiner strJoiner0 = new StrJoiner((CharSequence) null, (CharSequence) null, (CharSequence) null);
      StrJoiner strJoiner1 = strJoiner0.append((Object) null);
      assertSame(strJoiner0, strJoiner1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      StrJoiner strJoiner0 = new StrJoiner(charBuffer0, charBuffer0, charBuffer0, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 2, 2);
      StrJoiner strJoiner0 = new StrJoiner(stringWriter0, charBuffer0, charBuffer0, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3780);
      StrJoiner strJoiner0 = new StrJoiner(charBuffer0);
      String string0 = strJoiner0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StrJoiner strJoiner0 = new StrJoiner(charBuffer0);
      strJoiner0.append('-');
      String string0 = strJoiner0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StrJoiner strJoiner0 = new StrJoiner(charBuffer0, charBuffer0, charBuffer0);
      strJoiner0.setWrapElement(true);
      StrJoiner strJoiner1 = strJoiner0.append((CharSequence) charBuffer0);
      assertSame(strJoiner1, strJoiner0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrJoiner strJoiner0 = new StrJoiner((CharSequence) null);
      StrJoiner.NullMode strJoiner_NullMode0 = StrJoiner.NullMode.IGNORE;
      StrJoiner strJoiner1 = strJoiner0.setNullMode(strJoiner_NullMode0);
      StrJoiner strJoiner2 = strJoiner0.append((CharSequence) null);
      assertSame(strJoiner2, strJoiner1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrJoiner strJoiner0 = new StrJoiner((CharSequence) null, (CharSequence) null, (CharSequence) null);
      Iterator<BatchUpdateException> iterator0 = (Iterator<BatchUpdateException>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      // Undeclared exception!
      try { 
        strJoiner0.append(iterator0, (Function<BatchUpdateException, ? extends CharSequence>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.text.StrJoiner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StrJoiner strJoiner0 = new StrJoiner(charBuffer0, charBuffer0, charBuffer0);
      StrJoiner strJoiner1 = strJoiner0.append((Iterator<SQLTimeoutException>) null);
      assertSame(strJoiner1, strJoiner0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      StrJoiner strJoiner0 = StrJoiner.of((CharSequence) stringBuffer0, (CharSequence) stringBuffer0, (CharSequence) charBuffer0);
      StrJoiner strJoiner1 = strJoiner0.append((SQLIntegrityConstraintViolationException[]) null);
      assertSame(strJoiner1, strJoiner0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StrJoiner strJoiner0 = new StrJoiner(charBuffer0);
      Stack<SQLDataException>[] stackArray0 = (Stack<SQLDataException>[]) Array.newInstance(Stack.class, 9);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      stackArray0[0] = stack0;
      StrJoiner strJoiner1 = strJoiner0.append(stackArray0);
      assertSame(strJoiner1, strJoiner0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3780);
      StrJoiner strJoiner0 = new StrJoiner(charBuffer0);
      // Undeclared exception!
      try { 
        strJoiner0.append((CharSequence) "Y87m@4d", 2551, (-293));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3780);
      StrJoiner strJoiner0 = new StrJoiner(charBuffer0);
      StrJoiner strJoiner1 = StrJoiner.of(strJoiner0);
      assertNotSame(strJoiner1, strJoiner0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StrJoiner strJoiner0 = new StrJoiner((CharSequence) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(linkedList0);
      Function<String, String> function0 = Function.identity();
      StrJoiner strJoiner1 = strJoiner0.append((Iterable<String>) arrayDeque0, (Function<String, ? extends CharSequence>) function0);
      assertSame(strJoiner1, strJoiner0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StrJoiner strJoiner0 = StrJoiner.of((CharSequence) "");
      StrJoiner strJoiner1 = strJoiner0.setWrapElement(true);
      StrJoiner strJoiner2 = strJoiner1.append((Object) "");
      assertSame(strJoiner2, strJoiner1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3780);
      StrJoiner strJoiner0 = StrJoiner.of((CharSequence) charBuffer0, (CharSequence) charBuffer0, (CharSequence) "Y87m@4d");
      StrJoiner strJoiner1 = strJoiner0.append('|');
      assertSame(strJoiner0, strJoiner1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      StrJoiner strJoiner0 = new StrJoiner((Appendable) null, charBuffer0, charBuffer0, charBuffer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        strJoiner0.append((String[]) null, (Function<String, ? extends CharSequence>) unaryOperator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3780);
      StrJoiner strJoiner0 = new StrJoiner(charBuffer0);
      StrJoiner strJoiner1 = strJoiner0.setEmptyResult("Y87m@4d");
      assertSame(strJoiner1, strJoiner0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3780);
      StrJoiner strJoiner0 = new StrJoiner(charBuffer0);
      StrJoiner strJoiner1 = strJoiner0.setSuffix(charBuffer0);
      assertSame(strJoiner0, strJoiner1);
  }
}
