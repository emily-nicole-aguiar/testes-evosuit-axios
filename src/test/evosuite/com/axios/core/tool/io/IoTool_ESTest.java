/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 04:49:26 GMT 2024
 */

package com.axios.core.tool.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.tool.io.FastByteArrayOutputStream;
import com.axios.core.tool.io.IoTool;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IoTool_ESTest extends IoTool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte) (-92), (byte) (-53), (byte)0, (byte)51, (byte)40}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      OutputStream outputStream0 = null;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      assertNotNull(filterOutputStream0);
      
      // Undeclared exception!
      try { 
        IoTool.copy((InputStream) byteArrayInputStream0, (OutputStream) filterOutputStream0, (int) (byte)51, (long) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.axios.exception.IORuntimeException");
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertTrue(mockFile0.isFile());
      assertEquals("com.axios.exception.IORuntimeException", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("com.axios.exception.IORuntimeException", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      MockFile mockFile1 = new MockFile("com.axios.exception.IORuntimeException");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile0.isFile());
      assertEquals("com.axios.exception.IORuntimeException", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("com.axios.exception.IORuntimeException", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotSame(mockFile0, mockFile1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockPrintStream0);
      
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.println("com.axios.exception.IORuntimeException");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("com.axios.exception.IORuntimeException", mockFile1.getName());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertEquals(39L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals("com.axios.exception.IORuntimeException", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertNotSame(mockFile1, mockFile0);
      
      byteArray0[0] = (byte) (-37);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/emily.aguiar/axios");
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      IoTool.write((OutputStream) mockPrintStream0, true, byteArray0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("com.axios.exception.IORuntimeException", mockFile1.getName());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertEquals(40L, mockFile1.length());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals("com.axios.exception.IORuntimeException", mockFile1.toString());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.isAbsolute());
      assertNotSame(mockFile1, mockFile0);
      assertArrayEquals(new byte[] {(byte) (-37)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string0 = "";
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      Object[] objectArray0 = new Object[5];
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertNotNull(mockFileInputStream0);
      
      byte[] byteArray1 = IoTool.readBytes(mockFileInputStream0, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("com.axios.exception.IORuntimeException", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("com.axios.exception.IORuntimeException", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(40L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(mockFile0, mockFile1);
      assertEquals(40, byteArray1.length);
      
      MockFileInputStream mockFileInputStream1 = null;
      try {
        mockFileInputStream1 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.write(11);
      assertEquals(1, pipedInputStream0.available());
      
      // Undeclared exception!
      IoTool.copy((InputStream) dataInputStream0, (OutputStream) pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IoTool ioTool0 = new IoTool();
      assertNotNull(ioTool0);
      
      MockFile mockFile0 = new MockFile("com.axios.core.tool.io.FastByteArrayOutputStream");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotNull(bufferedOutputStream0);
      
      mockPrintStream0.print((Object) bufferedOutputStream0);
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(37L, mockFile0.length());
      
      boolean boolean0 = mockFile0.delete();
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(boolean0);
      
      boolean boolean1 = mockFile0.createNewFile();
      assertTrue(boolean1 == boolean0);
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(boolean1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("com.axios.core.tool.io.FastByteArrayOutputStream");
      assertNotNull(mockFileWriter0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte)0;
      IoTool.write((OutputStream) mockPrintStream0, false, byteArray0);
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(46L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)1, (byte)0, (byte)0, (byte) (-1), (byte)1, (byte) (-98), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("com.axios.core.tool.io.FastByteArrayOutputStream");
      assertNotNull(mockFileInputStream0);
      
      FastByteArrayOutputStream fastByteArrayOutputStream0 = IoTool.read((InputStream) mockFileInputStream0, false);
      assertEquals((-2), mockFileInputStream0.available());
      assertNotNull(fastByteArrayOutputStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "com.axios.core.tool.io.FastByteArrayOutputStream");
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(94L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      long long0 = IoTool.copy((InputStream) mockFileInputStream0, (OutputStream) printStream0, 65279, (-2217L));
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(1175L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("com.axios.core.tool.io.FastByteArrayOutputStream", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals((-1), mockFileInputStream0.available());
      assertEquals(1081L, long0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      FastByteArrayOutputStream fastByteArrayOutputStream1 = IoTool.read((InputStream) mockFileInputStream0, false);
      assertFalse(fastByteArrayOutputStream1.equals((Object)fastByteArrayOutputStream0));
      assertEquals((-2), mockFileInputStream0.available());
      assertNotNull(fastByteArrayOutputStream1);
      assertNotSame(fastByteArrayOutputStream1, fastByteArrayOutputStream0);
      
      // Undeclared exception!
      try { 
        IoTool.read((Reader) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IoTool ioTool0 = new IoTool();
      assertNotNull(ioTool0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        IoTool.readBytes(dataInputStream0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byteArrayOutputStream0.flush();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      OutputStreamWriter outputStreamWriter0 = IoTool.getWriter(byteArrayOutputStream0, (Charset) null);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      try { 
        IoTool.read((InputStream) mockFileInputStream0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IoTool.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IoTool ioTool0 = new IoTool();
      assertNotNull(ioTool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)96, (byte) (-21));
      assertEquals((-89), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)96, (byte)83, (byte) (-1), (byte) (-21), (byte)110, (byte)87}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals((-89), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)96, (byte)83, (byte) (-1), (byte) (-21), (byte)110, (byte)87}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      FastByteArrayOutputStream fastByteArrayOutputStream0 = IoTool.read((InputStream) dataInputStream0, true);
      assertEquals((-89), byteArrayInputStream0.available());
      assertNotNull(fastByteArrayOutputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)96, (byte)83, (byte) (-1), (byte) (-21), (byte)110, (byte)87}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      BufferedOutputStream bufferedOutputStream0 = IoTool.toBuffered(fastByteArrayOutputStream0);
      assertEquals((-89), byteArrayInputStream0.available());
      assertNotNull(bufferedOutputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)96, (byte)83, (byte) (-1), (byte) (-21), (byte)110, (byte)87}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      BufferedOutputStream bufferedOutputStream1 = IoTool.toBuffered(bufferedOutputStream0);
      assertEquals((-89), byteArrayInputStream0.available());
      assertNotNull(bufferedOutputStream1);
      assertSame(bufferedOutputStream0, bufferedOutputStream1);
      assertSame(bufferedOutputStream1, bufferedOutputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)96, (byte)83, (byte) (-1), (byte) (-21), (byte)110, (byte)87}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long long0 = IoTool.copy((InputStream) byteArrayInputStream0, (OutputStream) bufferedOutputStream1);
      assertEquals((-89), byteArrayInputStream0.available());
      assertEquals(0L, long0);
      assertSame(bufferedOutputStream0, bufferedOutputStream1);
      assertSame(bufferedOutputStream1, bufferedOutputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)96, (byte)83, (byte) (-1), (byte) (-21), (byte)110, (byte)87}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long long1 = IoTool.copy((InputStream) byteArrayInputStream0, (OutputStream) bufferedOutputStream1, (int) (byte) (-1), (long) (byte)110);
      assertTrue(long1 == long0);
      assertEquals((-89), byteArrayInputStream0.available());
      assertEquals(0L, long1);
      assertSame(bufferedOutputStream0, bufferedOutputStream1);
      assertSame(bufferedOutputStream1, bufferedOutputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)96, (byte)83, (byte) (-1), (byte) (-21), (byte)110, (byte)87}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-13);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte)40, (byte)0, (byte)61, (byte) (-13)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byte[] byteArray1 = IoTool.readBytes(byteArrayInputStream0, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)63, (byte)40, (byte)0, (byte)61, (byte) (-13)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)21;
      int int0 = 18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 18);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)10, (byte)21}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string0 = "5M";
      MockFile mockFile0 = new MockFile("5M");
      assertNotNull(mockFile0);
      
      byteArrayInputStream0.close();
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)10, (byte)21}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      // Undeclared exception!
      try { 
        IoTool.copy((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      Charset charset0 = null;
      BufferedReader bufferedReader0 = IoTool.getReader(pushbackInputStream0, (Charset) null);
      assertNotNull(bufferedReader0);
      
      boolean boolean0 = false;
      try { 
        IoTool.read((Reader) bufferedReader0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-110);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-25), 1024);
      assertEquals(32, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)0, (byte)0, (byte) (-24), (byte)1, (byte)59, (byte) (-110)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        IoTool.readBytes(byteArrayInputStream0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IoTool ioTool0 = new IoTool();
      assertNotNull(ioTool0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      BufferedReader bufferedReader0 = IoTool.getReader((InputStream) null, charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNull(bufferedReader0);
      
      // Undeclared exception!
      try { 
        IoTool.read((InputStream) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream is null !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("i**v9:Zx[9NO(y)(q_");
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(19, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=19 cap=20]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(20, byteBuffer0.capacity());
      assertEquals(19, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      BufferedReader bufferedReader0 = IoTool.getReader((InputStream) null, charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNull(bufferedReader0);
      
      IoTool ioTool0 = new IoTool();
      assertNotNull(ioTool0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      BufferedReader bufferedReader0 = IoTool.getReader(pipedInputStream0, charset0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(bufferedReader0);
      
      try { 
        IoTool.read((Reader) bufferedReader0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      MockFile mockFile0 = new MockFile("OutputStream is null !", "File length is [");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "4^");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("4^", "4^", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      BufferedOutputStream bufferedOutputStream0 = IoTool.toBuffered(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) pipedOutputStream0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) pipedOutputStream0;
      try { 
        IoTool.write((OutputStream) pipedOutputStream0, charset0, false, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputStream inputStream0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        IoTool.readBytes((InputStream) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream is null !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) charset0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) byteArrayOutputStream0;
      IoTool.write((OutputStream) byteArrayOutputStream0, charset0, true, objectArray0);
      assertEquals(227, byteArrayOutputStream0.size());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(6, objectArray0.length);
      
      OutputStreamWriter outputStreamWriter0 = IoTool.getWriter(byteArrayOutputStream0, charset0);
      assertEquals(227, byteArrayOutputStream0.size());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(outputStreamWriter0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        IoTool.copy((InputStream) pipedInputStream0, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        IoTool.toBuffered((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OutputStream must be not null!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) charset0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      try { 
        IoTool.write((OutputStream) pipedOutputStream0, charset0, true, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(381);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        IoTool.read((InputStream) pipedInputStream0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IoTool ioTool0 = new IoTool();
      assertNotNull(ioTool0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      // Undeclared exception!
      try { 
        IoTool.copy((InputStream) null, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream is null !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.canEncode());
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("(&[|\"#VM^ g");
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(12, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=11 cap=12]", byteBuffer0.toString());
      assertEquals(11, byteBuffer0.limit());
      assertEquals(11, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertNotNull(byteBuffer0);
      assertSame(charset0, charset1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) charset0;
      // Undeclared exception!
      try { 
        IoTool.write((OutputStream) null, charset0, false, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IoTool ioTool0 = new IoTool();
      assertNotNull(ioTool0);
      
      File file0 = MockFile.createTempFile("9ZClVFT/9M.}K&&OFm", "w+qCP");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9M.}K&&OFm0w+qCP", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9ZClVFT/9M.}K&&OFm0w+qCP", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9ZClVFT", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "9ZClVFT/9M.}K&&OFm";
      objectArray0[1] = (Object) ioTool0;
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "w+qCP";
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9M.}K&&OFm0w+qCP", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9ZClVFT/9M.}K&&OFm0w+qCP", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9ZClVFT", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(7, objectArray0.length);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9M.}K&&OFm0w+qCP", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9ZClVFT/9M.}K&&OFm0w+qCP", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9ZClVFT", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertNotNull(dataOutputStream0);
      assertEquals(7, objectArray0.length);
      
      IoTool.close(dataOutputStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("9M.}K&&OFm0w+qCP", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/9ZClVFT/9M.}K&&OFm0w+qCP", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/9ZClVFT", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(7, objectArray0.length);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = IoTool.toBuffered(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream1 = IoTool.toBuffered(bufferedOutputStream0);
      assertNotNull(bufferedOutputStream1);
      assertSame(bufferedOutputStream1, bufferedOutputStream0);
      assertSame(bufferedOutputStream0, bufferedOutputStream1);
      
      bufferedOutputStream0.write(846);
      assertSame(bufferedOutputStream0, bufferedOutputStream1);
      
      Enumeration<FileInputStream> enumeration0 = (Enumeration<FileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      try { 
        IoTool.copy((InputStream) sequenceInputStream0, (OutputStream) bufferedOutputStream1, (-665), 5002L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.axios.core.tool.io.StreamCopier", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 18);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)5, (byte)10, (byte)21}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      MockFile mockFile0 = new MockFile("5M");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      // Undeclared exception!
      try { 
        IoTool.copy((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream1, 18, (long) 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      // Undeclared exception!
      try { 
        IoTool.write((OutputStream) null, true, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      OutputStreamWriter outputStreamWriter0 = IoTool.getWriter((OutputStream) null, charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNull(outputStreamWriter0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)4}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2415);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)4}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      FastByteArrayOutputStream fastByteArrayOutputStream0 = IoTool.read((InputStream) bufferedInputStream0, false);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(fastByteArrayOutputStream0);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)4}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      BufferedReader bufferedReader0 = IoTool.getReader(pipedInputStream0, charset0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(bufferedReader0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bufferedReader0;
      objectArray0[1] = (Object) bufferedReader0;
      IoTool.write((OutputStream) pipedOutputStream0, charset0, true, objectArray0);
      assertEquals(66, pipedInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      // Undeclared exception!
      try { 
        IoTool.write((OutputStream) byteArrayOutputStream0, charset0, false, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        IoTool.write((OutputStream) pipedOutputStream0, false, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        IoTool.write((OutputStream) null, true, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1944);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)67, (byte) (-32), (byte)0, (byte)52, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(711);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(3, objectArray0.length);
      
      long long0 = IoTool.copy((InputStream) byteArrayInputStream0, (OutputStream) printStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("C\uFFFD\u00004\u0000", byteArrayOutputStream0.toString());
      assertEquals(5, byteArrayOutputStream0.size());
      assertEquals(5L, long0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertArrayEquals(new byte[] {(byte)67, (byte) (-32), (byte)0, (byte)52, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(3, objectArray0.length);
      
      long long1 = IoTool.copy((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0, (-4027), 311L);
      assertFalse(long1 == long0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("C\uFFFD\u00004\u0000", byteArrayOutputStream0.toString());
      assertEquals(5, byteArrayOutputStream0.size());
      assertEquals(0L, long1);
      assertSame(mockPrintStream0, printStream0);
      assertArrayEquals(new byte[] {(byte)67, (byte) (-32), (byte)0, (byte)52, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      File file0 = MockFile.createTempFile(" n`_+Wr(*/(", "");
      assertEquals("(0", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/ n`_+Wr(*/(0", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/ n`_+Wr(*", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = IoTool.toBuffered(mockFileOutputStream0);
      assertEquals("(0", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/ n`_+Wr(*/(0", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/ n`_+Wr(*", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(bufferedOutputStream0);
      
      IoTool ioTool0 = new IoTool();
      assertNotNull(ioTool0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      BufferedReader bufferedReader0 = IoTool.getReader(mockFileInputStream0, (Charset) null);
      assertEquals("(0", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/ n`_+Wr(*/(0", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/ n`_+Wr(*", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, mockFileInputStream0.available());
      assertNotNull(bufferedReader0);
      
      String string0 = IoTool.read((Reader) bufferedReader0, false);
      assertEquals("(0", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/ n`_+Wr(*/(0", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/ n`_+Wr(*", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals((-1), mockFileInputStream0.available());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int0 = (-2331);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte) (-54);
      byteArray0[8] = (byte)40;
      pipedOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)78, (byte)78, (byte) (-1), (byte)1, (byte) (-32), (byte)69, (byte) (-54), (byte)40}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      IoTool.copy((InputStream) pipedInputStream0, (OutputStream) pipedOutputStream0, (-2331), 9223372036854775730L);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IoTool ioTool0 = new IoTool();
      assertNotNull(ioTool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)96, (byte) (-5), (byte)78, (byte) (-75), (byte) (-1)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, (InputStream) null);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)96, (byte) (-5), (byte)78, (byte) (-75), (byte) (-1)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        IoTool.read((InputStream) sequenceInputStream0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "Q2U#(9\"\"EZT.uR4Y;5";
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        IoTool.copy((InputStream) null, (OutputStream) null, 9, (long) 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream is null !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1965, (byte)0);
      assertEquals((-1960), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte) (-45)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals((-1960), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte) (-45)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      assertEquals((-1960), byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte) (-45)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      assertNotNull(bufferedOutputStream0);
      
      // Undeclared exception!
      try { 
        IoTool.copy((InputStream) bufferedInputStream0, (OutputStream) bufferedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.axios.exception.IORuntimeException");
      mockFile0.deleteOnExit();
      mockFile0.mkdir();
      MockFile mockFile1 = new MockFile("com.axios.exception.IORuntimeException");
      mockFile0.deleteOnExit();
      MockFile.createTempFile("com.axios.exception.IORuntimeException", "com.axios.exception.IORuntimeException");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.axios.exception.IORuntimeException");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.axios.exception.IORuntimeException");
      StringReader stringReader0 = new StringReader("com.axios.exception.IORuntimeException");
      stringReader0.reset();
      IoTool.read((Reader) stringReader0, false);
      Charset.defaultCharset();
      mockFile1.getAbsoluteFile();
      stringReader0.close();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IoTool.readBytes(mockFileInputStream0, false);
      IoTool.read((InputStream) mockFileInputStream0, false);
      IoTool.toBuffered(mockPrintStream0);
      // Undeclared exception!
      try { 
        IoTool.readBytes(mockFileInputStream0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1024);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(",%,s,/QB?IM'k`");
      try { 
        IoTool.copy((InputStream) pushbackInputStream0, (OutputStream) mockPrintStream0, 1024, (long) 1024);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.axios.core.tool.io.StreamCopier", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-70);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = IoTool.readBytes(byteArrayInputStream0, false);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-97), (byte) (-51), (byte)100, (byte) (-70)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IoTool ioTool0 = new IoTool();
      MockFile mockFile0 = new MockFile("com.axios.core.tool.io.FastByteArrayOutputStream");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.toPath();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      mockPrintStream0.print((Object) bufferedOutputStream0);
      mockFile0.delete();
      mockFile0.createNewFile();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("com.axios.core.tool.io.FastByteArrayOutputStream");
      BufferedOutputStream bufferedOutputStream1 = IoTool.toBuffered(bufferedOutputStream0);
      assertSame(bufferedOutputStream1, bufferedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        IoTool.write((OutputStream) null, charset0, false, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.axios.exception.IORuntimeException");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile("com.axios.exception.IORuntimeException");
      mockFile0.deleteOnExit();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.println("com.axios.exception.IORuntimeException");
      byteArray0[0] = (byte) (-37);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.axios.exception.IORuntimeException");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IoTool.write((OutputStream) mockPrintStream0, true, byteArray0);
      StringReader stringReader0 = new StringReader("com.axios.exception.IORuntimeException");
      stringReader0.reset();
      IoTool.read((Reader) stringReader0, false);
      String string0 = "";
      Charset.defaultCharset();
      Object[] objectArray0 = new Object[5];
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      try { 
        IoTool.readBytes(mockFileInputStream0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "E";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E", false);
      Charset.defaultCharset();
      boolean boolean0 = true;
      mockFileOutputStream0.release();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("E");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte)98);
      // Undeclared exception!
      try { 
        IoTool.read((InputStream) byteArrayInputStream0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      pipedInputStream0.markSupported();
      try { 
        IoTool.read((InputStream) pipedInputStream0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IoTool.read((Reader) pipedReader0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("c");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/emily.aguiar/axios");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream0.println(false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeDouble(0.0);
      mockPrintStream0.print(false);
      Charset charset0 = Charset.defaultCharset();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "c";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "c";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) dataOutputStream0;
      IoTool.write((OutputStream) mockPrintStream0, charset0, true, objectArray0);
      IoTool.toBuffered(dataOutputStream0);
      mockPrintStream0.print(true);
      Enumeration<FileInputStream> enumeration0 = (Enumeration<FileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IoTool.readBytes(sequenceInputStream0, false);
      // Undeclared exception!
      try { 
        IoTool.write((OutputStream) mockPrintStream0, false, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.axios.exception.IORuntimeException");
      mockFile0.deleteOnExit();
      mockFile0.mkdir();
      MockFile.createTempFile("com.axios.exception.IORuntimeException", "com.axios.exception.IORuntimeException");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.axios.exception.IORuntimeException");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.axios.exception.IORuntimeException");
      StringReader stringReader0 = new StringReader("com.axios.exception.IORuntimeException");
      stringReader0.reset();
      stringReader0.ready();
      IoTool.read((Reader) stringReader0, true);
      Charset.defaultCharset();
      mockFile0.getAbsoluteFile();
      stringReader0.close();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("com.axios.exception.IORuntimeException");
      IoTool.readBytes(mockFileInputStream0, false);
      mockPrintStream0.println(9223372036854765819L);
      IoTool.read((InputStream) mockFileInputStream0, true);
      IoTool.toBuffered(mockPrintStream0);
      try { 
        IoTool.readBytes(mockFileInputStream0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      BufferedReader bufferedReader0 = IoTool.getReader(pipedInputStream0, charset0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bufferedReader0;
      pipedOutputStream0.close();
      objectArray0[1] = (Object) bufferedReader0;
      try { 
        IoTool.write((OutputStream) pipedOutputStream0, charset0, true, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe closed
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.axios.exception.IORuntimeException");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile("com.axios.exception.IORuntimeException");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      boolean boolean0 = true;
      mockPrintStream0.println("com.axios.exception.IORuntimeException");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/emily.aguiar/axios");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string0 = "";
      Charset charset0 = Charset.defaultCharset();
      Object[] objectArray0 = new Object[5];
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IoTool.readBytes(mockFileInputStream0, true);
      IoTool.write((OutputStream) mockPrintStream0, charset0, true, objectArray0);
      IoTool.write((OutputStream) mockPrintStream0, charset0, true, objectArray0);
      try { 
        IoTool.readBytes(mockFileInputStream0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      File file0 = MockFile.createTempFile(" n`_+Wr(*/(", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      IoTool.toBuffered(mockFileOutputStream0);
      IoTool ioTool0 = new IoTool();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Charset.defaultCharset();
      PipedReader pipedReader0 = new PipedReader(66);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 66);
      try { 
        IoTool.read((Reader) lineNumberReader0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.axios.core.tool.io.IoTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.skip(0L);
      byteArrayInputStream0.reset();
      FastByteArrayOutputStream fastByteArrayOutputStream0 = IoTool.read((InputStream) byteArrayInputStream0, true);
      byteArrayInputStream0.skip(1551L);
      OutputStreamWriter outputStreamWriter0 = IoTool.getWriter(fastByteArrayOutputStream0, (Charset) null);
      IoTool.copy((InputStream) byteArrayInputStream0, (OutputStream) fastByteArrayOutputStream0);
      byte[] byteArray1 = IoTool.readBytes(byteArrayInputStream0, false);
      IoTool.copy((InputStream) byteArrayInputStream0, (OutputStream) fastByteArrayOutputStream0, (int) (byte)0, 0L);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) outputStreamWriter0;
      objectArray0[2] = (Object) (byte)87;
      objectArray0[3] = (Object) fastByteArrayOutputStream0;
      Object object0 = new Object();
      objectArray0[5] = (Object) (byte)0;
      IoTool.write((OutputStream) fastByteArrayOutputStream0, (Charset) null, false, objectArray0);
      IoTool.getReader(byteArrayInputStream0, (Charset) null);
      IoTool.copy((InputStream) byteArrayInputStream0, (OutputStream) fastByteArrayOutputStream0, (int) (byte)87, (long) (byte)87);
      IoTool.write((OutputStream) fastByteArrayOutputStream0, false, byteArray1);
      byteArrayInputStream0.skip(0L);
      IoTool.write((OutputStream) fastByteArrayOutputStream0, false, byteArray1);
      IoTool.toBuffered(fastByteArrayOutputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -5
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }
}
