/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 05:08:31 GMT 2024
 */

package com.axios.core.tool.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.tool.text.ArrayIter;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayIter_ESTest extends ArrayIter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "z=^.>Ga;u=";
      ArrayIter<String> arrayIter0 = new ArrayIter<String>(stringArray0);
      Object object0 = arrayIter0.next();
      assertEquals("z=^.>Ga;u=", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayIter<String> arrayIter0 = null;
      try {
        arrayIter0 = new ArrayIter<String>((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayIter<Object> arrayIter0 = null;
      try {
        arrayIter0 = new ArrayIter<Object>((Object) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayIter<Integer> arrayIter0 = null;
      try {
        arrayIter0 = new ArrayIter<Integer>("z=^.>Ga;u=", (-911), (-1364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayIter<String> arrayIter0 = null;
      try {
        arrayIter0 = new ArrayIter<String>((Object) null, (-178));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-48));
      integerArray0[0] = integer0;
      ArrayIter<Integer> arrayIter0 = null;
      try {
        arrayIter0 = new ArrayIter<Integer>(integer0, (int) integerArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayIter<Object> arrayIter0 = new ArrayIter<Object>(objectArray0);
      ArrayIter<Integer> arrayIter1 = null;
      try {
        arrayIter1 = new ArrayIter<Integer>(arrayIter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ArrayIter<String> arrayIter0 = new ArrayIter<String>(stringArray0);
      boolean boolean0 = arrayIter0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayIter<Object> arrayIter0 = new ArrayIter<Object>(objectArray0);
      Object object0 = arrayIter0.getArray();
      ArrayIter<Object> arrayIter1 = new ArrayIter<Object>(object0, 1746, 1746);
      assertFalse(arrayIter1.hasNext());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ArrayIter<String> arrayIter0 = new ArrayIter<String>(stringArray0);
      Object object0 = arrayIter0.getArray();
      ArrayIter<Object> arrayIter1 = new ArrayIter<Object>(object0, (-3722), (-3722));
      assertFalse(arrayIter1.hasNext());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ArrayIter<String> arrayIter0 = new ArrayIter<String>(stringArray0);
      Object object0 = arrayIter0.getArray();
      ArrayIter<Object> arrayIter1 = new ArrayIter<Object>(object0, 1);
      assertTrue(arrayIter1.hasNext());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayIter<Object> arrayIter0 = new ArrayIter<Object>(objectArray0);
      arrayIter0.next();
      // Undeclared exception!
      try { 
        arrayIter0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.text.ArrayIter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayIter<Object> arrayIter0 = new ArrayIter<Object>(objectArray0);
      boolean boolean0 = arrayIter0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1);
      ArrayIter<Integer> arrayIter0 = new ArrayIter<Integer>(integerArray0);
      Object object0 = arrayIter0.getArray();
      ArrayIter<Object> arrayIter1 = new ArrayIter<Object>(object0, (-2919), (int) integer0);
      assertTrue(arrayIter1.hasNext());
      assertTrue(arrayIter0.hasNext());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ArrayIter<Integer> arrayIter0 = new ArrayIter<Integer>(integerArray0);
      Object object0 = arrayIter0.getArray();
      ArrayIter<Integer> arrayIter1 = new ArrayIter<Integer>(object0, 0, 1585);
      assertTrue(arrayIter0.hasNext());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayIter<Object> arrayIter0 = new ArrayIter<Object>(objectArray0);
      arrayIter0.reset();
      assertFalse(arrayIter0.hasNext());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ArrayIter<String> arrayIter0 = new ArrayIter<String>(stringArray0);
      Object object0 = arrayIter0.getArray();
      ArrayIter<Object> arrayIter1 = new ArrayIter<Object>(object0);
      // Undeclared exception!
      try { 
        arrayIter1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() method is not supported
         //
         verifyException("com.axios.core.tool.text.ArrayIter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayIter<Object> arrayIter0 = null;
      try {
        arrayIter0 = new ArrayIter<Object>((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
