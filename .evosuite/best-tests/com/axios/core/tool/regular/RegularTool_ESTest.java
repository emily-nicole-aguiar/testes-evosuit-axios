/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:43:53 GMT 2024
 */

package com.axios.core.tool.regular;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.tool.regular.RegularTool;
import java.nio.CharBuffer;
import java.util.function.Consumer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegularTool_ESTest extends RegularTool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(":9|Wdl;i}AuY", 0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":9|Wdl;i}AuY");
      String string0 = RegularTool.get(pattern0, (CharSequence) charBuffer0, 0);
      assertEquals(":9", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      String string0 = RegularTool.get(pattern0, (CharSequence) "", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      // Undeclared exception!
      try { 
        RegularTool.get(pattern0, (CharSequence) "", 1864);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 1864
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("W]jefFn?}#U", 843);
      Consumer<Matcher> consumer0 = (Consumer<Matcher>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      RegularTool.get(pattern0, (CharSequence) "Eml.", consumer0);
      assertEquals(843, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("Eml.");
      Consumer<Matcher> consumer0 = (Consumer<Matcher>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      RegularTool.get(pattern0, (CharSequence) "Eml.", consumer0);
      assertEquals("Eml.", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("Eml.");
      RegularTool.get(pattern0, (CharSequence) "", (Consumer<Matcher>) null);
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Consumer<Matcher> consumer0 = (Consumer<Matcher>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      RegularTool.get((Pattern) null, (CharSequence) charBuffer0, consumer0);
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("Eml.");
      Consumer<Matcher> consumer0 = (Consumer<Matcher>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      RegularTool.get(pattern0, (CharSequence) null, consumer0);
      assertEquals("Eml.", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("Eml.");
      String string0 = RegularTool.get(pattern0, (CharSequence) "W]jefFn?}#U", 843);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      String string0 = RegularTool.get((Pattern) null, (CharSequence) charBuffer0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RegularTool.get((Pattern) null, (CharSequence) null, (-688));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegularTool regularTool0 = new RegularTool();
  }
}
