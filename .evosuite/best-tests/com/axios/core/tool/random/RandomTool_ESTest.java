/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:50:20 GMT 2024
 */

package com.axios.core.tool.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.tool.random.RandomTool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomTool_ESTest extends RandomTool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomTool randomTool0 = new RandomTool();
      assertNotNull(randomTool0);
      
      String string0 = RandomTool.randomString(4232);
      assertNotNull(string0);
      
      int int0 = 811;
      String string1 = RandomTool.randomString("0123456789", 811);
      assertEquals("6710577377132836170935237290744103500353963738370228403101224882433940014110753982588250720223546988615161543418154632071729338472083095921867438411572445285871179576094557498560056836771769446131032957795430465951324885276677648718274102041011817319212270043595356009944624070173261131687163807773000403545618128205129842784794828348902393368117613375742272564984446940203927248265111451899636839378119430633013406875913255447604048496736408749685665447197800122262910877719414591249624197493189048640164174689395108517594190785925360388054398167078752116344051823210414450315649139376599779615892701025532989122609408748623733915395356887742099494960346774576313063040480204142497114914439341862526870680614732150704550495785078517318085449094504424864931943789558088809134660363427832899301277851246041018374", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = RandomTool.randomString(811);
      assertEquals("7nxaen3m72eorbirc202qnpt5v5fb50mo7qw9yz6x90ra9apdfxeqldd3zng8ea40bsrhhb9oiey75c92t2vggl0u5c22iqgmc4bupjdybnwvqjho1eep6x7dpiik7tmjvd0xrwwfqsrsxx628xs8qbv6f452wfu14yhos4klq2wmpocfprbihichzos80aosqoguytb3v32qrn2nre5d88tqo4z22032a0p1liu72pwg2y0a302o5cbu4ggrz5wggxf88p0qqv08irz7qhap9ol7wdq8rx42xdw6hde8v0v1ca3wenuvkywx4t1sfgh80xp8lxqxz1evmbtrzt8jxa6e6u3udynixs1x188s04tu05ogpd9zbh5433opv2jcj7rwo4ijm8a2y1mgfucv0piww9ugb7ztwf0nii53n82q3dll839ctxt3q0upds46gzhrd8liw3u6r84lv9hf140rsw0gdim8qfp6viptm3c1hb3v6zbo2m30cvvxnsg4eahsyhp2bgk8hhcsv6jdvmbf0ft0ds026r5folwjyg97qq2xpek6nc8gwe4184cs958cdpfouqbgvfoo9dlv48cpl9ypvcrdq6byshi7u8bnrbqagv2vsfhkrsmidlb99ez6syjyx77jdnyixb3dzxws9kvb5rm9z2x7fy5kelyx25pvm7y2gf2ccvvh1ay50rupf2d8qa7cf0d0gznnv0w423gzdx88by15yb5gkbu9e7sezg3oa2d0wxq8jvkgbvpompzqjghztzryq78qw0hllmuxata85ym84lhoou", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = RandomTool.randomInt(4232);
      assertEquals(3753, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      RandomTool.randomString("abcdefghijklmnopqrstuvwxyz", 4232);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = RandomTool.randomString(372);
      //  // Unstable assertion: assertEquals("xbg9a0nck036e8gkghl9gyadldpf5efwnoswjhopqg5u82t255knijm8g2e98p1akaixvli9e60vwzdpf73moq30y367qv55rgvxliazxm8rdf7j53de1buzen1qmco6kx0xd1kmq2rrfywhb0rw8183voza0vbnpojtjxnez28d1b5qwtef9n4rgv7qyrh0ftmmhe0a6gzzbsguv6nxjl6gmksq8d76ko7wpizz84d2i7l9t9n68ndb9wrsi2xualh6r0m4jv2ustl0kkvjnydimxn8eawj6ac7t31odknvut1dpnf931853vml2gwooybs5if2f7cevgj5cwgvi0bwx7wrnslyjdsgk71fz4ec0wsp638q", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      String string1 = "abcdefghijklmnopqrstuvwxyz0123456789";
      String string2 = RandomTool.randomString("abcdefghijklmnopqrstuvwxyz0123456789", 372);
      //  // Unstable assertion: assertEquals("uqlcshmun28vnhf4k2y3dz4nashajo2hprkrrw4i4wb6c2558w09oqxa8indeflp86qz7ie75ywhitvk8bahba28fljgyyiqv3phnu16bl2h5w2d3bebnhw0ty9uhunacuyx40lkgykk3339miflb9ffwrh40l145xpgfw0yrk05rb295xbarpy898a3iknnu3vrb0hamvxgh4rls7i2neczsfsaw70k0p76qc5k1p4ys3899yxomvce19mgrcm0pzxs3pj1wr2yew4yvfdbmagf6mhdv11kcwdhgvbqfl9aalgozax4tizz8paz4h34jnvyroyh1evxzv0xi3mcyzp1sozz9kk4t679p3t9zmdkt3m4s40w", string2);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(string2);
      
      String string3 = RandomTool.randomString(3213);
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string3);
      
      String string4 = RandomTool.randomString(3213);
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(string4);
      
      // Undeclared exception!
      RandomTool.randomString(3213);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = RandomTool.randomString("0123456789", 0);
      //  // Unstable assertion: assertEquals("4", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      RandomTool randomTool0 = new RandomTool();
      //  // Unstable assertion: assertNotNull(randomTool0);
      
      String string1 = RandomTool.randomString((String) null, 1171);
      //  // Unstable assertion: assertEquals("", string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      
      int int0 = RandomTool.randomInt(1);
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "V}sd =m)q&y";
      int int0 = (-477);
      // Undeclared exception!
      try { 
        RandomTool.randomString("V}sd =m)q&y", (-477));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomTool randomTool0 = new RandomTool();
      assertNotNull(randomTool0);
      
      String string0 = RandomTool.randomString("abcdefghijklmnopqrstuvwxyz", 2215);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomTool randomTool0 = new RandomTool();
      //  // Unstable assertion: assertNotNull(randomTool0);
      
      String string0 = RandomTool.randomString("0123456789", 0);
      //  // Unstable assertion: assertEquals("0", string0);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RandomTool.randomString(0);
      //  // Unstable assertion: assertEquals("o", string0);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        RandomTool.randomInt(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("java.util.concurrent.ThreadLocalRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomTool.randomString(1003);
      RandomTool.randomString("", 1003);
      RandomTool.randomString(1356);
      RandomTool.randomInt(1519);
      // Undeclared exception!
      try { 
        RandomTool.randomString((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = RandomTool.randomString("", (-3518));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = RandomTool.randomString(1732);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = RandomTool.randomString("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomTool randomTool0 = new RandomTool();
      String string0 = RandomTool.randomString(0);
      //  // Unstable assertion: assertEquals("a", string0);
      
      String string1 = RandomTool.randomString(1);
      //  // Unstable assertion: assertEquals("j", string1);
  }
}
