/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 05:17:45 GMT 2024
 */

package com.axios.core.tool.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.tool.random.RandomTool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomTool_ESTest extends RandomTool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RandomTool randomTool0 = new RandomTool();
      assertNotNull(randomTool0);
      
      RandomTool.randomString(4232);
      int int0 = 811;
      RandomTool.randomString("0123456789", 811);
      RandomTool.randomString(811);
      RandomTool.randomInt(4232);
      // Undeclared exception!
      RandomTool.randomString("abcdefghijklmnopqrstuvwxyz", 4232);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RandomTool randomTool0 = new RandomTool();
      RandomTool.randomString("0123456789", 0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RandomTool.randomInt(1);
      // Undeclared exception!
      try { 
        RandomTool.randomString((-28));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = RandomTool.randomString(372);
      assertEquals("d6xfmsefyxnwiq8x284pbzygp6lll6y97fh49g7g7dpzx311xm5yx63a1ojx34x1nx8mq6rdq1x6jvq0z110jupy8t2znpqm38apaordoia6m417m09tmhkfvsnesdmg6cbsjz9qfuy9kdk7dp71tr3ph4vntb7ralmyh6e8ys29n9c43x5v8gceumw10sv3bppz8u3jve58bypp2ccd91s4y4fr5rmwh3jspf88j9129wl9jy44igyebfmttnvtogy3w04ctkdjkqzrl52rb209osoypec7owdsrw5s842ibp969dho6lbfnzqft1ynlub33d1ht87y7xjcbcjgejo80ixsdjj7b7vt1b8ohmq8jbfkma1w", string0);
      assertNotNull(string0);
      
      String string1 = "abcdefghijklmnopqrstuvwxyz0123456789";
      String string2 = RandomTool.randomString("abcdefghijklmnopqrstuvwxyz0123456789", 372);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("96yr6nnn8e20uy1re5gvbjjky0s3t6t7zuiu3rc6i18337ciynkrk3vu4b4tjqivh4d0h7ctar3e1gtmp3btle6mg1952dfodjgarzbnvq80b9lq7s0ccnqfaz3vc1fxnq9sqxri9mrnr1jo1pp42j3xzs3lb8dx7zn6pmnmvpb9eie0xyoctd9dsc89cqedznqrykls9umbb1suetywisjbmv9llt722dp135q2g6jk8pyakarhfh3l7uwb2dtg3cqpx8xkbjf09mslqyygmznghn7l2m2diz8cnpo8tdb97tzexi73emh56pssehbs7p43r8sz80mkkvzb2q4bx5bfaylfn570a1qdsmtgcstxwytjzyw8", string2);
      assertNotNull(string2);
      
      String string3 = RandomTool.randomString(3213);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = RandomTool.randomString(3213);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      // Undeclared exception!
      RandomTool.randomString(3213);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = "V}sd =m)q&y";
      int int0 = (-477);
      // Undeclared exception!
      try { 
        RandomTool.randomString("V}sd =m)q&y", (-477));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        RandomTool.randomInt(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("java.util.concurrent.ThreadLocalRandom", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = RandomTool.randomString(0);
      assertEquals("5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = RandomTool.randomString("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RandomTool randomTool0 = new RandomTool();
      RandomTool.randomString(5635);
      // Undeclared exception!
      try { 
        RandomTool.randomInt((-2668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("java.util.concurrent.ThreadLocalRandom", e);
      }
  }
}
