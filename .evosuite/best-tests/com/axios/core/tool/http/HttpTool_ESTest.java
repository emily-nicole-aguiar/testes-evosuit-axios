/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:11:12 GMT 2024
 */

package com.axios.core.tool.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.tool.http.HttpTool;
import java.io.StringWriter;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpTool_ESTest extends HttpTool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = HttpTool.getMimeType(".js", "nO");
      assertEquals("application/x-javascript", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = HttpTool.join(objectArray0, (CharSequence) stringBuffer0, "GBK", "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = HttpTool.join(stringArray0, (CharSequence) null, "WS", "WS");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Integer integer0 = new Integer(1117);
      linkedHashSet0.add(integer0);
      String string0 = HttpTool.join((Iterable<Object>) linkedHashSet0, (CharSequence) "nr1");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      String string0 = HttpTool.getString(byteArray0, charset0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = HttpTool.defaultIfNull((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpTool.getMimeType("\u0000\uFFFD\uFFFD2\uFFFD", "\u0000\uFFFD\uFFFD2\uFFFD");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpTool.getMimeType((String) null, "n.css");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpTool.getMimeType("-\uFFFD\uFFFD\uFFFD\uFFFD\u0000");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpTool.getMimeType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpTool.getMimeType("N+L,'e3o@eUM~");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(2);
      boolean boolean0 = HttpTool.isNull(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = HttpTool.isNull((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ecz@Y,lw|#");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        HttpTool.getMimeType(path0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Charset charset0 = Charset.defaultCharset();
      String string0 = HttpTool.getString(byteArray0, charset0, false);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = HttpTool.getString((byte[]) null, (Charset) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = HttpTool.getString(byteArray0, (Charset) null, true);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = HttpTool.getMimeType("9\u0000\u0000\u0000\uFFFD.js");
      assertEquals("application/x-javascript", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = HttpTool.getMimeType("%20.css");
      assertEquals("text/css", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = HttpTool.getMimeType("WfS{.h", "WfS{.h");
      assertEquals("text/plain", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = HttpTool.defaultIfNull((Object) null, object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = HttpTool.defaultIfNull("y)l[", "y)l[");
      assertEquals("y)l[", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<?> class0 = HttpTool.getComponentType((Object) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Class<?> class0 = HttpTool.getComponentType(charset0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      boolean boolean0 = HttpTool.isArray(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = HttpTool.isArray((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Iterator<Object> iterator0 = HttpTool.getIter((Iterable<Object>) null);
      assertNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      Iterator<Integer> iterator0 = HttpTool.getIter((Iterable<Integer>) treeSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = HttpTool.join((Iterable<Object>) null, (CharSequence) "6_&bSbrcO9$~_4");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      String string0 = HttpTool.join((Iterable<Object>) priorityQueue0, (CharSequence) "GBK");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = HttpTool.join((Object[]) null, (CharSequence) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = HttpTool.str(byteArray0, (Charset) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      String string0 = HttpTool.str((byte[]) null, charset0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      String string0 = HttpTool.str(byteArray0, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((byte)13);
      hashMap0.put("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", integer0);
      boolean boolean0 = HttpTool.isEmpty((Map<?, ?>) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      boolean boolean0 = HttpTool.isEmpty((Map<?, ?>) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = HttpTool.isEmpty((Map<?, ?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add((Integer) null);
      boolean boolean0 = HttpTool.isEmpty((Collection<?>) vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      boolean boolean0 = HttpTool.isEmpty((Collection<?>) vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = HttpTool.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = HttpTool.isEmpty(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      boolean boolean0 = HttpTool.isEmpty(integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = HttpTool.isEmpty((String[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      URL uRL0 = HttpTool.url("%20.css");
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HttpTool httpTool0 = new HttpTool();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpTool.getMimeType("", "qfGgV_qG`J-x4T/o");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }
}
