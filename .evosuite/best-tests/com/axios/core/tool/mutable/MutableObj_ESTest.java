/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:46:37 GMT 2024
 */

package com.axios.core.tool.mutable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.tool.mutable.MutableObj;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutableObj_ESTest extends MutableObj_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MutableObj<Object> mutableObj0 = new MutableObj<Object>();
      MutableObj<MutableObj<Object>> mutableObj1 = new MutableObj<MutableObj<Object>>(mutableObj0);
      mutableObj0.set(mutableObj1);
      // Undeclared exception!
      try { 
        mutableObj0.equals(mutableObj1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MutableObj<Integer> mutableObj0 = new MutableObj<Integer>((Integer) null);
      String string0 = mutableObj0.toString();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MutableObj<Integer> mutableObj0 = new MutableObj<Integer>((Integer) null);
      MutableObj<Object> mutableObj1 = new MutableObj<Object>();
      mutableObj1.set(mutableObj0);
      String string0 = mutableObj1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MutableObj<Integer> mutableObj0 = new MutableObj<Integer>();
      mutableObj0.hashCode();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MutableObj<String> mutableObj0 = new MutableObj<String>("null");
      mutableObj0.hashCode();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MutableObj<String> mutableObj0 = new MutableObj<String>();
      Object object0 = new Object();
      MutableObj<Object> mutableObj1 = new MutableObj<Object>(object0);
      // Undeclared exception!
      try { 
        mutableObj0.equals(mutableObj1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.mutable.MutableObj", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MutableObj<Integer> mutableObj0 = new MutableObj<Integer>();
      boolean boolean0 = mutableObj0.equals("d&AC4E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MutableObj<Integer> mutableObj0 = new MutableObj<Integer>((Integer) null);
      boolean boolean0 = mutableObj0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MutableObj<Object> mutableObj0 = new MutableObj<Object>();
      Object object0 = mutableObj0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MutableObj<Integer> mutableObj0 = new MutableObj<Integer>((Integer) null);
      MutableObj<Object> mutableObj1 = new MutableObj<Object>();
      mutableObj1.set(mutableObj0);
      Object object0 = mutableObj1.get();
      boolean boolean0 = mutableObj0.equals(object0);
      assertTrue(boolean0);
  }
}
