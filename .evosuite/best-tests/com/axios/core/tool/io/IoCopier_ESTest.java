/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 01:57:31 GMT 2024
 */

package com.axios.core.tool.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.axios.core.tool.io.StreamCopier;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IoCopier_ESTest extends IoCopier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StreamCopier streamCopier0 = new StreamCopier(904, 1690L);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("}");
      long long0 = streamCopier0.copy((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StreamCopier streamCopier0 = new StreamCopier();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StreamCopier streamCopier0 = new StreamCopier((-2322));
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      long long0 = streamCopier0.copy((InputStream) dataInputStream0, (OutputStream) byteArrayOutputStream0);
      assertEquals(0L, long0);
  }
}
