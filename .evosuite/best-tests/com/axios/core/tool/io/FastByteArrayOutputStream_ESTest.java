/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 05:14:45 GMT 2024
 */

package com.axios.core.tool.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.tool.io.FastByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastByteArrayOutputStream_ESTest extends FastByteArrayOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream(6);
      String string0 = fastByteArrayOutputStream0.toString("l2");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      fastByteArrayOutputStream0.write(byteArray0, 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream();
      fastByteArrayOutputStream0.write(4);
      String string0 = fastByteArrayOutputStream0.toString((Charset) null);
      assertEquals("\u0004", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream(7);
      MockPrintStream mockPrintStream0 = new MockPrintStream(fastByteArrayOutputStream0);
      mockPrintStream0.print((-4839));
      String string0 = fastByteArrayOutputStream0.toString("");
      assertEquals("-4839", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream();
      fastByteArrayOutputStream0.write(4);
      String string0 = fastByteArrayOutputStream0.toString();
      assertEquals("\u0004", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream(7);
      MockPrintStream mockPrintStream0 = new MockPrintStream(fastByteArrayOutputStream0);
      mockPrintStream0.print((-4839));
      byte[] byteArray0 = fastByteArrayOutputStream0.toByteArray();
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream();
      fastByteArrayOutputStream0.write(0);
      int int0 = fastByteArrayOutputStream0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      fastByteArrayOutputStream0.write(0);
      try { 
        fastByteArrayOutputStream0.writeTo(pipedOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.axios.core.tool.io.FastByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream(7);
      MockPrintStream mockPrintStream0 = new MockPrintStream(fastByteArrayOutputStream0);
      Object object0 = new Object();
      mockPrintStream0.println(object0);
      // Undeclared exception!
      try { 
        fastByteArrayOutputStream0.writeTo(mockPrintStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.io.FastByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream((-1693));
      // Undeclared exception!
      try { 
        fastByteArrayOutputStream0.write((byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream(16);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        fastByteArrayOutputStream0.write(byteArray0, 1182, (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.io.FastByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream();
      // Undeclared exception!
      try { 
        fastByteArrayOutputStream0.toString("Uc");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Uc
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream(7);
      byte[] byteArray0 = fastByteArrayOutputStream0.toByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream(3);
      // Undeclared exception!
      try { 
        fastByteArrayOutputStream0.toString("yih`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // yih`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream();
      String string0 = fastByteArrayOutputStream0.toString((Charset) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream(7);
      MockPrintStream mockPrintStream0 = new MockPrintStream(fastByteArrayOutputStream0);
      mockPrintStream0.print((-4839));
      fastByteArrayOutputStream0.writeTo(mockPrintStream0);
      fastByteArrayOutputStream0.writeTo(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream();
      fastByteArrayOutputStream0.writeTo(fastByteArrayOutputStream0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream();
      fastByteArrayOutputStream0.reset();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream();
      fastByteArrayOutputStream0.close();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream();
      int int0 = fastByteArrayOutputStream0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[6];
      fastByteArrayOutputStream0.write(byteArray0);
      // Undeclared exception!
      try { 
        fastByteArrayOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.io.FastByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastByteArrayOutputStream fastByteArrayOutputStream0 = new FastByteArrayOutputStream();
      String string0 = fastByteArrayOutputStream0.toString();
      assertEquals("", string0);
  }
}
