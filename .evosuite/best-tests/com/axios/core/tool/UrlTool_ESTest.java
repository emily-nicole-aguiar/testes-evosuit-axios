/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 04:21:36 GMT 2024
 */

package com.axios.core.tool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.tool.UrlTool;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.Buffer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UrlTool_ESTest extends UrlTool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = UrlTool.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      CharBuffer charBuffer0 = CharBuffer.allocate(8234);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8234, charBuffer0.length());
      assertEquals(8234, charBuffer0.remaining());
      assertEquals(8234, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(8234, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      String string0 = UrlTool.sub(charBuffer0, (-4264), 8234);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8234, charBuffer0.length());
      assertEquals(8234, charBuffer0.remaining());
      assertEquals(8234, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(8234, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8234, charBuffer0.length());
      assertEquals(8234, charBuffer0.remaining());
      assertEquals(8234, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(8234, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append("");
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8234, charBuffer0.length());
      assertEquals(8234, charBuffer0.remaining());
      assertEquals(8234, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(8234, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(5, (double) 8234);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8234, charBuffer0.length());
      assertEquals(8234, charBuffer0.remaining());
      assertEquals(8234, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(8234, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder3 = stringBuilder2.append(stringBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8234, charBuffer0.length());
      assertEquals(8234, charBuffer0.remaining());
      assertEquals(8234, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(8234, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      
      StringBuilder stringBuilder4 = stringBuilder3.append((CharSequence) stringBuilder1);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8234, charBuffer0.length());
      assertEquals(8234, charBuffer0.remaining());
      assertEquals(8234, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(8234, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      
      String string1 = UrlTool.encodeBlank(stringBuilder4);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8234, charBuffer0.length());
      assertEquals(8234, charBuffer0.remaining());
      assertEquals(8234, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(8234, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder3);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      UrlTool.toUrlForHttp(string1, uRLStreamHandler0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 65281;
      CharBuffer charBuffer0 = CharBuffer.allocate(65281);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(65281, charBuffer0.remaining());
      assertEquals(65281, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(65281, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(65281, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      Buffer buffer0 = charBuffer0.rewind();
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(65281, charBuffer0.remaining());
      assertEquals(65281, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(65281, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(65281, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(buffer0.hasRemaining());
      assertFalse(buffer0.isDirect());
      assertTrue(buffer0.hasArray());
      assertEquals(65281, buffer0.limit());
      assertEquals(0, buffer0.arrayOffset());
      assertEquals(65281, buffer0.remaining());
      assertEquals(65281, buffer0.capacity());
      assertFalse(buffer0.isReadOnly());
      assertEquals(0, buffer0.position());
      assertNotNull(buffer0);
      
      int int1 = 3270;
      String string0 = UrlTool.subSuf(charBuffer0, 3270);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(65281, charBuffer0.remaining());
      assertEquals(65281, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(65281, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(65281, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(string0);
      
      // Undeclared exception!
      UrlTool.getCharset(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = UrlTool.indexOf("N5pDjnultl", '7', '7', '7');
      assertEquals((-1), int0);
      
      String string0 = UrlTool.sub("N5pDjnultl", (-1), (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = UrlTool.prependIfMissing("", "N5pDjnultl", false, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("N5pDjnultl", string1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Predicate<Character> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      Predicate<Character> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Character> predicate2 = predicate1.and(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Character> predicate3 = predicate2.or(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertNotNull(predicate3);
      
      String string0 = UrlTool.trim((CharSequence) null, (-3068), predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertNull(string0);
      
      String string1 = UrlTool.trim((CharSequence) null);
      assertNull(string1);
      
      String string2 = UrlTool.removePrefix((CharSequence) null, (CharSequence) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = UrlTool.encodeBlank((CharSequence) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = UrlTool.isNotEmpty((Matcher[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("t");
      assertEquals("t", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      assertEquals("t0.0", stringBuilder0.toString());
      assertEquals("t0.0", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      String string0 = UrlTool.nullToEmpty(stringBuilder0);
      assertEquals("t0.0", stringBuilder0.toString());
      assertNotNull(string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("t0.0", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'C';
      charArray0[2] = ':';
      charArray0[3] = 'h';
      StringBuilder stringBuilder2 = stringBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'g', 'C', ':', 'h'}, charArray0);
      assertEquals("t0.0gC:h", stringBuilder0.toString());
      assertEquals("t0.0gC:h", stringBuilder2.toString());
      assertEquals(4, charArray0.length);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      String string1 = UrlTool.subAfter("t", "t", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = UrlTool.endWith((CharSequence) "t0.0", 't');
      assertFalse(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(65279, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(65279, charBuffer0.limit());
      assertEquals(65279, charBuffer0.remaining());
      assertEquals(65279, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Character> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      String string2 = UrlTool.nullToEmpty((CharSequence) null);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      HashMap<Character, Matcher> hashMap0 = new HashMap<Character, Matcher>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      boolean boolean1 = UrlTool.isNotEmpty((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      UrlTool.isBlank(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("0");
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = UrlTool.sub(stringBuffer0, (-1), (-1));
      assertEquals(1, stringBuffer0.length());
      assertEquals("0", stringBuffer0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = UrlTool.sub("", 101, 101);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = UrlTool.sub("0", (-2031), (-3801));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0", string2);
      
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpURLConnection0).getContentType();
      String string3 = UrlTool.getCharset(httpURLConnection0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = UrlTool.defaultIfNull("9<HJEl|yS|8r PU1!l", "");
      assertNotNull(string0);
      assertEquals("9<HJEl|yS|8r PU1!l", string0);
      
      boolean boolean0 = UrlTool.endWith((CharSequence) "", (CharSequence) "9<HJEl|yS|8r PU1!l", true);
      assertFalse(boolean0);
      
      boolean boolean1 = UrlTool.contains("", '/');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Character character0 = new Character('/');
      assertNotNull(character0);
      assertEquals('/', (char)character0);
      
      boolean boolean2 = UrlTool.isNull(character0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = UrlTool.startWith("9<HJEl|yS|8r PU1!l", "", false, false);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((float) 0);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("0.0", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      String string0 = UrlTool.trim((CharSequence) stringBuffer0, 0);
      assertEquals("0.0", stringBuilder0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("", string0);
      
      String string1 = UrlTool.emptyToDefault("", (String) null);
      assertNull(string1);
      
      int int0 = 0;
      String string2 = UrlTool.trim((CharSequence) null, 0);
      assertNull(string2);
      
      StringBuilder stringBuilder2 = stringBuilder0.append((long) 0);
      assertEquals("0.00", stringBuilder0.toString());
      assertEquals("0.00", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      URI uRI0 = UrlTool.toURI("I*-Osz#+kni-Ebr");
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("I*-Osz#+kni-Ebr", uRI0.toString());
      assertEquals("+kni-Ebr", uRI0.getRawFragment());
      assertEquals("I*-Osz", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNotNull(uRI0);
      
      IntStream intStream0 = stringBuffer0.codePoints();
      assertEquals("0.00", stringBuilder0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(intStream0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      
      UrlTool.appendHex(stringBuilder0, (byte)47, false);
      assertEquals("0.002F", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      
      boolean boolean0 = UrlTool.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string3 = UrlTool.sub("I*-Osz#+kni-Ebr", (-1886), 1541);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("I*-Osz#+kni-Ebr", string3);
      
      boolean boolean1 = UrlTool.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = UrlTool.sub((CharSequence) null, 0, (-1886));
      assertNull(string4);
      
      String string5 = UrlTool.removeSuffix("", "");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      Object object0 = UrlTool.defaultIfNull((Object) null, (Object) null);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        UrlTool.toURI((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      assertEquals(65279, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(65279, charBuffer0.length());
      assertEquals(65279, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(65279, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertEquals(65279, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(65279, charBuffer0.length());
      assertEquals(65279, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(65279, charBuffer0.remaining());
      assertEquals(65279, charBuffer1.remaining());
      assertEquals(65279, charBuffer1.capacity());
      assertFalse(charBuffer1.hasArray());
      assertEquals(65279, charBuffer1.limit());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(65279, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = '?';
      charArray0[2] = 'h';
      char char0 = charBuffer1.get();
      assertEquals(65279, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(65279, charBuffer0.length());
      assertEquals(65279, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(65279, charBuffer0.remaining());
      assertEquals(65279, charBuffer1.capacity());
      assertFalse(charBuffer1.hasArray());
      assertEquals(65278, charBuffer1.remaining());
      assertEquals(1, charBuffer1.position());
      assertEquals(65279, charBuffer1.limit());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(65278, charBuffer1.length());
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals('\u0000', char0);
      
      charArray0[3] = 'q';
      charArray0[4] = 'n';
      charArray0[5] = 's';
      charArray0[6] = 'Z';
      charArray0[7] = 'H';
      charArray0[8] = 'I';
      CharBuffer charBuffer2 = charBuffer0.get(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(65279, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(65279, charBuffer0.capacity());
      assertEquals(65270, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(65270, charBuffer0.length());
      assertTrue(charBuffer2.hasArray());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(65270, charBuffer2.length());
      assertEquals(9, charBuffer2.position());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(65279, charBuffer2.limit());
      assertEquals(65270, charBuffer2.remaining());
      assertEquals(65279, charBuffer2.capacity());
      assertFalse(charBuffer2.isDirect());
      assertEquals(9, charArray0.length);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertNotNull(charBuffer2);
      assertSame(charBuffer0, charBuffer2);
      assertSame(charBuffer2, charBuffer0);
      
      boolean boolean0 = UrlTool.isEmpty((CharSequence) charBuffer1);
      assertEquals(65279, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(65279, charBuffer0.capacity());
      assertEquals(65270, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(65270, charBuffer0.length());
      assertEquals(65279, charBuffer1.capacity());
      assertFalse(charBuffer1.hasArray());
      assertEquals(65278, charBuffer1.remaining());
      assertEquals(1, charBuffer1.position());
      assertEquals(65279, charBuffer1.limit());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(65278, charBuffer1.length());
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer2));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertSame(charBuffer0, charBuffer2);
      assertFalse(boolean0);
      
      char char1 = '1';
      // Undeclared exception!
      UrlTool.contains(charBuffer0, '1');
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = UrlTool.defaultIfNull("M\"FP`_OR+(Z+PD,", "M\"FP`_OR+(Z+PD,");
      assertNotNull(string0);
      assertEquals("M\"FP`_OR+(Z+PD,", string0);
      
      Object object0 = UrlTool.defaultIfNull((Object) "M\"FP`_OR+(Z+PD,", (Object) null);
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("M\"FP`_OR+(Z+PD,", object0);
      
      String string1 = UrlTool.subSuf("M\"FP`_OR+(Z+PD,", 11);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)object0));
      assertNotNull(string1);
      assertEquals("+PD,", string1);
      
      boolean boolean0 = UrlTool.containsIgnoreCase("M\"FP`_OR+(Z+PD,", "+PD,");
      assertTrue(boolean0);
      
      String string2 = UrlTool.removeSuffix("M\"FP`_OR+(Z+PD,", "+PD,");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("M\"FP`_OR+(Z", string2);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean1 = UrlTool.isNotEmpty(integerArray0);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = UrlTool.getCharset("");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("-5l/|A5!</h");
      assertEquals("-5l/|A5!</h", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("-5l/|A5!</h", pattern0.pattern());
      assertNotNull(pattern0);
      
      String string0 = UrlTool.get(pattern0, (CharSequence) "-5l/|A5!</h", 0);
      assertEquals("-5l/|A5!</h", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("-5l/|A5!</h", pattern0.pattern());
      assertNotNull(string0);
      assertEquals("-5l/", string0);
      
      boolean boolean0 = UrlTool.isNotBlank("-5l/");
      assertTrue(boolean0);
      
      boolean boolean1 = UrlTool.equals((CharSequence) "-5l/|A5!</h", (CharSequence) "-5l/|A5!</h", false);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals("-5l/|A5!</h", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("-5l/|A5!</h", pattern0.pattern());
      assertNotNull(predicate0);
      
      HashMap<Matcher, String> hashMap0 = new HashMap<Matcher, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "-5l/";
      objectArray0[2] = (Object) hashMap0;
      Object object0 = UrlTool.defaultIfNull((Object) "-5l/", (Object) "W ITv>w");
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("-5l/", object0);
      
      objectArray0[3] = (Object) "-5l/";
      boolean boolean2 = UrlTool.isNotEmpty(objectArray0);
      assertEquals(4, objectArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "S";
      String string1 = UrlTool.blankToDefault("W ITv>w", "W#(k");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)object0));
      assertNotNull(string1);
      assertEquals("W ITv>w", string1);
      
      String string2 = UrlTool.subAfter(charSequenceArray0[0], "W ITv>w", false);
      assertEquals(3, charSequenceArray0.length);
      assertNull(string2);
      
      String string3 = UrlTool.subAfter("W ITv>w", "-5l/", false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)object0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      StringBuilder stringBuilder0 = new StringBuilder("-5l/|A5!</h");
      assertEquals("-5l/|A5!</h", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((double) 0);
      assertEquals("-5l/|A5!</h0.0", stringBuilder0.toString());
      assertEquals("-5l/|A5!</h0.0", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      UrlTool.appendHex(stringBuilder1, (byte)82, false);
      assertEquals("-5l/|A5!</h0.052", stringBuilder0.toString());
      assertEquals("-5l/|A5!</h0.052", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      boolean boolean3 = UrlTool.isNull((Object) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      int int0 = UrlTool.indexOf("W ITv>w", '7', 1, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = UrlTool.getCharset("");
      assertNull(string0);
      
      String string1 = UrlTool.getCharset((String) null);
      assertNull(string1);
      
      String string2 = UrlTool.removeSuffix("", (CharSequence) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      StringBuilder stringBuilder0 = new StringBuilder(677);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = '5';
      charArray0[2] = 'D';
      charArray0[3] = 'h';
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      assertArrayEquals(new char[] {'N', '5', 'D', 'h'}, charArray0);
      assertEquals("N5Dh", stringBuilder0.toString());
      assertEquals("N5Dh", stringBuilder1.toString());
      assertEquals("N5Dh", stringBuilder2.toString());
      assertEquals(4, charArray0.length);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuilder stringBuilder3 = stringBuilder0.append((StringBuffer) null);
      assertEquals("N5Dhnull", stringBuilder0.toString());
      assertEquals("N5Dhnull", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      
      String string3 = UrlTool.subAfter(stringBuilder3, stringBuilder3, true);
      assertEquals("N5Dhnull", stringBuilder0.toString());
      assertEquals("N5Dhnull", stringBuilder3.toString());
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertEquals("", string3);
      
      Character character0 = Character.valueOf('N');
      assertNotNull(character0);
      assertEquals('N', (char)character0);
      
      boolean boolean0 = Character.isBmpCodePoint((-1191));
      assertFalse(boolean0);
      
      boolean boolean1 = UrlTool.isNull(character0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = UrlTool.sub(stringBuilder1, 8, 0);
      assertEquals("N5Dhnull", stringBuilder0.toString());
      assertEquals("N5Dhnull", stringBuilder1.toString());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("N5Dhnull", string4);
      
      boolean boolean2 = UrlTool.endWith((CharSequence) "", '5');
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = UrlTool.getCharset((String) null);
      assertNull(string5);
      
      String string6 = UrlTool.prependIfMissing("", stringBuilder3, false, (CharSequence[]) null);
      assertEquals("N5Dhnull", stringBuilder0.toString());
      assertEquals("N5Dhnull", stringBuilder3.toString());
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertEquals("N5Dhnull", string6);
      
      Pattern pattern0 = Pattern.compile("cc", 677);
      assertEquals("cc", pattern0.pattern());
      assertEquals(677, pattern0.flags());
      assertEquals("cc", pattern0.toString());
      assertNotNull(pattern0);
      
      Matcher matcher0 = pattern0.matcher("");
      assertEquals("cc", pattern0.pattern());
      assertEquals(677, pattern0.flags());
      assertEquals("cc", pattern0.toString());
      assertFalse(matcher0.hasTransparentBounds());
      assertEquals(0, matcher0.groupCount());
      assertEquals("java.util.regex.Matcher[pattern=cc region=0,0 lastmatch=]", matcher0.toString());
      assertTrue(matcher0.hasAnchoringBounds());
      assertNotNull(matcher0);
      
      // Undeclared exception!
      try { 
        matcher0.appendReplacement((StringBuffer) null, "@<Nzl<Y");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 65279;
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(65279, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(65279, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(65279, charBuffer0.remaining());
      assertEquals(65279, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      UrlTool.trim((CharSequence) charBuffer0, 65279);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("?;;TOD&:__HvEB=I9");
      assertEquals("?;;TOD&:__HvEB=I9", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      assertEquals("?;;TOD&:__HvEB=I9false", stringBuilder0.toString());
      assertEquals("?;;TOD&:__HvEB=I9false", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(1770L);
      assertEquals("?;;TOD&:__HvEB=I9false1770", stringBuilder0.toString());
      assertEquals("?;;TOD&:__HvEB=I9false1770", stringBuilder1.toString());
      assertEquals("?;;TOD&:__HvEB=I9false1770", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder2);
      assertEquals("?;;TOD&:__HvEB=I9false1770", stringBuilder0.toString());
      assertEquals("?;;TOD&:__HvEB=I9false1770", stringBuilder1.toString());
      assertEquals("?;;TOD&:__HvEB=I9false1770", stringBuilder2.toString());
      assertEquals(27, stringBuffer0.length());
      assertEquals("?;;TOD&:__HvEB=I9false1770", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      int int0 = UrlTool.indexOf(stringBuffer0, 'a', 8, 979);
      assertEquals("?;;TOD&:__HvEB=I9false1770", stringBuilder0.toString());
      assertEquals("?;;TOD&:__HvEB=I9false1770", stringBuilder1.toString());
      assertEquals("?;;TOD&:__HvEB=I9false1770", stringBuilder2.toString());
      assertEquals(27, stringBuffer0.length());
      assertEquals("?;;TOD&:__HvEB=I9false1770", stringBuffer0.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = UrlTool.getCharset("y%=TCy%=TC");
      assertNull(string0);
      
      boolean boolean0 = UrlTool.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("y%=TCy%=TC"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((Object) "y%=TCy%=TC");
      assertTrue(linkedList0.contains("y%=TCy%=TC"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = UrlTool.isEmpty((Collection<?>) linkedList0);
      assertTrue(linkedList0.contains("y%=TCy%=TC"));
      assertEquals(1, linkedList0.size());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = UrlTool.removeSuffix((CharSequence) null, (CharSequence) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Character> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Predicate<Character> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Object object1 = UrlTool.defaultIfNull((Object) null, (Object) "y%=TCy%=TC");
      assertFalse(object1.equals((Object)string1));
      assertNotNull(object1);
      assertEquals("y%=TCy%=TC", object1);
      
      Object object2 = hashMap0.put("y%=TCy%=TC", predicate0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(predicate0.equals((Object)predicate1));
      assertNull(object2);
      
      boolean boolean3 = UrlTool.isNotEmpty((Map<?, ?>) hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(1385);
      assertNotNull(integer0);
      assertEquals(1385, (int)integer0);
      
      String string0 = hashMap0.put(integer0, "com.axios.core.tool.mutable.MutableObj");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      boolean boolean0 = UrlTool.isNotEmpty((Map<?, ?>) hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = UrlTool.nullToEmpty((CharSequence) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = UrlTool.emptyToDefault("", "c}o");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("c}o", string1);
      
      String string2 = UrlTool.removePrefix("c}o", (CharSequence) null);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("c}o", string2);
      
      int int0 = UrlTool.indexOf("c}o", '7', 3, 3);
      assertEquals((-1), int0);
      
      String string3 = UrlTool.removePrefix("c}o", "");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("c}o", string3);
      
      String string4 = UrlTool.getCharset("com.axios.core.tool.mutable.MutableObjcom.axios.core.tool.mutable.MutableObj");
      assertNull(string4);
      
      String string5 = UrlTool.subAfter("c}o", "", false);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("c}o", string5);
      
      String string6 = UrlTool.getCharset("com.axios.core.tool.mutable.MutableObjcom.axios.core.tool.mutable.MutableObj");
      assertNull(string6);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URI uRI0 = UrlTool.toURI(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file://some/fake/but/wellformed/url", uRI0.toString());
      assertEquals("/fake/but/wellformed/url", uRI0.getRawPath());
      assertEquals("some", uRI0.getRawAuthority());
      assertEquals("some", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNotNull(uRI0);
      
      String string7 = UrlTool.removeSuffix("c}o", "c}o");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("", string7);
      
      URI uRI1 = UrlTool.toURI("tWW9");
      assertNull(uRI1.getRawAuthority());
      assertNull(uRI1.getRawFragment());
      assertFalse(uRI1.isOpaque());
      assertEquals("tWW9", uRI1.toString());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("tWW9", uRI1.getRawPath());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getHost());
      assertFalse(uRI1.isAbsolute());
      assertNull(uRI1.getScheme());
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotNull(uRI1);
      assertNotSame(uRI1, uRI0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        UrlTool.toUrlForHttp("dn=9&8ommd4np:vw", uRLStreamHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no protocol: dn=9&8ommd4np:vw
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A#VskyhJ&l^(>T";
      String string0 = "nZZa2'y.zu";
      stringArray0[1] = "nZZa2'y.zu";
      boolean boolean0 = UrlTool.isNotEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = UrlTool.isEmpty((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        UrlTool.trim((CharSequence) "nZZa2'y.zu", (-1245), (Predicate<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = 1;
      String string0 = UrlTool.removePrefix((CharSequence) null, (CharSequence) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = UrlTool.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int1 = 3;
      boolean boolean1 = UrlTool.isNotEmpty((CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        UrlTool.containsIgnoreCase("", (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      String string0 = UrlTool.subAfter(stringBuffer0, stringBuffer0, true);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = UrlTool.isNotEmpty((CharSequence) "");
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      URI uRI0 = UrlTool.toURI(uRL0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      String string1 = UrlTool.getCharset("");
      assertNull(string1);
      
      String string2 = UrlTool.getCharset((String) null);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        UrlTool.toUrlForHttp("G/#PoI)7?a;xdLMQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no protocol: G/#PoI)7?a;xdLMQ
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = UrlTool.getCharset("< ykcrP!X4}/BUJ");
      assertNull(string0);
      
      String string1 = UrlTool.trim((CharSequence) null);
      assertNull(string1);
      
      String string2 = UrlTool.subSuf((CharSequence) null, (-1));
      assertNull(string2);
      
      boolean boolean0 = UrlTool.startWith((CharSequence) null, (CharSequence) null, true, true);
      assertTrue(boolean0);
      
      String string3 = UrlTool.nullToEmpty((CharSequence) null);
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = UrlTool.toUrlForHttp("B8J:xn:", uRLStreamHandler0);
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("b8j", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getPath());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getHost());
      assertNotNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "uJ;wvad5";
      stringArray0[1] = "y%=TC";
      stringArray0[2] = "#:ndrc";
      stringArray0[3] = "d:H";
      stringArray0[4] = "AU'w6-'[";
      boolean boolean0 = UrlTool.isNotEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = UrlTool.removePrefix("d:H", "uJ;wvad5");
      assertNotNull(string0);
      assertEquals("d:H", string0);
      
      int int0 = UrlTool.indexOf("d:H", '7', 2147483645, 2147483645);
      assertEquals((-1), int0);
      
      Object object0 = UrlTool.defaultIfNull((Object) "AU'w6-'[", (Object) null);
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("AU'w6-'[", object0);
      
      boolean boolean1 = UrlTool.isNull("AU'w6-'[");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = UrlTool.startWith("AU'w6-'[", "uJ;wvad5", true, false);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = UrlTool.nullToEmpty("#:ndrc");
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("#:ndrc", string1);
      
      StringBuffer stringBuffer0 = new StringBuffer("y%=TC");
      assertEquals(5, stringBuffer0.length());
      assertEquals("y%=TC", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = stringBuffer0.reverse();
      assertEquals(5, stringBuffer0.length());
      assertEquals("CT=%y", stringBuffer0.toString());
      assertEquals("CT=%y", stringBuffer1.toString());
      assertEquals(5, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Predicate<Character> predicate0 = Predicate.isEqual((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(predicate0);
      
      Predicate<Character> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(predicate1);
      
      Predicate<Character> predicate2 = predicate1.or(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(predicate2);
      
      String string2 = UrlTool.trim((CharSequence) stringBuffer0, 49, (Predicate<Character>) predicate2);
      assertEquals(5, stringBuffer0.length());
      assertEquals("CT=%y", stringBuffer0.toString());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(string2);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals("", string2);
      
      URI uRI0 = UrlTool.toURI("d:H");
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertEquals("d:H", uRI0.toString());
      assertNull(uRI0.getRawPath());
      assertEquals("d", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Character character0 = Character.valueOf('`');
      assertNotNull(character0);
      assertEquals('`', (char)character0);
      
      Character character1 = new Character('t');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      
      String string0 = Character.getName(3690);
      assertNull(string0);
      
      Character character2 = UrlTool.defaultIfNull(character0, character1);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('`', (char)character2);
      
      String string1 = UrlTool.getCharset((HttpURLConnection) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("5iOb>caCMy89> vIM");
      assertEquals("5iOb>caCMy89> vIM", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      assertEquals("5iOb>caCMy89> vIMtrue", stringBuilder0.toString());
      assertEquals("5iOb>caCMy89> vIMtrue", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append("5iOb>caCMy89> vIM");
      assertEquals("5iOb>caCMy89> vIMtrue5iOb>caCMy89> vIM", stringBuilder0.toString());
      assertEquals("5iOb>caCMy89> vIMtrue5iOb>caCMy89> vIM", stringBuilder1.toString());
      assertEquals("5iOb>caCMy89> vIMtrue5iOb>caCMy89> vIM", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      StringBuilder stringBuilder3 = stringBuilder2.append(98);
      assertEquals("5iOb>caCMy89> vIMtrue5iOb>caCMy89> vIM98", stringBuilder0.toString());
      assertEquals("5iOb>caCMy89> vIMtrue5iOb>caCMy89> vIM98", stringBuilder1.toString());
      assertEquals("5iOb>caCMy89> vIMtrue5iOb>caCMy89> vIM98", stringBuilder2.toString());
      assertEquals("5iOb>caCMy89> vIMtrue5iOb>caCMy89> vIM98", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      
      String string0 = UrlTool.sub(stringBuilder3, (-925), 7);
      assertEquals("5iOb>caCMy89> vIMtrue5iOb>caCMy89> vIM98", stringBuilder0.toString());
      assertEquals("5iOb>caCMy89> vIMtrue5iOb>caCMy89> vIM98", stringBuilder1.toString());
      assertEquals("5iOb>caCMy89> vIMtrue5iOb>caCMy89> vIM98", stringBuilder2.toString());
      assertEquals("5iOb>caCMy89> vIMtrue5iOb>caCMy89> vIM98", stringBuilder3.toString());
      assertNotNull(string0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertEquals("5iOb>ca", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = UrlTool.getCharset("100100");
      assertNull(string0);
      
      boolean boolean0 = UrlTool.startWith("100100", (CharSequence) null, false, true);
      assertFalse(boolean0);
      
      Character[] characterArray0 = new Character[5];
      boolean boolean1 = UrlTool.isNotEmpty(characterArray0);
      assertEquals(5, characterArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = UrlTool.getCharset("");
      assertNull(string0);
      
      String string1 = UrlTool.removeSuffix("", (CharSequence) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      StringBuilder stringBuilder0 = new StringBuilder(677);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[2] = 'D';
      charArray0[1] = '\u0000';
      StringBuilder stringBuilder1 = new StringBuilder("");
      assertEquals("", stringBuilder1.toString());
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder0.append((StringBuffer) null);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder2.toString());
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      String string2 = UrlTool.subAfter(stringBuilder2, stringBuilder2, true);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder2.toString());
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("", string2);
      
      boolean boolean0 = UrlTool.isNull('D');
      assertFalse(boolean0);
      
      String string3 = UrlTool.sub(stringBuilder0, 2, 0);
      assertEquals("null", stringBuilder0.toString());
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertEquals("nu", string3);
      
      boolean boolean1 = UrlTool.endWith((CharSequence) "", '\u0000');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = UrlTool.prependIfMissing("", stringBuilder2, false, (CharSequence[]) null);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder2.toString());
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("null", string4);
      
      Pattern pattern0 = UrlTool.CHARSET_PATTERN;
      assertEquals("charset\\s*=\\s*([a-z0-9-]*)", pattern0.pattern());
      assertEquals("charset\\s*=\\s*([a-z0-9-]*)", pattern0.toString());
      assertEquals(2, pattern0.flags());
      assertNotNull(pattern0);
      
      Matcher matcher0 = pattern0.matcher("");
      assertEquals("charset\\s*=\\s*([a-z0-9-]*)", pattern0.pattern());
      assertEquals("charset\\s*=\\s*([a-z0-9-]*)", pattern0.toString());
      assertEquals(2, pattern0.flags());
      assertEquals(1, matcher0.groupCount());
      assertFalse(matcher0.hasTransparentBounds());
      assertTrue(matcher0.hasAnchoringBounds());
      assertEquals("java.util.regex.Matcher[pattern=charset\\s*=\\s*([a-z0-9-]*) region=0,0 lastmatch=]", matcher0.toString());
      assertNotNull(matcher0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (CharSequence) null);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(0);
      assertEquals("null\u0000", stringBuilder0.toString());
      assertEquals("null\u0000", stringBuilder1.toString());
      assertEquals("null\u0000", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuilder stringBuilder3 = stringBuilder2.append(0L);
      assertEquals("null\u00000", stringBuilder0.toString());
      assertEquals("null\u00000", stringBuilder1.toString());
      assertEquals("null\u00000", stringBuilder2.toString());
      assertEquals("null\u00000", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      
      StringBuilder stringBuilder4 = stringBuilder2.insert(0, 0.0F);
      assertEquals("0.0null\u00000", stringBuilder0.toString());
      assertEquals("0.0null\u00000", stringBuilder1.toString());
      assertEquals("0.0null\u00000", stringBuilder2.toString());
      assertEquals("0.0null\u00000", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      
      StringBuilder stringBuilder5 = stringBuilder4.replace(0, 0, "com.axios.core.tool.mutable.MutableObj");
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder0.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder1.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder2.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder4.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder5.toString());
      assertNotNull(stringBuilder5);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder3);
      
      String string0 = UrlTool.trim((CharSequence) stringBuilder5, 0);
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder0.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder1.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder2.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder4.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder5.toString());
      assertNotNull(string0);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder5);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder2);
      assertSame(stringBuilder5, stringBuilder1);
      assertSame(stringBuilder5, stringBuilder4);
      assertSame(stringBuilder5, stringBuilder0);
      assertSame(stringBuilder5, stringBuilder3);
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", string0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      boolean boolean0 = UrlTool.isNotEmpty((Map<?, ?>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(boolean0);
      
      String string1 = UrlTool.trim((CharSequence) "com.axios.core.tool.mutable.MutableObj", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("com.axios.core.tool.mutable.MutableObj", string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder3);
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder0.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder1.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder2.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder3.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(47, charBuffer0.remaining());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(47, charBuffer0.limit());
      assertEquals(47, charBuffer0.capacity());
      assertEquals(47, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      
      String string2 = UrlTool.removePrefix(charBuffer0, "com.axios.core.tool.mutable.MutableObj");
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder0.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder1.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder2.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder3.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(47, charBuffer0.remaining());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(47, charBuffer0.limit());
      assertEquals(47, charBuffer0.capacity());
      assertEquals(47, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertEquals("0.0null\u00000", string2);
      
      StringBuilder stringBuilder6 = new StringBuilder(charBuffer0);
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder0.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder1.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder2.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder3.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(47, charBuffer0.remaining());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(47, charBuffer0.limit());
      assertEquals(47, charBuffer0.capacity());
      assertEquals(47, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder6.toString());
      assertFalse(stringBuilder6.equals((Object)stringBuilder5));
      assertFalse(stringBuilder6.equals((Object)stringBuilder2));
      assertFalse(stringBuilder6.equals((Object)stringBuilder3));
      assertFalse(stringBuilder6.equals((Object)stringBuilder0));
      assertFalse(stringBuilder6.equals((Object)stringBuilder4));
      assertFalse(stringBuilder6.equals((Object)stringBuilder1));
      assertNotNull(stringBuilder6);
      
      String string3 = UrlTool.sub(stringBuilder6, 1534, (-1929));
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder0.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder1.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder2.toString());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder3.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(47, charBuffer0.remaining());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(47, charBuffer0.limit());
      assertEquals(47, charBuffer0.capacity());
      assertEquals(47, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("com.axios.core.tool.mutable.MutableObj0.0null\u00000", stringBuilder6.toString());
      assertFalse(stringBuilder0.equals((Object)stringBuilder6));
      assertFalse(stringBuilder1.equals((Object)stringBuilder6));
      assertFalse(stringBuilder2.equals((Object)stringBuilder6));
      assertFalse(stringBuilder3.equals((Object)stringBuilder6));
      assertFalse(stringBuilder6.equals((Object)stringBuilder5));
      assertFalse(stringBuilder6.equals((Object)stringBuilder2));
      assertFalse(stringBuilder6.equals((Object)stringBuilder3));
      assertFalse(stringBuilder6.equals((Object)stringBuilder0));
      assertFalse(stringBuilder6.equals((Object)stringBuilder4));
      assertFalse(stringBuilder6.equals((Object)stringBuilder1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertSame(stringBuilder0, stringBuilder5);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertNotSame(stringBuilder0, stringBuilder6);
      assertSame(stringBuilder1, stringBuilder5);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertNotSame(stringBuilder1, stringBuilder6);
      assertNotSame(stringBuilder2, stringBuilder6);
      assertSame(stringBuilder2, stringBuilder5);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder5);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertNotSame(stringBuilder3, stringBuilder6);
      assertSame(stringBuilder3, stringBuilder0);
      assertNotSame(stringBuilder6, stringBuilder5);
      assertNotSame(stringBuilder6, stringBuilder2);
      assertNotSame(stringBuilder6, stringBuilder3);
      assertNotSame(stringBuilder6, stringBuilder0);
      assertNotSame(stringBuilder6, stringBuilder4);
      assertNotSame(stringBuilder6, stringBuilder1);
      assertEquals("", string3);
      
      boolean boolean1 = UrlTool.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      URI uRI0 = UrlTool.toURI("");
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertEquals("", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNotNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = UrlTool.endWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = UrlTool.endWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = UrlTool.endWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string0 = UrlTool.encodeBlank("dn=9&8Ommd4Np:vW");
      assertNotNull(string0);
      assertEquals("dn=9&8Ommd4Np:vW", string0);
      
      Pattern pattern0 = Pattern.compile("dn=9&8Ommd4Np:vW", 100);
      assertEquals(100, pattern0.flags());
      assertEquals("dn=9&8Ommd4Np:vW", pattern0.pattern());
      assertEquals("dn=9&8Ommd4Np:vW", pattern0.toString());
      assertNotNull(pattern0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      boolean boolean3 = UrlTool.isEmpty((CharSequence) "dn=9&8Ommd4Np:vW");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int int0 = UrlTool.indexOf("dn=9&8Ommd4Np:vW", 'd', 68, 46);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(112);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(112, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(112, charBuffer0.remaining());
      assertEquals(112, charBuffer0.capacity());
      assertEquals(112, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(2023);
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(2023, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(2023, charBuffer1.remaining());
      assertEquals(2023, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertEquals(2023, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      
      String string0 = UrlTool.sub("uJ;wvad5d:H", 112, 112);
      assertNotNull(string0);
      assertEquals("", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder("ov&n+!J#?/yT-iLc7}U");
      assertEquals("ov&n+!J#?/yT-iLc7}U", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append('*');
      assertEquals("ov&n+!J#?/yT-iLc7}U*", stringBuilder0.toString());
      assertEquals("ov&n+!J#?/yT-iLc7}U*", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder0.append((int) '*');
      assertEquals("ov&n+!J#?/yT-iLc7}U*42", stringBuilder0.toString());
      assertEquals("ov&n+!J#?/yT-iLc7}U*42", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      boolean boolean0 = UrlTool.startWith(stringBuilder1, "", false, true);
      assertEquals("ov&n+!J#?/yT-iLc7}U*42", stringBuilder0.toString());
      assertEquals("ov&n+!J#?/yT-iLc7}U*42", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertTrue(boolean0);
      
      boolean boolean1 = UrlTool.isBlank(charBuffer1);
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(2023, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(2023, charBuffer1.remaining());
      assertEquals(2023, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertEquals(2023, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(charBuffer1, charBuffer0);
      assertTrue(boolean1);
      
      StringBuilder stringBuilder3 = stringBuilder0.append(true);
      assertEquals("ov&n+!J#?/yT-iLc7}U*42true", stringBuilder0.toString());
      assertEquals("ov&n+!J#?/yT-iLc7}U*42true", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      
      UrlTool.appendHex(stringBuilder1, (byte)42, true);
      assertEquals("ov&n+!J#?/yT-iLc7}U*42true2a", stringBuilder0.toString());
      assertEquals("ov&n+!J#?/yT-iLc7}U*42true2a", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "ov&n+!J#?/yT-iLc7}U";
      String string1 = UrlTool.prependIfMissing(stringBuilder0, "uJ;wvad5d:H", true, charSequenceArray0);
      assertEquals("ov&n+!J#?/yT-iLc7}U*42true2a", stringBuilder0.toString());
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertEquals("ov&n+!J#?/yT-iLc7}U*42true2a", string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = UrlTool.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = UrlTool.encodeBlank((CharSequence) null);
      assertNull(string0);
      
      String string1 = UrlTool.getCharset((String) null);
      assertNull(string1);
      
      boolean boolean1 = UrlTool.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = UrlTool.getCharset("");
      assertNull(string2);
      
      String string3 = UrlTool.sub("", 3122, (-807));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = UrlTool.emptyToDefault("", "");
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = UrlTool.toString((CharSequence) null);
      assertNull(string5);
      
      boolean boolean2 = UrlTool.equals((CharSequence) null, (CharSequence) "", true);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = UrlTool.endWith((CharSequence) "", (CharSequence) "", true);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("$ksx:xnq", 0);
      assertEquals(0, pattern0.flags());
      assertEquals("$ksx:xnq", pattern0.toString());
      assertEquals("$ksx:xnq", pattern0.pattern());
      assertNotNull(pattern0);
      
      Consumer<Matcher> consumer0 = (Consumer<Matcher>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      UrlTool.get(pattern0, (CharSequence) "$ksx:xnq", (Consumer<Matcher>) consumer0);
      assertEquals(0, pattern0.flags());
      assertEquals("$ksx:xnq", pattern0.toString());
      assertEquals("$ksx:xnq", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn("9'%P@8f7:").when(httpURLConnection0).getContentType();
      String string0 = UrlTool.getCharset(httpURLConnection0);
      assertNull(string0);
      
      UrlTool urlTool0 = new UrlTool();
      assertNotNull(urlTool0);
      
      Consumer<Matcher> consumer0 = (Consumer<Matcher>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      UrlTool.get(urlTool0.CHARSET_PATTERN, (CharSequence) null, (Consumer<Matcher>) consumer0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = UrlTool.encodeBlank((CharSequence) null);
      assertNull(string0);
      
      String string1 = UrlTool.subAfter((CharSequence) null, (CharSequence) null, true);
      assertNull(string1);
      
      String string2 = UrlTool.blankToDefault((CharSequence) null, (String) null);
      assertNull(string2);
      
      boolean boolean0 = UrlTool.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string3 = UrlTool.getCharset((HttpURLConnection) null);
      assertNull(string3);
      
      boolean boolean1 = UrlTool.contains((CharSequence) null, '^');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = UrlTool.equals((CharSequence) null, (CharSequence) null, false);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = UrlTool.startWith((CharSequence) null, (CharSequence) null, true, true);
      assertTrue(boolean0);
      
      boolean boolean1 = UrlTool.endWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Pattern pattern0 = Pattern.compile("");
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertNotNull(pattern0);
      
      String string0 = UrlTool.get(pattern0, (CharSequence) null, 77);
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertNull(string0);
      
      boolean boolean2 = UrlTool.equals((CharSequence) "", (CharSequence) null, true);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = UrlTool.getCharset("GNkwF)zGlwlkck)");
      assertNull(string0);
      
      String string1 = UrlTool.emptyToDefault("GNkwF)zGlwlkck)", "GNkwF)zGlwlkck)");
      assertNotNull(string1);
      assertEquals("GNkwF)zGlwlkck)", string1);
      
      boolean boolean0 = UrlTool.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = UrlTool.subAfter((CharSequence) null, "GNkwF)zGlwlkck)", true);
      assertNull(string2);
      
      boolean boolean1 = UrlTool.isBlank((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = UrlTool.equals((CharSequence) null, (CharSequence) null, true);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      URI uRI0 = UrlTool.toURI("GNkwF)zGlwlkck)");
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("GNkwF)zGlwlkck)", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertEquals("GNkwF)zGlwlkck)", uRI0.getRawPath());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNotNull(uRI0);
      
      boolean boolean3 = UrlTool.equals((CharSequence) "GNkwF)zGlwlkck)", (CharSequence) "GNkwF)zGlwlkck)", true);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      boolean boolean4 = UrlTool.isNotBlank("GNkwF)zGlwlkck)");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (long) 0);
      assertEquals("0", stringBuilder0.toString());
      assertEquals("0", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Predicate<Character> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      String string0 = UrlTool.trim((CharSequence) stringBuilder0, 0, (Predicate<Character>) predicate0);
      assertEquals("0", stringBuilder0.toString());
      assertNotNull(string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("0", string0);
      
      String string1 = UrlTool.encodeBlank("0");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0", string1);
      
      String string2 = UrlTool.subAfter("0", "0", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = UrlTool.emptyToDefault("0", "");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("0", string3);
      
      UrlTool.appendHex(stringBuilder0, (byte)0, true);
      assertEquals("000", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder1);
      
      boolean boolean0 = UrlTool.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("", 55);
      assertEquals("", pattern0.pattern());
      assertEquals(55, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertNotNull(pattern0);
      
      StringBuilder stringBuilder2 = stringBuilder0.append((float) (byte)0);
      assertEquals("0000.0", stringBuilder0.toString());
      assertEquals("0000.0", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      String string4 = UrlTool.get(pattern0, (CharSequence) stringBuilder2, (int) (byte)0);
      assertEquals("0000.0", stringBuilder0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(55, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("0000.0", stringBuilder2.toString());
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("", string4);
      
      int int0 = UrlTool.indexOf("0", '@', (byte)0, (-3865));
      assertEquals((-1), int0);
      
      String string5 = UrlTool.removeSuffix("0", stringBuilder0);
      assertEquals("0000.0", stringBuilder0.toString());
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("0", string5);
      
      String string6 = UrlTool.trim((CharSequence) stringBuilder1, (-1), (Predicate<Character>) predicate0);
      assertEquals("0000.0", stringBuilder0.toString());
      assertEquals("0000.0", stringBuilder1.toString());
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("0000.0", string6);
      
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      URI uRI0 = UrlTool.toURI(uRL0);
      assertEquals("file", uRI0.getScheme());
      assertEquals("some", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("some", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("/fake/but/wellformed/url", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file://some/fake/but/wellformed/url", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRI0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = UrlTool.isEmpty((Collection<?>) linkedList0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = UrlTool.getCharset("");
      assertNull(string0);
      
      String string1 = UrlTool.emptyToDefault("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = UrlTool.toString((CharSequence) null);
      assertNull(string2);
      
      boolean boolean0 = UrlTool.equalsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      URI uRI0 = UrlTool.toURI(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/fooExample", uRI0.getRawPath());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
      assertNotNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = UrlTool.contains((CharSequence) null, 'H');
      assertFalse(boolean0);
      
      boolean boolean1 = UrlTool.endWith((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = UrlTool.endWith((CharSequence) null, (CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Pattern pattern0 = null;
      String string0 = UrlTool.get((Pattern) null, (CharSequence) null, 100);
      assertNull(string0);
      
      Pattern pattern1 = Pattern.compile("%20", 100);
      assertEquals("%20", pattern1.toString());
      assertEquals(100, pattern1.flags());
      assertEquals("%20", pattern1.pattern());
      assertNotNull(pattern1);
      
      Matcher matcher0 = pattern1.matcher("%20");
      assertEquals("%20", pattern1.toString());
      assertEquals(100, pattern1.flags());
      assertEquals("%20", pattern1.pattern());
      assertEquals("java.util.regex.Matcher[pattern=%20 region=0,3 lastmatch=]", matcher0.toString());
      assertTrue(matcher0.hasAnchoringBounds());
      assertFalse(matcher0.hasTransparentBounds());
      assertEquals(0, matcher0.groupCount());
      assertNotNull(matcher0);
      
      boolean boolean3 = UrlTool.containsIgnoreCase((CharSequence) null, "%20");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        UrlTool.toUrlForHttp((String) null, uRLStreamHandler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Url is blank !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = UrlTool.getCharset((HttpURLConnection) null);
      assertNull(string0);
      
      String string1 = UrlTool.defaultIfNull((String) null, (String) null);
      assertNull(string1);
      
      String string2 = UrlTool.encodeBlank((CharSequence) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("{/HH*&D9DMiW9*Q;");
      assertEquals("{/HH*&D9DMiW9*Q;", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "{/HH*&D9DMiW9*Q;");
      assertEquals("{/HH*&D9DMiW9*Q;{/HH*&D9DMiW9*Q;", stringBuilder0.toString());
      assertEquals("{/HH*&D9DMiW9*Q;{/HH*&D9DMiW9*Q;", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder0.append('d');
      assertEquals("{/HH*&D9DMiW9*Q;{/HH*&D9DMiW9*Q;d", stringBuilder0.toString());
      assertEquals("{/HH*&D9DMiW9*Q;{/HH*&D9DMiW9*Q;d", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder2);
      assertEquals("{/HH*&D9DMiW9*Q;{/HH*&D9DMiW9*Q;d", stringBuilder0.toString());
      assertEquals("{/HH*&D9DMiW9*Q;{/HH*&D9DMiW9*Q;d", stringBuilder2.toString());
      assertEquals(33, stringBuffer0.length());
      assertEquals("{/HH*&D9DMiW9*Q;{/HH*&D9DMiW9*Q;d", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string0 = UrlTool.removeSuffix("{/HH*&D9DMiW9*Q;", stringBuilder2);
      assertEquals("{/HH*&D9DMiW9*Q;{/HH*&D9DMiW9*Q;d", stringBuilder0.toString());
      assertEquals("{/HH*&D9DMiW9*Q;{/HH*&D9DMiW9*Q;d", stringBuilder2.toString());
      assertNotNull(string0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("{/HH*&D9DMiW9*Q;", string0);
      
      String string1 = UrlTool.nullToEmpty(stringBuffer0);
      assertEquals("{/HH*&D9DMiW9*Q;{/HH*&D9DMiW9*Q;d", stringBuilder0.toString());
      assertEquals("{/HH*&D9DMiW9*Q;{/HH*&D9DMiW9*Q;d", stringBuilder2.toString());
      assertEquals(33, stringBuffer0.length());
      assertEquals("{/HH*&D9DMiW9*Q;{/HH*&D9DMiW9*Q;d", stringBuffer0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("{/HH*&D9DMiW9*Q;{/HH*&D9DMiW9*Q;d", string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "%20";
      Pattern pattern0 = Pattern.compile("%20");
      assertEquals(0, pattern0.flags());
      assertEquals("%20", pattern0.toString());
      assertEquals("%20", pattern0.pattern());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals(0, pattern0.flags());
      assertEquals("%20", pattern0.toString());
      assertEquals("%20", pattern0.pattern());
      assertNotNull(predicate0);
      
      String string1 = "H *60uvW\\S_;";
      Pattern pattern1 = Pattern.compile("H *60uvWS_;", (-1504));
      assertEquals("H *60uvWS_;", pattern1.toString());
      assertEquals((-1504), pattern1.flags());
      assertEquals("H *60uvWS_;", pattern1.pattern());
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotNull(pattern1);
      assertNotSame(pattern1, pattern0);
      
      String[] stringArray0 = pattern0.split((CharSequence) "%20", (-1504));
      assertEquals(0, pattern0.flags());
      assertEquals("%20", pattern0.toString());
      assertEquals("%20", pattern0.pattern());
      assertEquals(2, stringArray0.length);
      assertFalse(pattern0.equals((Object)pattern1));
      assertNotNull(stringArray0);
      assertNotSame(pattern0, pattern1);
      
      String[] stringArray1 = pattern0.split((CharSequence) "%20", (-2302));
      assertEquals(0, pattern0.flags());
      assertEquals("%20", pattern0.toString());
      assertEquals("%20", pattern0.pattern());
      assertEquals(2, stringArray1.length);
      assertFalse(pattern0.equals((Object)pattern1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(pattern0, pattern1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = pattern0.split((CharSequence) "%20", (-1504));
      assertEquals(0, pattern0.flags());
      assertEquals("%20", pattern0.toString());
      assertEquals("%20", pattern0.pattern());
      assertEquals(2, stringArray2.length);
      assertFalse(pattern0.equals((Object)pattern1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(pattern0, pattern1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      Consumer<Matcher> consumer0 = (Consumer<Matcher>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      UrlTool.get(pattern0, (CharSequence) "%20", (Consumer<Matcher>) consumer0);
      assertEquals(0, pattern0.flags());
      assertEquals("%20", pattern0.toString());
      assertEquals("%20", pattern0.pattern());
      assertFalse(pattern0.equals((Object)pattern1));
      assertNotSame(pattern0, pattern1);
      
      UrlTool urlTool0 = new UrlTool();
      assertNotNull(urlTool0);
      
      byte byte0 = (byte) (-6);
      // Undeclared exception!
      try { 
        UrlTool.appendHex((StringBuilder) null, (byte) (-6), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      UrlTool urlTool0 = new UrlTool();
      assertNotNull(urlTool0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      URI uRI0 = UrlTool.toURI("");
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawAuthority());
      assertEquals("", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNotNull(uRI0);
      
      String string0 = UrlTool.toString((CharSequence) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        UrlTool.toUrlForHttp((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Url is blank !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = UrlTool.removePrefix((CharSequence) null, (CharSequence) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = UrlTool.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = UrlTool.isEmpty((Collection<?>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = UrlTool.trim((CharSequence) null, 38);
      assertNull(string1);
      
      String string2 = UrlTool.sub((CharSequence) null, 38, 38);
      assertNull(string2);
      
      boolean boolean2 = UrlTool.startWith((CharSequence) null, "", true, true);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string3 = UrlTool.prependIfMissing((CharSequence) null, "", false, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = UrlTool.removePrefix((CharSequence) null, (CharSequence) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = UrlTool.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = UrlTool.containsIgnoreCase((CharSequence) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = UrlTool.endWith((CharSequence) "", (CharSequence) "");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = UrlTool.equals((CharSequence) null, (CharSequence) null, false);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string1 = UrlTool.prependIfMissing("", "", false, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("frZ{H]j0k:Z;o");
      assertEquals("frZ{H]j0k:Z;o", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append('{');
      assertEquals("frZ{H]j0k:Z;o{", stringBuilder0.toString());
      assertEquals("frZ{H]j0k:Z;o{", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (Object) stringBuilder0);
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder0.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder1.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuilder stringBuilder3 = stringBuilder2.append((CharSequence) stringBuilder1);
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder0.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder1.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder2.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder4 = stringBuilder3.append(stringBuffer0);
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder0.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder1.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder2.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder3.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder4.toString());
      assertNotNull(stringBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      
      int int0 = 0;
      int int1 = UrlTool.indexOf(stringBuilder4, '{', 0, 0);
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder0.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder1.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder2.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder3.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder4.toString());
      assertFalse(int1 == int0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      assertEquals((-1), int1);
      
      String string0 = UrlTool.emptyToDefault(stringBuilder2, "");
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder0.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder1.toString());
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder2.toString());
      assertNotNull(string0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", string0);
      
      String string1 = UrlTool.getCharset("frZ{H]j0k:Z;o");
      assertNull(string1);
      
      boolean boolean0 = UrlTool.endWith((CharSequence) stringBuilder0, (CharSequence) null);
      assertEquals("frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{frZ{H]j0k:Z;o{", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertFalse(boolean0);
      
      try { 
        UrlTool.toURI("frZ{H]j0k:Z;o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal character in scheme name at index 3: frZ{H]j0k:Z;o
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = UrlTool.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = UrlTool.removeSuffix((CharSequence) null, (CharSequence) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = UrlTool.startWith("", (CharSequence) null, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "SE\"1p#IZzL*B");
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/SE\"1p#IZzL*B", uRL1.toString());
      assertEquals("IZzL*B", uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/SE\"1p#IZzL*B", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      try { 
        UrlTool.toURI(uRL1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal character in path at index 41: ftp://ftp.someFakeButWellFormedURL.org/SE\"1p#IZzL*B
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      URI uRI0 = UrlTool.toURI("acqIs#h");
      //  // Unstable assertion: assertNull(uRI0.getRawQuery());
      //  // Unstable assertion: assertFalse(uRI0.isAbsolute());
      //  // Unstable assertion: assertNull(uRI0.getHost());
      //  // Unstable assertion: assertFalse(uRI0.isOpaque());
      //  // Unstable assertion: assertNull(uRI0.getRawAuthority());
      //  // Unstable assertion: assertEquals((-1), uRI0.getPort());
      //  // Unstable assertion: assertNull(uRI0.getRawUserInfo());
      //  // Unstable assertion: assertEquals("acqIs", uRI0.getRawPath());
      //  // Unstable assertion: assertEquals("h", uRI0.getRawFragment());
      //  // Unstable assertion: assertEquals("acqIs#h", uRI0.toString());
      //  // Unstable assertion: assertNull(uRI0.getScheme());
      //  // Unstable assertion: assertNotNull(uRI0);
      
      int int0 = 789;
      String string0 = UrlTool.subSuf("acqIs#h", 789);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("", string0);
      
      boolean boolean0 = UrlTool.endWith((CharSequence) "", (CharSequence) "acqIs#h", false);
      //  // Unstable assertion: assertTrue(boolean0);
      
      boolean boolean1 = false;
      String string1 = UrlTool.prependIfMissing("acqIs#h", "acqIs#h", false, (CharSequence[]) null);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("acqIs#h", string1);
      
      String string2 = UrlTool.trim((CharSequence) "");
      //  // Unstable assertion: assertTrue(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("", string2);
      
      boolean boolean2 = UrlTool.containsIgnoreCase("acqIs#h", "acqIs#h");
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2);
      
      boolean boolean3 = UrlTool.isNull(uRI0);
      //  // Unstable assertion: assertNull(uRI0.getRawQuery());
      //  // Unstable assertion: assertFalse(uRI0.isAbsolute());
      //  // Unstable assertion: assertNull(uRI0.getHost());
      //  // Unstable assertion: assertFalse(uRI0.isOpaque());
      //  // Unstable assertion: assertNull(uRI0.getRawAuthority());
      //  // Unstable assertion: assertEquals((-1), uRI0.getPort());
      //  // Unstable assertion: assertNull(uRI0.getRawUserInfo());
      //  // Unstable assertion: assertEquals("acqIs", uRI0.getRawPath());
      //  // Unstable assertion: assertEquals("h", uRI0.getRawFragment());
      //  // Unstable assertion: assertEquals("acqIs#h", uRI0.toString());
      //  // Unstable assertion: assertNull(uRI0.getScheme());
      //  // Unstable assertion: assertFalse(boolean3 == boolean2);
      //  // Unstable assertion: assertTrue(boolean3 == boolean1);
      //  // Unstable assertion: assertFalse(boolean3 == boolean0);
      //  // Unstable assertion: assertFalse(boolean3);
      
      boolean boolean4 = UrlTool.isBlank("");
      //  // Unstable assertion: assertTrue(boolean4 == boolean0);
      //  // Unstable assertion: assertFalse(boolean4 == boolean3);
      //  // Unstable assertion: assertFalse(boolean4 == boolean1);
      //  // Unstable assertion: assertTrue(boolean4 == boolean2);
      //  // Unstable assertion: assertTrue(boolean4);
      
      String string3 = UrlTool.nullToEmpty("");
      //  // Unstable assertion: assertTrue(string3.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("", string3);
      
      boolean boolean5 = UrlTool.equalsIgnoreCase("", "acqIs#h");
      //  // Unstable assertion: assertFalse(boolean5 == boolean0);
      //  // Unstable assertion: assertFalse(boolean5 == boolean4);
      //  // Unstable assertion: assertTrue(boolean5 == boolean1);
      //  // Unstable assertion: assertTrue(boolean5 == boolean3);
      //  // Unstable assertion: assertFalse(boolean5 == boolean2);
      //  // Unstable assertion: assertFalse(boolean5);
      
      String string4 = UrlTool.nullToEmpty("");
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertTrue(string4.equals((Object)string2));
      //  // Unstable assertion: assertTrue(string4.equals((Object)string3));
      //  // Unstable assertion: assertTrue(string4.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string4);
      //  // Unstable assertion: assertEquals("", string4);
      
      boolean boolean6 = UrlTool.contains("acqIs#h", 'q');
      //  // Unstable assertion: assertTrue(boolean6 == boolean2);
      //  // Unstable assertion: assertFalse(boolean6 == boolean3);
      //  // Unstable assertion: assertTrue(boolean6 == boolean4);
      //  // Unstable assertion: assertFalse(boolean6 == boolean1);
      //  // Unstable assertion: assertFalse(boolean6 == boolean5);
      //  // Unstable assertion: assertTrue(boolean6 == boolean0);
      //  // Unstable assertion: assertTrue(boolean6);
      
      StringBuilder stringBuilder0 = new StringBuilder("<6C");
      //  // Unstable assertion: assertEquals("<6C", stringBuilder0.toString());
      //  // Unstable assertion: assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append("acqIs#h");
      //  // Unstable assertion: assertEquals("<6CacqIs#h", stringBuilder0.toString());
      //  // Unstable assertion: assertEquals("<6CacqIs#h", stringBuilder1.toString());
      //  // Unstable assertion: assertNotNull(stringBuilder1);
      //  // Unstable assertion: assertSame(stringBuilder0, stringBuilder1);
      //  // Unstable assertion: assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (double) 0);
      //  // Unstable assertion: assertEquals("0.0<6CacqIs#h", stringBuilder2.toString());
      //  // Unstable assertion: assertEquals("0.0<6CacqIs#h", stringBuilder0.toString());
      //  // Unstable assertion: assertEquals("0.0<6CacqIs#h", stringBuilder1.toString());
      //  // Unstable assertion: assertNotNull(stringBuilder2);
      //  // Unstable assertion: assertSame(stringBuilder2, stringBuilder0);
      //  // Unstable assertion: assertSame(stringBuilder2, stringBuilder1);
      //  // Unstable assertion: assertSame(stringBuilder0, stringBuilder1);
      //  // Unstable assertion: assertSame(stringBuilder0, stringBuilder2);
      //  // Unstable assertion: assertSame(stringBuilder1, stringBuilder2);
      //  // Unstable assertion: assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      //  // Unstable assertion: assertEquals("h#sIqcaC6<0.0", stringBuilder2.toString());
      //  // Unstable assertion: assertEquals("h#sIqcaC6<0.0", stringBuilder3.toString());
      //  // Unstable assertion: assertEquals("h#sIqcaC6<0.0", stringBuilder0.toString());
      //  // Unstable assertion: assertEquals("h#sIqcaC6<0.0", stringBuilder1.toString());
      //  // Unstable assertion: assertNotNull(stringBuilder3);
      //  // Unstable assertion: assertSame(stringBuilder2, stringBuilder3);
      //  // Unstable assertion: assertSame(stringBuilder2, stringBuilder0);
      //  // Unstable assertion: assertSame(stringBuilder2, stringBuilder1);
      //  // Unstable assertion: assertSame(stringBuilder3, stringBuilder1);
      //  // Unstable assertion: assertSame(stringBuilder3, stringBuilder0);
      //  // Unstable assertion: assertSame(stringBuilder3, stringBuilder2);
      //  // Unstable assertion: assertSame(stringBuilder0, stringBuilder3);
      //  // Unstable assertion: assertSame(stringBuilder0, stringBuilder1);
      //  // Unstable assertion: assertSame(stringBuilder0, stringBuilder2);
      //  // Unstable assertion: assertSame(stringBuilder1, stringBuilder3);
      //  // Unstable assertion: assertSame(stringBuilder1, stringBuilder2);
      //  // Unstable assertion: assertSame(stringBuilder1, stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder3.insert(1916, (CharSequence) stringBuilder2, 789, 0);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 1916
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = UrlTool.trim((CharSequence) null, 5);
      assertNull(string0);
      
      boolean boolean0 = UrlTool.startWith((CharSequence) null, (CharSequence) null, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = UrlTool.trim((CharSequence) stringBuilder0, 0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = UrlTool.subAfter(stringBuilder0, "", true);
      assertEquals("", stringBuilder0.toString());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Predicate<Character> predicate0 = Predicate.isEqual((Object) stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(predicate0);
      
      String string2 = UrlTool.trim((CharSequence) "", 0, (Predicate<Character>) predicate0);
      assertEquals("", stringBuilder0.toString());
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = UrlTool.isEmpty((CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = UrlTool.getCharset("6?5zA)[5");
      assertNull(string0);
      
      String string1 = UrlTool.blankToDefault((CharSequence) null, "6?5zA)[5");
      assertNotNull(string1);
      assertEquals("6?5zA)[5", string1);
      
      String string2 = UrlTool.removePrefix("6?5zA)[5", (CharSequence) null);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("6?5zA)[5", string2);
      
      String string3 = UrlTool.trim((CharSequence) "6?5zA)[5");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("6?5zA)[5", string3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = UrlTool.getCharset("</X\"fA&giV");
      assertNull(string0);
      
      String string1 = UrlTool.getCharset((String) null);
      assertNull(string1);
      
      String string2 = UrlTool.removeSuffix("</X\"fA&giV", (CharSequence) null);
      assertNotNull(string2);
      assertEquals("</X\"fA&giV", string2);
      
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder0.append((CharSequence) "</X\"fA&giV");
      assertEquals("</X\"fA&giV", stringBuilder0.toString());
      assertEquals("</X\"fA&giV", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'F';
      StringBuilder stringBuilder3 = stringBuilder0.append(3500L);
      assertEquals("</X\"fA&giV3500", stringBuilder0.toString());
      assertEquals("</X\"fA&giV3500", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      
      String string3 = UrlTool.subAfter(stringBuilder3, stringBuilder3, false);
      assertEquals("</X\"fA&giV3500", stringBuilder0.toString());
      assertEquals("</X\"fA&giV3500", stringBuilder3.toString());
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertEquals("", string3);
      
      Character character0 = Character.valueOf('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      String string4 = UrlTool.sub(stringBuilder2, '\u0000', 0);
      assertEquals("</X\"fA&giV3500", stringBuilder0.toString());
      assertEquals("</X\"fA&giV3500", stringBuilder2.toString());
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals("", string4);
      
      boolean boolean0 = UrlTool.endWith((CharSequence) "</X\"fA&giV", 'F');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = UrlTool.indexOf("N5Djnull", '3', 0, 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = UrlTool.contains("N5Djnull", '3');
      assertFalse(boolean0);
      
      String string0 = UrlTool.sub("N5Djnull", (-1), (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = UrlTool.indexOf("", '3', 0, 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = UrlTool.getCharset("m");
      assertNull(string0);
      
      String string1 = UrlTool.removeSuffix("m", (CharSequence) null);
      assertNotNull(string1);
      assertEquals("m", string1);
      
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((StringBuffer) null);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      String string2 = UrlTool.sub(stringBuilder0, 'N', 0);
      assertEquals("null", stringBuilder0.toString());
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("null", string2);
      
      String string3 = UrlTool.prependIfMissing("m", stringBuilder1, true, (CharSequence[]) null);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder1.toString());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("nullm", string3);
      
      String string4 = UrlTool.removePrefix("null", "m");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("null", string4);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'1', '\u0000'}, charArray0);
      assertEquals("1\u0000", stringBuilder0.toString());
      assertEquals("1\u0000", stringBuilder1.toString());
      assertEquals(2, charArray0.length);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      String string0 = UrlTool.sub(stringBuilder0, '1', '1');
      assertEquals("1\u0000", stringBuilder0.toString());
      assertNotNull(string0);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("", string0);
      
      String string1 = UrlTool.encodeBlank(stringBuilder0);
      assertEquals("1\u0000", stringBuilder0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("1%20", string1);
      
      String string2 = UrlTool.subSuf("", '1');
      assertNull(string2);
      
      boolean boolean0 = UrlTool.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = UrlTool.contains("1%20", '1');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = UrlTool.subAfter(stringBuilder0, (CharSequence) null, true);
      assertEquals("1\u0000", stringBuilder0.toString());
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertSame(stringBuilder0, stringBuilder1);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = UrlTool.getCharset("m");
      assertNull(string0);
      
      String string1 = UrlTool.removeSuffix("m", (CharSequence) null);
      assertNotNull(string1);
      assertEquals("m", string1);
      
      StringBuilder stringBuilder0 = new StringBuilder("m");
      assertEquals("m", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string2 = UrlTool.prependIfMissing("m", stringBuilder0, true, (CharSequence[]) null);
      assertEquals("m", stringBuilder0.toString());
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("m", string2);
      
      Matcher[] matcherArray0 = new Matcher[0];
      boolean boolean0 = UrlTool.isNotEmpty(matcherArray0);
      assertEquals(0, matcherArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = UrlTool.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder("$DKNo>l-]S!2,W");
      assertEquals("$DKNo>l-]S!2,W", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      assertEquals("$DKNo>l-]S!2,W", stringBuilder0.toString());
      assertEquals(14, charBuffer0.remaining());
      assertEquals(14, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("$DKNo>l-]S!2,W", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(14, charBuffer0.length());
      assertEquals(14, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      String string0 = UrlTool.removeSuffix(charBuffer0, "$DKNo>l-]S!2,W");
      assertEquals("$DKNo>l-]S!2,W", stringBuilder0.toString());
      assertEquals(14, charBuffer0.remaining());
      assertEquals(14, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("$DKNo>l-]S!2,W", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(14, charBuffer0.length());
      assertEquals(14, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = UrlTool.defaultIfNull((String) null, (String) null);
      assertNull(string0);
      
      String string1 = UrlTool.getCharset("b6Z1Sz<)Un");
      assertNull(string1);
      
      boolean boolean0 = UrlTool.endWith((CharSequence) null, (CharSequence) "b6Z1Sz<)Un", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = UrlTool.getCharset("uj;wvad5d:hov&n+!jv?/yt-ilc7uu*42true2a");
      assertNull(string0);
      
      boolean boolean0 = UrlTool.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = UrlTool.endWith((CharSequence) "uj;wvad5d:hov&n+!jv?/yt-ilc7uu*42true2a", (CharSequence) null, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      boolean boolean0 = UrlTool.isNotEmpty((Map<?, ?>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = UrlTool.endWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = UrlTool.encodeBlank("dn=9&8Ommd4Np:vW");
      assertNotNull(string0);
      assertEquals("dn=9&8Ommd4Np:vW", string0);
      
      boolean boolean1 = UrlTool.isEmpty((CharSequence) "dn=9&8Ommd4Np:vW");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = UrlTool.blankToDefault("charsets*=s*([a-z0-9-]*)", "charsets*=s*([a-z0-9-]*)");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("charsets*=s*([a-z0-9-]*)", string1);
      
      boolean boolean2 = UrlTool.startWith("charsets*=s*([a-z0-9-]*)", "charsets*=s*([a-z0-9-]*)", true, true);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = UrlTool.subAfter("dn=9&8Ommd4Np:vW", "charsets*=s*([a-z0-9-]*)", false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(112);
      assertEquals(112, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(112, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(112, charBuffer0.remaining());
      assertEquals(112, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      StringBuilder stringBuilder0 = new StringBuilder("ov&n+!J]#?/yT-iLc7}U");
      assertEquals("ov&n+!J]#?/yT-iLc7}U", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = UrlTool.isBlank(charBuffer0);
      assertEquals(112, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(112, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(112, charBuffer0.remaining());
      assertEquals(112, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(boolean0);
      
      UrlTool.appendHex(stringBuilder0, (byte)42, true);
      assertEquals("ov&n+!J]#?/yT-iLc7}U2a", stringBuilder0.toString());
      
      boolean boolean1 = UrlTool.startWith(stringBuilder0, "ov&n+!J]#?/yT-iLc7}U", false, true);
      assertEquals("ov&n+!J]#?/yT-iLc7}U2a", stringBuilder0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("b~#k89%~h9lv", (-689));
      assertEquals("b~#k89%~h9lv", pattern0.toString());
      assertEquals("b~#k89%~h9lv", pattern0.pattern());
      assertEquals((-689), pattern0.flags());
      assertNotNull(pattern0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      String string0 = UrlTool.prependIfMissing("b~#k89%~h9lv", (CharSequence) null, true, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("b~#k89%~h9lv", string0);
      
      // Undeclared exception!
      try { 
        UrlTool.get(pattern0, (CharSequence) "b~#k89%~h9lv", (-689));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group -689
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = UrlTool.indexOf((CharSequence) null, 'Z', (-1344), 2227);
      assertEquals((-1), int0);
      
      String string0 = UrlTool.blankToDefault((CharSequence) null, "com.axios.core.tool.UrlTool");
      assertNotNull(string0);
      assertEquals("com.axios.core.tool.UrlTool", string0);
      
      boolean boolean0 = UrlTool.endWith((CharSequence) "com.axios.core.tool.UrlTool", '`');
      assertFalse(boolean0);
      
      String string1 = UrlTool.encodeBlank("com.axios.core.tool.UrlTool");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("com.axios.core.tool.UrlTool", string1);
      
      boolean boolean1 = UrlTool.isBlank("com.axios.core.tool.UrlTool");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean2 = UrlTool.contains(stringBuilder0, 'Z');
      assertEquals("", stringBuilder0.toString());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "com.axios.exception.ConnException";
      String string1 = UrlTool.getCharset("com.axios.exception.ConnException");
      assertNull(string1);
      
      boolean boolean0 = UrlTool.isNotEmpty((CharSequence) "com.axios.exception.ConnException");
      assertTrue(boolean0);
      
      boolean boolean1 = UrlTool.isNotBlank((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = UrlTool.sub((CharSequence) null, 66, 66);
      assertNull(string2);
      
      int int0 = 0;
      String string3 = UrlTool.subSuf("com.axios.exception.ConnException", 0);
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("com.axios.exception.ConnException", string3);
      
      boolean boolean2 = UrlTool.contains("com.axios.exception.ConnException", ')');
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = UrlTool.getCharset((String) null);
      assertNull(string4);
      
      String string5 = UrlTool.get((Pattern) null, (CharSequence) "com.axios.exception.ConnException", 66);
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        UrlTool.toURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = new StringBuilder();
      assertEquals("", stringBuilder1.toString());
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder1);
      
      String string0 = UrlTool.sub(stringBuilder0, '1', '1');
      assertEquals("", stringBuilder0.toString());
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertNotNull(string0);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertEquals("", string0);
      
      String string1 = UrlTool.encodeBlank(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertEquals("", string1);
      
      boolean boolean0 = UrlTool.contains("", '1');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = UrlTool.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        UrlTool.toUrlForHttp("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Url is blank !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) stringBuffer0;
      charSequenceArray0[1] = (CharSequence) stringBuffer0;
      String string0 = UrlTool.prependIfMissing(stringBuffer0, stringBuffer0, true, charSequenceArray0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("{/HH*&D9DMiW9*Q;");
      assertEquals("{/HH*&D9DMiW9*Q;", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append('d');
      assertEquals("{/HH*&D9DMiW9*Q;d", stringBuilder0.toString());
      assertEquals("{/HH*&D9DMiW9*Q;d", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder1);
      assertEquals("{/HH*&D9DMiW9*Q;d", stringBuilder0.toString());
      assertEquals("{/HH*&D9DMiW9*Q;d", stringBuilder1.toString());
      assertEquals("{/HH*&D9DMiW9*Q;d", stringBuffer0.toString());
      assertEquals(17, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      boolean boolean0 = UrlTool.endWith((CharSequence) stringBuffer0, (CharSequence) stringBuilder0);
      assertEquals("{/HH*&D9DMiW9*Q;d", stringBuilder0.toString());
      assertEquals("{/HH*&D9DMiW9*Q;d", stringBuilder1.toString());
      assertEquals("{/HH*&D9DMiW9*Q;d", stringBuffer0.toString());
      assertEquals(17, stringBuffer0.length());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("A^~H(#~W5#$|O,D:\".");
      assertEquals("A^~H(#~W5#$|O,D:\".", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = UrlTool.isNotEmpty((CharSequence) "A^~H(#~W5#$|O,D:\".");
      assertTrue(boolean0);
      
      boolean boolean1 = UrlTool.endWith((CharSequence) stringBuilder0, (CharSequence) stringBuilder0, true);
      assertEquals("A^~H(#~W5#$|O,D:\".", stringBuilder0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = UrlTool.getCharset("");
      assertNull(string0);
      
      String string1 = UrlTool.blankToDefault((CharSequence) null, "");
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      UrlTool.get((Pattern) null, (CharSequence) "cI2^,", (Consumer<Matcher>) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = new StringBuilder(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder1);
      
      String string0 = UrlTool.trim((CharSequence) stringBuilder1);
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotNull(string0);
      assertNotSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder1, stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("t");
      assertEquals("t", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      String string0 = UrlTool.nullToEmpty(stringBuilder0);
      assertEquals("t", stringBuilder0.toString());
      assertNotNull(string0);
      assertEquals("t", string0);
      
      String string1 = UrlTool.subAfter("t", "t", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = UrlTool.startWith(stringBuilder0, stringBuilder0, true, true);
      assertEquals("t", stringBuilder0.toString());
      assertFalse(boolean0);
      
      boolean boolean1 = UrlTool.endWith((CharSequence) "t", 't');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(65279, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(65279, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(65279, charBuffer0.length());
      assertEquals(65279, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Character> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<Character> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Predicate<Character> predicate3 = predicate0.and(predicate2);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      Predicate<Character> predicate4 = predicate3.negate();
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotNull(predicate4);
      
      // Undeclared exception!
      UrlTool.trim((CharSequence) charBuffer0, 65279, (Predicate<Character>) predicate4);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      String string0 = UrlTool.subSuf(charBuffer0, 0);
      String string1 = UrlTool.nullToEmpty(string0);
      charBuffer0.flip();
      // Undeclared exception!
      UrlTool.toURI(string1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (float) 0);
      StringBuilder stringBuilder3 = stringBuilder2.replace(0, 0, "com.axios.core.tool.mutable.MutableObj");
      UrlTool.trim((CharSequence) stringBuilder3, 0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int0 = 0;
      UrlTool.trim((CharSequence) "com.axios.core.tool.mutable.MutableObj", 0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      stringBuilder0.deleteCharAt(0);
      // Undeclared exception!
      try { 
        UrlTool.removePrefix(charBuffer0, "com.axios.core.tool.mutable.MutableObj");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      UrlTool.encodeBlank(charBuffer1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      charBuffer0.rewind();
      int int0 = 3270;
      String string0 = UrlTool.subSuf(charBuffer0, 3270);
      String string1 = UrlTool.nullToEmpty(string0);
      // Undeclared exception!
      UrlTool.trim((CharSequence) string1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = UrlTool.sub("l", (-1939), (-1939));
      assertEquals("l", string0);
      
      boolean boolean0 = UrlTool.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
      
      String string1 = UrlTool.subAfter("l", "l", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = UrlTool.emptyToDefault(stringBuffer0, "charsets*=s*([a-z0-9-]*)charsets*=s*([a-z0-9-]*)");
      String string1 = UrlTool.subAfter("charsets*=s*([a-z0-9-]*)charsets*=s*([a-z0-9-]*)", stringBuffer0, true);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      String string0 = UrlTool.subAfter(stringBuilder0, "", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append('0');
      CharSequence[] charSequenceArray0 = new CharSequence[25];
      String string0 = UrlTool.prependIfMissing("1s!<Q_cN&S>Bvj", stringBuilder1, true, charSequenceArray0);
      assertEquals("01s!<Q_cN&S>Bvj", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("t");
      String string0 = UrlTool.nullToEmpty(stringBuilder0);
      boolean boolean0 = UrlTool.endWith((CharSequence) "t", 't');
      assertTrue(boolean0);
      
      String string1 = UrlTool.removePrefix("t", "t");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = UrlTool.endWith((CharSequence) null, '$');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("]");
      boolean boolean0 = UrlTool.isNotBlank(stringBuffer0);
      boolean boolean1 = UrlTool.equalsIgnoreCase("]", stringBuffer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("cI2^,");
      UrlTool.get(pattern0, (CharSequence) "cI2^,", (Consumer<Matcher>) null);
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      UrlTool.getCharset("null");
      boolean boolean0 = UrlTool.endWith((CharSequence) null, (CharSequence) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = UrlTool.isNotEmpty((CharSequence) "[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      String string0 = UrlTool.subSuf("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank", 123);
      assertNotNull(string0);
      assertEquals("", string0);
      
      UrlTool.get((Pattern) null, (CharSequence) "", 123);
      boolean boolean1 = UrlTool.isNotEmpty((Map<?, ?>) null);
      assertFalse(boolean1 == boolean0);
      
      String string1 = UrlTool.encodeBlank("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      assertEquals("[Assertion%20failed]%20-%20this%20String%20argument%20must%20have%20text;%20it%20must%20not%20be%20null,%20empty,%20or%20blank", string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlTool.toUrlForHttp("com.axios.core.tool.UrlTool", (URLStreamHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no protocol: com.axios.core.tool.UrlTool
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      UrlTool.subSuf("}tVN6v", 0);
      String string0 = UrlTool.get((Pattern) null, (CharSequence) "}tVN6v", 1253);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "uJ;wvad5";
      stringArray0[3] = "d:H";
      stringArray0[4] = "uJ;wvad5";
      String string0 = UrlTool.removePrefix("d:H", stringArray0[0]);
      UrlTool.indexOf("d:H", 'G', 'G', 'G');
      boolean boolean0 = UrlTool.isNull("d:H");
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = new StringBuffer("uJ;wvad5");
      Integer integer0 = new Integer((-1));
      Predicate<Character> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Character> predicate1 = predicate0.negate();
      String string1 = UrlTool.trim((CharSequence) stringBuffer0, (int) 'G', (Predicate<Character>) predicate1);
      String string2 = UrlTool.trim((CharSequence) "d:H", (-1), (Predicate<Character>) predicate1);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = UrlTool.prependIfMissing("d:H", "uJ;wvad5", false, stringArray0);
      assertTrue(string3.equals((Object)string0));
      
      UrlTool.toString((CharSequence) "uJ;wvad5");
      int int0 = UrlTool.indexOf("uJ;wvad5", 'G', (-1), (-1));
      assertEquals((-1), int0);
      
      String string4 = UrlTool.removePrefix("uJ;wvad5", "d:H");
      assertEquals("uJ;wvad5", string4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      UrlTool.removeSuffix((CharSequence) null, (CharSequence) null);
      UrlTool.nullToEmpty("");
      String string0 = UrlTool.toString((CharSequence) "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      UrlTool.get((Pattern) null, (CharSequence) "!2cI2^,", (Consumer<Matcher>) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Pattern pattern0 = UrlTool.CHARSET_PATTERN;
      UrlTool.get(pattern0, (CharSequence) "001s!<Q_cT4NBK>BvK", (Consumer<Matcher>) null);
      assertEquals("charset\\s*=\\s*([a-z0-9-]*)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "uJ;wvad5";
      stringArray0[3] = "d:H";
      UrlTool.removePrefix("d:H", stringArray0[0]);
      UrlTool.indexOf("d:H", 'G', 'G', 'G');
      StringBuffer stringBuffer0 = new StringBuffer("uJ;wvad5");
      Integer integer0 = new Integer((-1));
      Predicate<Character> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Character> predicate1 = predicate0.negate();
      String string0 = UrlTool.trim((CharSequence) stringBuffer0, (int) 'G', (Predicate<Character>) predicate1);
      String string1 = UrlTool.trim((CharSequence) "d:H", (-1), (Predicate<Character>) predicate1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      UrlTool.toString((CharSequence) "uJ;wvad5");
      int int0 = UrlTool.indexOf("uJ;wvad5", 'G', (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append('0');
      CharSequence[] charSequenceArray0 = new CharSequence[25];
      String string0 = UrlTool.prependIfMissing("1s!<Q_cT4NBK>BvK", stringBuilder1, true, charSequenceArray0);
      assertEquals("01s!<Q_cT4NBK>BvK", string0);
      
      String string1 = UrlTool.removePrefix("1s!<Q_cT4NBK>BvK", stringBuilder0);
      assertEquals("1s!<Q_cT4NBK>BvK", string1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = UrlTool.isNotEmpty((Map<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      UrlTool.removeSuffix((CharSequence) null, (CharSequence) null);
      boolean boolean0 = UrlTool.containsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = UrlTool.endWith((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("0RI~WgQTR{x2vEWT;:n");
      stringBuilder0.insert(16, true);
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = UrlTool.prependIfMissing(stringBuilder0, "0RI~WgQTR{x2vEWT;:n", true, charSequenceArray0);
      assertEquals("0RI~WgQTR{x2vEWT;:n0RI~WgQTR{x2vEWTtrue;:n", string0);
      
      UrlTool.getCharset("0RI~WgQTR{x2vEWT;:n");
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      String string1 = UrlTool.subSuf(stringBuilder0, 8234);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = UrlTool.indexOf("com.axios.exception.ConnException", '3', '3', '3');
      assertEquals((-1), int0);
      
      String string0 = UrlTool.sub("com.axios.exception.ConnException", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn("9'%P@8f7:").when(httpURLConnection0).getContentType();
      UrlTool.getCharset(httpURLConnection0);
      UrlTool urlTool0 = new UrlTool();
      UrlTool.get(urlTool0.CHARSET_PATTERN, (CharSequence) null, 5);
      Consumer<Matcher> consumer0 = (Consumer<Matcher>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      UrlTool.get(urlTool0.CHARSET_PATTERN, (CharSequence) null, (Consumer<Matcher>) consumer0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = UrlTool.isNotEmpty(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("t");
      UrlTool.nullToEmpty(stringBuilder0);
      String string0 = UrlTool.subAfter("t", "t", true);
      assertEquals("", string0);
      
      boolean boolean0 = UrlTool.endWith((CharSequence) "t", 't');
      assertTrue(boolean0);
      
      UrlTool.nullToEmpty((CharSequence) null);
      String string1 = UrlTool.sub("t", (-1227), (-533));
      assertEquals("t", string1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn("A[]]bo5w").when(httpURLConnection0).getContentType();
      UrlTool.getCharset(httpURLConnection0);
      UrlTool.subAfter((CharSequence) null, (CharSequence) null, true);
      UrlTool.startWith((CharSequence) null, (CharSequence) null, true, true);
      String string0 = UrlTool.subAfter("A[]]bo5w", (CharSequence) null, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      UrlTool.removeSuffix((CharSequence) null, (CharSequence) null);
      String string0 = UrlTool.subSuf("", 1284);
      assertNull(string0);
      
      HashMap<String, Matcher> hashMap0 = new HashMap<String, Matcher>();
      hashMap0.put("", (Matcher) null);
      boolean boolean0 = UrlTool.isNotEmpty((Map<?, ?>) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      UrlTool.getCharset("\",");
      boolean boolean0 = UrlTool.isNotBlank((CharSequence) null);
      String string0 = UrlTool.encodeBlank("\",");
      assertNotNull(string0);
      assertEquals("\",", string0);
      
      boolean boolean1 = UrlTool.endWith((CharSequence) "\",", (CharSequence) null, false);
      assertFalse(boolean1);
      
      boolean boolean2 = UrlTool.endWith((CharSequence) null, (CharSequence) "\",", false);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(156);
      StringBuilder stringBuilder0 = new StringBuilder("v&n+!J]#?/yT-iLc77}U");
      UrlTool.isBlank(charBuffer0);
      UrlTool.appendHex(stringBuilder0, (byte)42, true);
      UrlTool.startWith(stringBuilder0, "v&n+!J]#?/yT-iLc77}U", false, true);
      // Undeclared exception!
      try { 
        UrlTool.toUrlForHttp("v&n+!J]#?/yT-iLc77}U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no protocol: v&n+!J]#?/yT-iLc77}U
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      UrlTool.endWith((CharSequence) null, (CharSequence) null);
      UrlTool.get((Pattern) null, (CharSequence) "dn=9&8Ommd4Np:vW", (int) 'D');
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.getHttpExample();
      UrlTool.sub("charsets*=s*([a-z0-9-]*)", 46, 46);
      String[] stringArray0 = new String[13];
      stringArray0[3] = "charsets*=s*([a-z0-9-]*)";
      stringArray0[4] = "dn=9&8Ommd4Np:vW";
      UrlTool.isNotEmpty((CharSequence) "charsets*=s*([a-z0-9-]*)");
      UrlTool.prependIfMissing("charsets*=s*([a-z0-9-]*)", "dn=9&8Ommd4Np:vW", true, stringArray0);
      UrlTool.prependIfMissing("dn=9&8Ommd4Np:vW", "dn=9&8Ommd4Np:vW", true, stringArray0);
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn("charsets*=s*([a-z0-9-]*)").when(httpURLConnection0).getContentType();
      String string0 = UrlTool.getCharset(httpURLConnection0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Character> linkedList0 = new LinkedList<Character>();
      UrlTool.isEmpty((Collection<?>) linkedList0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      UrlTool.removePrefix((CharSequence) null, (CharSequence) null);
      String string0 = UrlTool.emptyToDefault("", "000");
      UrlTool.emptyToDefault("000", "000");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2);
      linkedList0.add(integer0);
      boolean boolean0 = UrlTool.isEmpty((Collection<?>) linkedList0);
      String string1 = UrlTool.removeSuffix("000", "000");
      String string2 = UrlTool.removePrefix("000", "000");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      boolean boolean1 = UrlTool.isNotEmpty(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      StringBuilder stringBuilder1 = stringBuilder0.append((float) (-16));
      UrlTool.trim((CharSequence) stringBuffer0, (-16));
      UrlTool.emptyToDefault("", (String) null);
      UrlTool.trim((CharSequence) null, 0);
      UrlTool.toURI("I*-Osz#+kni-Ebr");
      stringBuilder0.codePoints();
      UrlTool.equalsIgnoreCase("", "");
      UrlTool.sub("I*-Osz#+kni-Ebr", (byte)47, 1541);
      UrlTool.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      UrlTool.sub((CharSequence) null, (byte)47, (byte)47);
      UrlTool.removeSuffix("", "");
      UrlTool.defaultIfNull((Object) null, (Object) stringBuilder1);
      UrlTool.removeSuffix(stringBuilder1, (CharSequence) null);
      UrlTool.sub((CharSequence) null, 0, (-16));
      UrlTool.endWith((CharSequence) "-16.0", '1');
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        UrlTool.toUrlForHttp("[Assertion failed] - this argument is required; it must not be null", uRLStreamHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no protocol: [Assertion%20failed]%20-%20this%20argument%20is%20required;%20it%20must%20not%20be%20null
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      UrlTool.isNotEmpty((CharSequence) null);
      UrlTool.trim((CharSequence) null);
      UrlTool.equals((CharSequence) null, (CharSequence) "", false);
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      UrlTool.prependIfMissing((CharSequence) null, (CharSequence) null, false, charSequenceArray0);
      String string0 = UrlTool.removeSuffix((CharSequence) null, (CharSequence) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = UrlTool.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      UrlTool.getCharset("");
      UrlTool.sub("", 3122, 3122);
      UrlTool.toString((CharSequence) null);
      boolean boolean1 = UrlTool.endWith((CharSequence) "", (CharSequence) "", true);
      String string0 = UrlTool.sub("", 3122, 3122);
      assertNotNull(string0);
      
      boolean boolean2 = UrlTool.startWith("", (CharSequence) null, true, true);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      UrlTool.removePrefix((CharSequence) null, (CharSequence) null);
      UrlTool.blankToDefault("", "");
      UrlTool.containsIgnoreCase("", "");
      UrlTool.getCharset((HttpURLConnection) null);
      UrlTool.startWith("", "", true, true);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("-5l/|A5!</");
      UrlTool.get(pattern0, (CharSequence) "-5l/|A5!</", 0);
      UrlTool.isNotBlank("-5l/");
      String string0 = "'zK/VAU@O)S-)j8\\";
      UrlTool.blankToDefault("'zK/VAU@O)S-)j8", "'zK/VAU@O)S-)j8");
      UrlTool.subAfter("-5l/", "'zK/VAU@O)S-)j8", false);
      StringBuilder stringBuilder0 = new StringBuilder("-5l/|A5!</");
      UrlTool.indexOf("'zK/VAU@O)S-)j8", '7', 0, 0);
      // Undeclared exception!
      try { 
        UrlTool.toURI((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      UrlTool.getCharset("");
      UrlTool.removeSuffix("", (CharSequence) null);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      StringBuilder stringBuilder1 = stringBuilder0.append((StringBuffer) null);
      String string0 = UrlTool.subAfter(stringBuilder1, stringBuilder1, true);
      UrlTool.isNull('\u0000');
      UrlTool.sub(stringBuilder0, 2, 0);
      UrlTool.endWith((CharSequence) "", '\u0000');
      UrlTool.prependIfMissing("", stringBuilder1, false, (CharSequence[]) null);
      Pattern pattern0 = UrlTool.CHARSET_PATTERN;
      pattern0.matcher("");
      UrlTool.prependIfMissing("", (CharSequence) null, false, (CharSequence[]) null);
      UrlTool.appendHex(stringBuilder0, (byte)55, false);
      assertEquals("null37", stringBuilder0.toString());
      
      HashMap<Matcher, Integer> hashMap0 = new HashMap<Matcher, Integer>();
      UrlTool.isNotEmpty((Map<?, ?>) hashMap0);
      String string1 = UrlTool.subAfter("", "", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      UrlTool.getCharset("Url is blank !");
      UrlTool.contains("Url is blank !", 'n');
      UrlTool.startWith((CharSequence) null, "Url is blank !", false, true);
      UrlTool.encodeBlank((CharSequence) null);
      UrlTool.contains((CharSequence) null, 'n');
      Object object0 = UrlTool.defaultIfNull((Object) "Url is blank !", (Object) "Url is blank !");
      assertEquals("Url is blank !", object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 100);
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      UrlTool.trim((CharSequence) stringBuffer0, 0);
      UrlTool.emptyToDefault("100", (String) null);
      stringBuilder1.append((long) 0);
      UrlTool.equalsIgnoreCase("100", (CharSequence) null);
      UrlTool.getCharset("100");
      UrlTool.removeSuffix(stringBuilder0, "100");
      // Undeclared exception!
      try { 
        UrlTool.toUrlForHttp("1000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no protocol: 1000
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }
}
