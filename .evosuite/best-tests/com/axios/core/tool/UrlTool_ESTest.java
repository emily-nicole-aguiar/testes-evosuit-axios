/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 00:54:23 GMT 2024
 */

package com.axios.core.tool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.tool.UrlTool;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UrlTool_ESTest extends UrlTool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = UrlTool.indexOf("W ITv>w", '7', 1, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = UrlTool.indexOf("c}o", '7', 3, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = UrlTool.subAfter("charsets*=s*([a-z0-9-]*)charsets*=s*([a-z0-9-]*)", stringBuffer0, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[4];
      stringBuilder0.append(3500L);
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      stringBuilder1.append((StringBuffer) null);
      String string0 = UrlTool.sub(stringBuilder0, 10, 0);
      assertEquals("3500\u0000\u0000\u0000\u0000nu", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(677);
      char[] charArray0 = new char[4];
      stringBuilder0.append(charArray0);
      stringBuilder0.append((StringBuffer) null);
      String string0 = UrlTool.sub(stringBuilder0, 8, 0);
      assertEquals("\u0000\u0000\u0000\u0000null", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("0");
      String string0 = UrlTool.sub(stringBuffer0, (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = UrlTool.removeSuffix("M\"FP`_OR+(Z+PD,", "+PD,");
      assertEquals("M\"FP`_OR+(Z", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = UrlTool.removeSuffix("%20", "%20");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = UrlTool.removePrefix("charsets*=s*([a-z0-9-]*)", "charsets*=s*([a-z0-9-]");
      assertEquals("*)", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = UrlTool.endWith((CharSequence) "", (CharSequence) "", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("t");
      boolean boolean0 = UrlTool.endWith((CharSequence) stringBuilder0, 'e');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Predicate<Character> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(predicate1).test(any());
      Predicate<Character> predicate2 = predicate0.or(predicate1);
      Predicate<Character> predicate3 = predicate2.negate();
      String string0 = UrlTool.trim((CharSequence) "charsets*=s*([a-z0-9-]*)", 3, predicate3);
      assertEquals("charsets*=s*([a-z0-9-]*", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = UrlTool.startWith("p^_Wl", "", false, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = UrlTool.defaultIfNull((Object) null, object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("$Gk![Q@");
      String string0 = UrlTool.trim((CharSequence) stringBuilder0, 2435);
      assertEquals("$Gk![Q@", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = UrlTool.trim((CharSequence) "", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(3658);
      String string0 = UrlTool.trim((CharSequence) stringBuffer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = UrlTool.toUrlForHttp("B8J:xn:", uRLStreamHandler0);
      assertEquals("b8j", uRL0.getProtocol());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      URI uRI0 = UrlTool.toURI("d:H");
      assertTrue(uRI0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      URI uRI0 = UrlTool.toURI("");
      assertEquals((-1), uRI0.getPort());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("L0");
      String string0 = UrlTool.toString((CharSequence) stringBuffer0);
      assertEquals("L0", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1804);
      stringBuilder0.append(true);
      String string0 = UrlTool.subSuf(stringBuilder0, 1804);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("t");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[5] = (CharSequence) "";
      stringBuilder0.insert(0, 'G');
      String string0 = UrlTool.subAfter(stringBuilder0, charSequenceArray0[5], false);
      assertEquals("Gt", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = UrlTool.indexOf("dn=9&8Ommd4Np:vW", 'd', 68, 46);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("", 0);
      String string0 = UrlTool.get(pattern0, (CharSequence) "", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("^%l&9r<~.C(h.Tf4*O5");
      stringBuffer0.insert(0, 0);
      boolean boolean0 = UrlTool.equalsIgnoreCase(stringBuffer0, "^%l&9r<~.C(h.Tf4*O5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("frZ{H]j0k:Z;o");
      boolean boolean0 = UrlTool.endWith((CharSequence) stringBuilder0, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      String string0 = UrlTool.encodeBlank(stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = UrlTool.emptyToDefault((CharSequence) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = UrlTool.emptyToDefault("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = UrlTool.blankToDefault((CharSequence) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = UrlTool.blankToDefault("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlTool.trim((CharSequence) "nZZa2'y.zu", (-1245), (Predicate<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        UrlTool.toUrlForHttp((String) null, uRLStreamHandler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Url is blank !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlTool.toUrlForHttp("#u0kqDZXD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no protocol: #u0kqDZXD
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = MockURL.URL(uRL0, "SE\"1p#IZzL*B");
      try { 
        UrlTool.toURI(uRL1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal character in path at index 41: ftp://ftp.someFakeButWellFormedURL.org/SE\"1p#IZzL*B
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlTool.toURI((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        UrlTool.toURI("wa}^=GK7un");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal character in path at index 2: wa}^=GK7un
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      // Undeclared exception!
      try { 
        UrlTool.get(pattern0, (CharSequence) "", 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 1
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlTool.containsIgnoreCase("", (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlTool.appendHex((StringBuilder) null, (byte) (-6), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("?;;TOD&:__HvEB=I9");
      stringBuilder0.append(false);
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      int int0 = UrlTool.indexOf(stringBuffer0, 'a', 8, 979);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = UrlTool.indexOf("0", 'B', (-1477), (-1477));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = UrlTool.indexOf((CharSequence) null, ',', 70, (-2490));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1705);
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      String string0 = UrlTool.sub(stringBuilder1, 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = UrlTool.startWith("charsets*=s*([a-z0-9-]", "charsets*=s*([a-z0-9-]*)", true, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("t");
      String string0 = UrlTool.nullToEmpty(stringBuilder0);
      boolean boolean0 = UrlTool.startWith(string0, stringBuilder0, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = UrlTool.endWith((CharSequence) null, (CharSequence) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char char0 = 'j';
      String string0 = Character.getName(char0);
      boolean boolean0 = UrlTool.isEmpty((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = UrlTool.isEmpty((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Predicate<Character> predicate0 = Predicate.isEqual((Object) null);
      String string0 = UrlTool.trim((CharSequence) "charsets*=s*([a-z0-9-]*)", 3, predicate0);
      assertEquals("charsets*=s*([a-z0-9-]*)", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Predicate<Character> predicate0 = Predicate.isEqual((Object) hashMap0);
      String string0 = UrlTool.trim((CharSequence) "charsets*=s*([a-z0-9-]*)", (-3430), predicate0);
      assertEquals("charsets*=s*([a-z0-9-]*)", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Predicate<Character> predicate0 = Predicate.isEqual((Object) "");
      String string0 = UrlTool.trim((CharSequence) null, 68, predicate0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = UrlTool.trim((CharSequence) "com.axios.exception.ConnException");
      assertEquals("com.axios.exception.ConnException", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = UrlTool.trim((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Pattern pattern0 = UrlTool.CHARSET_PATTERN;
      Consumer<Matcher> consumer0 = (Consumer<Matcher>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      UrlTool.get(pattern0, (CharSequence) "0", consumer0);
      assertEquals("charset\\s*=\\s*([a-z0-9-]*)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("com.axios.exception.ConnException", (-837));
      Consumer<Matcher> consumer0 = (Consumer<Matcher>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      UrlTool.get(pattern0, (CharSequence) "com.axios.exception.ConnException", consumer0);
      assertEquals((-837), pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = UrlTool.getCharset("com.axios.exception.ConnException");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = UrlTool.isBlank("com.axios.exception.ConnException");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(112);
      boolean boolean0 = UrlTool.isBlank(charBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = UrlTool.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = UrlTool.equals((CharSequence) "com.axios.core.tool.mutable.MutableObj", (CharSequence) "com.axios.core.tool.mutable.MutableObj", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = UrlTool.equals((CharSequence) null, (CharSequence) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = UrlTool.isNull((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = UrlTool.isNull(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = UrlTool.encodeBlank("%0%_vLu");
      assertEquals("%0%_vLu", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = UrlTool.indexOf("N5Djnull", '3', 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = UrlTool.contains(charSequenceArray0[4], 'l');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = UrlTool.contains("11%20", '1');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      UrlTool.appendHex(stringBuilder0, (byte) (-1), true);
      assertEquals("ff", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      UrlTool.appendHex(stringBuilder0, (byte)47, false);
      assertEquals("2F", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("t");
      String string0 = UrlTool.nullToEmpty(stringBuilder0);
      String string1 = UrlTool.subAfter("t", string0, false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = UrlTool.subAfter("W ITv>w", "'zK/VAU@O)S-)j8", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[3];
      stringBuilder0.append(charArray0);
      String string0 = UrlTool.subAfter(stringBuilder0, (CharSequence) null, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = UrlTool.subAfter(charSequenceArray0[0], "W ITv>w", false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      String string0 = UrlTool.subAfter(stringBuilder0, "", false);
      assertNotNull(string0);
      
      boolean boolean0 = UrlTool.isEmpty((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[4];
      stringBuilder0.append(charArray0);
      String string0 = UrlTool.subAfter(stringBuilder0, stringBuilder0, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[4];
      stringBuilder0.append(charArray0);
      String string0 = UrlTool.sub(stringBuilder0, 10, 0);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = UrlTool.sub("charsets*=s*([a-z0-9-]*)", (-3430), (-3430));
      assertEquals("charsets*=s*([a-z0-9-]*)", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = UrlTool.sub("N5Djnull", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = UrlTool.sub("I*-Osz#+kni-Ebr", (-1955), 1541);
      assertEquals("I*-Osz#+kni-Ebr", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = UrlTool.sub("", 112, 5);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = UrlTool.sub((CharSequence) null, 102, (-1586));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = UrlTool.subSuf("com.axios.exception.ConnException", 0);
      assertNotNull(string0);
      assertEquals("com.axios.exception.ConnException", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = UrlTool.startWith((CharSequence) null, (CharSequence) null, false, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = UrlTool.startWith((CharSequence) null, "", true, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = UrlTool.startWith("", (CharSequence) null, true, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = UrlTool.startWith((CharSequence) null, (CharSequence) null, true, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[3] = "d:H";
      String string0 = UrlTool.prependIfMissing("d:H", "uJ;wvad5", false, stringArray0);
      assertEquals("d:H", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append('1');
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = UrlTool.prependIfMissing("./Qe~", stringBuilder1, false, charSequenceArray0);
      assertEquals("1./Qe~", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[4];
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      String string0 = UrlTool.prependIfMissing("", stringBuilder1, false, (CharSequence[]) null);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = UrlTool.prependIfMissing("t", "t", true, charSequenceArray0);
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      stringBuffer0.append((long) 0);
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = UrlTool.prependIfMissing("", stringBuffer0, true, charSequenceArray0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = UrlTool.prependIfMissing("", (CharSequence) null, true, charSequenceArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = UrlTool.prependIfMissing((CharSequence) null, "", true, charSequenceArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = UrlTool.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = UrlTool.containsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      boolean boolean0 = UrlTool.isEmpty((Collection<?>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = UrlTool.isEmpty((Collection<?>) linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = UrlTool.isEmpty((Collection<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((long) 0);
      String string0 = UrlTool.removeSuffix(stringBuilder0, "100");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = UrlTool.removeSuffix((CharSequence) null, (CharSequence) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      String string0 = UrlTool.removeSuffix("{K&\"", stringBuffer0);
      assertEquals("{K&\"", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = UrlTool.removePrefix("uJ;wvad5d:H", "uJ;wvad5d:H");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = UrlTool.removePrefix("d:H", "uJ;wvad5");
      assertEquals("d:H", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = UrlTool.removePrefix("co", (CharSequence) null);
      assertEquals("co", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = UrlTool.toString((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = UrlTool.toString((CharSequence) "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = UrlTool.blankToDefault("W ITv>w", "W#(k");
      assertEquals("W ITv>w", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = UrlTool.emptyToDefault("", "co");
      assertEquals("co", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = UrlTool.emptyToDefault("com.axios.exception.ConnException", "com.axios.exception.ConnException");
      assertEquals("com.axios.exception.ConnException", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = UrlTool.endWith((CharSequence) null, (CharSequence) "%0%_vLu", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = UrlTool.endWith((CharSequence) "com.axios.exception.ConnException", (CharSequence) "com.axios.exception.ConnException", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = UrlTool.endWith((CharSequence) "%0%_vLu", (CharSequence) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = UrlTool.endWith((CharSequence) "t", 't');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = UrlTool.endWith((CharSequence) null, 'j');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = UrlTool.endWith((CharSequence) "1000", '1');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = UrlTool.isNotEmpty((CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = UrlTool.isNotEmpty((CharSequence) "com.axios.exception.ConnException");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = UrlTool.subSuf("", 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = UrlTool.removePrefix((CharSequence) null, (CharSequence) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("y%=TC");
      Integer integer0 = new Integer((-1));
      Predicate<Character> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Character> predicate1 = predicate0.negate();
      String string0 = UrlTool.trim((CharSequence) stringBuffer0, 49, predicate1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Predicate<Character> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Character> predicate1 = predicate0.negate();
      String string0 = UrlTool.trim((CharSequence) "%20%20", (-1224), predicate1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = UrlTool.trim((CharSequence) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlTool.toURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("com.axios.core.tool.mutable.MutableObj");
      String string0 = UrlTool.get(pattern0, (CharSequence) "com.axios.core.tool.mutable.MutableObj", 0);
      assertEquals("com.axios.core.tool.mutable.MutableObj", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("#G#<|", 0);
      UrlTool.get(pattern0, (CharSequence) "#G#<|", (Consumer<Matcher>) null);
      assertEquals("#G#<|", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      Consumer<Matcher> consumer0 = (Consumer<Matcher>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      UrlTool.get((Pattern) null, (CharSequence) stringBuilder0, consumer0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      UrlTool urlTool0 = new UrlTool();
      Consumer<Matcher> consumer0 = (Consumer<Matcher>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      UrlTool.get(urlTool0.CHARSET_PATTERN, (CharSequence) null, consumer0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = UrlTool.get((Pattern) null, (CharSequence) "com.axios.exception.ConnException", 66);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = UrlTool.getCharset((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = UrlTool.getCharset((HttpURLConnection) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn("9'%P@8f7:").when(httpURLConnection0).getContentType();
      String string0 = UrlTool.getCharset(httpURLConnection0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = UrlTool.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = UrlTool.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = UrlTool.isNotBlank("com.axios.core.tool.mutable.MutableObj");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = UrlTool.equals((CharSequence) "com.axios.core.tool.mutable.MutableObj", (CharSequence) "com.axios.core.tool.mutable.MutableObj", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = UrlTool.equals((CharSequence) "", (CharSequence) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = UrlTool.equals((CharSequence) null, (CharSequence) "U&", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = UrlTool.startWith("", "", true, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = UrlTool.isNotEmpty(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Matcher[] matcherArray0 = new Matcher[3];
      boolean boolean0 = UrlTool.isNotEmpty((Object[]) matcherArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = UrlTool.isNotEmpty((Integer[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      Object object0 = UrlTool.defaultIfNull((Object) stringBuffer0, (Object) stringBuilder0);
      assertSame(object0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = UrlTool.defaultIfNull((Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = UrlTool.nullToEmpty((CharSequence) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Integer, Character> hashMap0 = new HashMap<Integer, Character>();
      Integer integer0 = new Integer(605);
      Character character0 = new Character('-');
      hashMap0.put(integer0, character0);
      boolean boolean0 = UrlTool.isNotEmpty((Map<?, ?>) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      boolean boolean0 = UrlTool.isNotEmpty((Map<?, ?>) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = UrlTool.isNotEmpty((Map<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[3];
      stringBuilder0.append(charArray0);
      String string0 = UrlTool.encodeBlank(stringBuilder0);
      assertEquals("%20%20%20", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = UrlTool.encodeBlank((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      UrlTool urlTool0 = new UrlTool();
      String string0 = UrlTool.get(urlTool0.CHARSET_PATTERN, (CharSequence) null, (-989));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        UrlTool.toUrlForHttp("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Url is blank !
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = UrlTool.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URI uRI0 = UrlTool.toURI(uRL0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRI0.toString());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        UrlTool.toUrlForHttp("~)gVIt", uRLStreamHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no protocol: ~)gVIt
         //
         verifyException("com.axios.core.tool.UrlTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = UrlTool.endWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }
}
