/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 05:01:04 GMT 2024
 */

package com.axios.core.assertion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.assertion.Assert;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Assert_ESTest extends Assert_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1130;
      CharBuffer charBuffer0 = CharBuffer.allocate(1130);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charBuffer0.append('G');
      // Undeclared exception!
      try { 
        Assert.notBlank(charBuffer1, "ygJ9'9x([-c:=O`$kV");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Assert.isBlankChar(284);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(284);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Assert.isBlank(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      String string1 = "pM^Ela=q.3UGZ9n";
      Assert.isBlankChar(' ');
      Assert.notNull((Object) "");
      Assert.notNull((Object) "", "com.axios.core.assertion.Assert");
      String string2 = "`d%=VvpG+-dme";
      try { 
        Assert.notBlank("", "com.axios.core.assertion.Assert");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.axios.core.assertion.Assert
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Assert.isBlank(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Assert.isBlankChar(8234);
      Assert.isBlank((CharSequence) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '+';
      charArray0[2] = 'R';
      charArray0[3] = ']';
      CharBuffer.wrap(charArray0);
      // Undeclared exception!
      Assert.isBlank(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      // Undeclared exception!
      Assert.notBlank((CharSequence) charBuffer0, "");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "[Assertion failed] - this String argument must have text; it must not be null, empty, or blank";
      Assert.notBlank("o1P@5US:RqsV,REd", "[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      String string1 = "";
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notNull((Object) "", (Supplier<Throwable>) supplier0);
      char char0 = 'c';
      Assert.isBlankChar('c');
      int int0 = 65279;
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      // Undeclared exception!
      Assert.notBlank(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Assert.isBlankChar(0);
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notNull((Object) "", (Supplier<Throwable>) supplier0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      charBuffer0.rewind();
      charBuffer0.limit(0);
      Assert.notNull(charBuffer0);
      Assert.notNull(charBuffer0, "");
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      try { 
        Assert.notBlank("", (Supplier<Throwable>) supplier1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Assert.isBlankChar(']');
      try { 
        Assert.notNull((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = null;
      try { 
        Assert.notNull((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      try { 
        Assert.notNull((Object) null, (Supplier<Throwable>) supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(mockThrowable1).when(supplier0).get();
      try { 
        Assert.notNull((Integer) null, (Supplier<Throwable>) supplier0);
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        Assert.notNull((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = Assert.isBlankChar(8199);
      assertTrue(boolean0);
      
      Assert.isBlankChar(8199);
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Assert.notNull("U}9ct{F`~'on");
      Assert.isBlank("U}9ct{F`~'on");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Assert.notNull("[Assertion failed] - this argument is required; it must not be null", "[Assertion failed] - this argument is required; it must not be null");
      Assert.isBlankChar(0);
      Assert.isBlankChar('L');
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Assert.isBlankChar(0);
      try { 
        Assert.notBlank((CharBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have text; it must not be null, empty, or blank
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Assert.isBlankChar(65288);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Assert.notBlank(" 2,F7v");
      String string0 = "";
      String string1 = "pM^Ela=q.3UGZ9n";
      MockThrowable mockThrowable0 = new MockThrowable("pM^Ela=q.3UGZ9n");
      Assert.isBlankChar(' ');
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(mockThrowable0).when(supplier0).get();
      try { 
        Assert.notBlank("", (Supplier<Throwable>) supplier0);
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Assert.isBlankChar((-1214));
      CharBuffer charBuffer0 = CharBuffer.allocate(1538);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = '!';
      charArray0[2] = '1';
      charArray0[3] = 'F';
      charBuffer0.get(charArray0);
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      try { 
        Assert.notBlank(charBuffer1, (Supplier<Throwable>) supplier0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Assert.isBlankChar(9);
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("T$-RPY$gzV)+U3RF", (Supplier<Throwable>) supplier0);
      Assert.notNull("T$-RPY$gzV)+U3RF");
      Assert.isBlankChar('H');
      try { 
        Assert.notBlank("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have text; it must not be null, empty, or blank
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Assert assert0 = new Assert();
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = '9';
      charArray0[2] = 'R';
      charArray0[5] = '\u0000';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = Assert.notBlank(charBuffer0, (Supplier<Throwable>) null);
      assertTrue(charBuffer1.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = null;
      try { 
        Assert.notBlank((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have text; it must not be null, empty, or blank
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Assert.notNull((Object) "");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notBlank("%/?o", (Supplier<Throwable>) supplier0);
      Assert.notBlank("%/?o", "[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Assert.notNull((Object) "%/?o", (Supplier<Throwable>) supplier1);
      Assert.notBlank("%/?o");
      Assert.notBlank("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank", "");
      Assert.notBlank("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      Assert.isBlankChar(65279);
      Supplier<Throwable> supplier2 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      Assert.notBlank(charBuffer0, (Supplier<Throwable>) supplier2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      try { 
        Assert.notBlank("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have text; it must not be null, empty, or blank
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Supplier<Throwable> supplier0 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      MockThrowable mockThrowable0 = new MockThrowable();
      Supplier<Throwable> supplier1 = (Supplier<Throwable>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      MockThrowable mockThrowable1 = (MockThrowable)Assert.notNull((Throwable) mockThrowable0);
      assertNull(mockThrowable1.getMessage());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Assert.notNull("Z=sUBf");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "SaetGIh8J3c!)^$";
      try { 
        Assert.notNull((CharBuffer) null, "SaetGIh8J3c!)^$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SaetGIh8J3c!)^$
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Assert.notBlank("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      Assert.isBlankChar('7');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Assert.notNull((Object) "[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");
      Assert.isBlankChar(8234);
      try { 
        Assert.notBlank((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have text; it must not be null, empty, or blank
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Assert.isBlankChar(12);
      CharBuffer charBuffer0 = CharBuffer.allocate(12);
      String string0 = "'e>u";
      try { 
        Assert.notBlank((CharSequence) charBuffer0, "'e>u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'e>u
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }
}
