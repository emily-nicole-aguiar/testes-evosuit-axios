/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 04:26:25 GMT 2024
 */

package com.axios.core.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.cookie.ThreadLocalCookieStore;
import com.axios.core.connection.Connection;
import com.axios.core.http.HttpRequest;
import com.axios.core.http.url.UrlBuilder;
import com.axios.core.http.url.UrlPath;
import com.axios.core.http.url.UrlQuery;
import com.axios.core.requestMethod.RequestMethod;
import com.axios.core.resource.BytesResource;
import com.axios.core.resource.FileResource;
import com.axios.core.resource.MultiFileResource;
import com.axios.core.resource.Resource;
import com.axios.header.RequestHeader;
import com.axios.response.HttpResponse;
import java.io.File;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.HttpCookie;
import java.net.URI;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.sql.SQLRecoverableException;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpRequest_ESTest extends HttpRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("multipart/form-data");
      HttpRequest httpRequest1 = httpRequest0.body("HTTP/1.0");
      // Undeclared exception!
      try { 
        httpRequest1.body((String) null, "application/json");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("F:#");
      byte[] byteArray0 = new byte[1];
      HttpRequest httpRequest1 = httpRequest0.httpVersion("HTTP/1.0");
      HttpRequest httpRequest2 = httpRequest0.form("HTTP/1.1", byteArray0, "qnwIk3A2A?C,cv");
      assertSame(httpRequest2, httpRequest1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("A}~Y(>h-Qre+68@");
      httpRequest0.setMethod((RequestMethod) null);
      httpRequest0.getMethod();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("$3g~cSf,2sU5ZHQkUR");
      MockFile mockFile0 = new MockFile("HTTP/1.1");
      Path path0 = mockFile0.toPath();
      FileResource fileResource0 = new FileResource(path0);
      httpRequest0.form("HTTP/1.1", (Object) fileResource0);
      Map<String, Object> map0 = httpRequest0.form();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("455@8o~rzA~dp0'Dpy");
      Object object0 = new Object();
      httpRequest0.form("HTTP/1.1", object0);
      Map<String, Resource> map0 = httpRequest0.fileForm();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("OH6x4/AYI");
      File[] fileArray0 = new File[1];
      File file0 = MockFile.createTempFile("OH6x4/AYI", "HTTP/1.0", (File) null);
      fileArray0[0] = file0;
      httpRequest0.form("OH6x4/AYI", fileArray0);
      Map<String, Resource> map0 = httpRequest0.fileForm();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("close");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://close/");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "G7:c>l1");
      HttpResponse httpResponse0 = httpRequest0.executeAsync();
      assertNotNull(httpResponse0);
      assertEquals(200, httpResponse0.status);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("com.axios.core.requestMethod.RequestMethod");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://com.axios.core.requestMethod.RequestMethod/");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "i3`:d");
      RequestMethod requestMethod0 = RequestMethod.OPTIONS;
      httpRequest0.setMethod(requestMethod0);
      HttpResponse httpResponse0 = httpRequest0.execute();
      assertEquals(200, httpResponse0.status);
      assertNotNull(httpResponse0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("X6N6=pnSy");
      // Undeclared exception!
      try { 
        httpRequest0.setUrl("k8LJ3cjgDq'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("Keep-Alive");
      // Undeclared exception!
      try { 
        httpRequest0.setUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.put("9X&B?8*vsH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.put((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.post("i%ZC:O}viS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.post("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.patch("*!7mwBDDh)8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.patch((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.options("]+G2:j~jr6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.options("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("(_'D~\"nN;[_V\"m");
      Map<String, List<String>> map0 = (Map<String, List<String>>)httpRequest0.headers();
      httpRequest0.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest0.keepAlive(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("multipart/form-datacom.axios.core.tool.UrlTool");
      HttpRequest httpRequest1 = httpRequest0.enableDefaultCookie();
      httpRequest1.headers = null;
      // Undeclared exception!
      try { 
        httpRequest0.keepAlive(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch(",o{#g!t}y\"}\f/%[Ab");
      httpRequest0.headers = null;
      // Undeclared exception!
      try { 
        httpRequest0.isKeepAlive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.CaseInsensitiveMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.head("]b}25N&nN+dV._3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.head("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = new UrlPath();
      UrlBuilder urlBuilder0 = UrlBuilder.of("multipart/form-data", "+V$0d", 1626, urlPath0, (UrlQuery) null, "", charset0);
      HttpRequest httpRequest0 = new HttpRequest(urlBuilder0);
      // Undeclared exception!
      try { 
        httpRequest0.getUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.get("qd^zx>:|])|78");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.get((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("close");
      File file0 = MockFile.createTempFile("HTTP/1.1", "HTTP/1.0");
      File[] fileArray0 = new File[3];
      fileArray0[0] = file0;
      fileArray0[1] = file0;
      fileArray0[2] = file0;
      HttpRequest httpRequest1 = httpRequest0.form("HTTP/1.0", fileArray0);
      Map<String, List<String>> map0 = (Map<String, List<String>>)httpRequest1.headers();
      httpRequest1.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest1.form(".oz='lD)uJq[e$P$i", fileArray0);
       //  fail("Expecting exception: UnsupportedOperationException");
       // Unstable assertion
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("multipart/form-data");
      HttpRequest httpRequest1 = httpRequest0.keepAlive(false);
      byte[] byteArray0 = new byte[2];
      Map<String, List<String>> map0 = (Map<String, List<String>>)httpRequest0.headers();
      httpRequest1.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest1.form("TEXT_PLAIN", byteArray0, "PUT");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("multipart/form-data");
      byte[] byteArray0 = new byte[2];
      httpRequest0.headers = null;
      // Undeclared exception!
      try { 
        httpRequest0.form("TEXT_PLAIN", byteArray0, "PUT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.CaseInsensitiveMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("close");
      File file0 = MockFile.createTempFile("HTTP/1.1", "$in{Y8s%J8SNHG ");
      File[] fileArray0 = new File[3];
      fileArray0[0] = file0;
      fileArray0[2] = file0;
      // Undeclared exception!
      try { 
        httpRequest0.form("close", (Object) null, (Object[]) fileArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.ofHttp("m8ltipar?/orm-data", (Charset) null);
      HttpRequest httpRequest0 = new HttpRequest(urlBuilder0);
      HttpRequest httpRequest1 = httpRequest0.setMaxRedirectCount(2148);
      CookieManager cookieManager0 = new CookieManager();
      URI uRI0 = MockURI.aFTPURI;
      Map<String, List<String>> map0 = (Map<String, List<String>>)httpRequest0.headers;
      Map<String, List<String>> map1 = (Map<String, List<String>>)cookieManager0.get(uRI0, map0);
      httpRequest1.headers = map1;
      MockFile mockFile0 = new MockFile("HTTP/1.0", "Close");
      // Undeclared exception!
      try { 
        httpRequest1.form("Close", (Object) mockFile0);
       //  fail("Expecting exception: UnsupportedOperationException");
       // Unstable assertion
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("json");
      HttpRequest httpRequest1 = httpRequest0.enableDefaultCookie();
      Map<String, List<String>> map0 = (Map<String, List<String>>)httpRequest1.headers();
      httpRequest1.headers = map0;
      MockFile mockFile0 = new MockFile("json", "json");
      // Undeclared exception!
      try { 
        httpRequest1.form("HTTP/1.0", (File) mockFile0, "HTTP/1.0");
       //  fail("Expecting exception: UnsupportedOperationException");
       // Unstable assertion
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("multipart/form-data");
      httpRequest0.headers = null;
      File file0 = MockFile.createTempFile("HTTP/1.0", "ghZ+w^J\"Q");
      // Undeclared exception!
      try { 
        httpRequest0.form("HTTP/1.0", file0, "HTTP/1.0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.CaseInsensitiveMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("jr)unqX97!I(#22]");
      HttpRequest httpRequest1 = HttpRequest.post("HTTP/1.0");
      Map<String, List<String>> map0 = (Map<String, List<String>>)httpRequest0.headers();
      httpRequest1.headers = map0;
      MockFile mockFile0 = new MockFile("<o_ZiXh", "multipart/form-data");
      // Undeclared exception!
      try { 
        httpRequest1.form("HTTP/1.0", (File) mockFile0);
       //  fail("Expecting exception: UnsupportedOperationException");
       // Unstable assertion
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("com.axios.header.RequestHeader");
      // Undeclared exception!
      try { 
        httpRequest0.form("+V$0d", (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("KCu)Zt-qT+4H");
      Map<String, List<String>> map0 = (Map<String, List<String>>)httpRequest0.headers();
      httpRequest0.headers = map0;
      FileResource fileResource0 = new FileResource("HTTP/1.1");
      // Undeclared exception!
      try { 
        httpRequest0.form("HTTP/1.1", (Resource) fileResource0);
       //  fail("Expecting exception: UnsupportedOperationException");
       // Unstable assertion
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("multipart/form-data");
      byte[] byteArray0 = new byte[2];
      httpRequest0.headers = null;
      BytesResource bytesResource0 = new BytesResource(byteArray0);
      // Undeclared exception!
      try { 
        httpRequest0.form("HTTP/1.0", (Resource) bytesResource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.CaseInsensitiveMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("A}~Y(>h-Qre+68@");
      httpRequest0.setMethod((RequestMethod) null);
      // Undeclared exception!
      try { 
        httpRequest0.executeAsync();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.connection.Connection", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("muxtipat/?orm-data");
      // Undeclared exception!
      try { 
        httpRequest0.execute(false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("multipart/form-datacom.axios.core.tool.UrlTool");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest1 = httpRequest0.setUrlHandler(uRLStreamHandler0);
      // Undeclared exception!
      try { 
        httpRequest1.execute(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.connection.Connection", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("bhU+QNxhFC+");
      // Undeclared exception!
      try { 
        httpRequest0.execute();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      UrlBuilder urlBuilder0 = UrlBuilder.create();
      HttpRequest httpRequest0 = new HttpRequest(urlBuilder0);
      // Undeclared exception!
      try { 
        httpRequest0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.delete("=i ;X{*\"Zb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpRequest.delete("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("multipart/form-data");
      HttpRequest httpRequest1 = httpRequest0.timeout((byte)0);
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(threadLocalCookieStore0, cookiePolicy0);
      URI uRI0 = MockURI.create("HTTP/1.0");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Map<String, List<String>> map0 = (Map<String, List<String>>)cookieManager0.get(uRI0, hashMap0);
      httpRequest1.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest1.contentType("com.axios.core.http.HttpInterceptor$Interceptor");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("com.axios.header.RequestHeader");
      RequestMethod requestMethod0 = RequestMethod.CONNECT;
      HttpRequest httpRequest1 = httpRequest0.setMethod(requestMethod0);
      httpRequest1.headers = null;
      // Undeclared exception!
      try { 
        httpRequest1.contentType("HTTP/1.0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("bA`V`");
      HttpRequest httpRequest1 = httpRequest0.body("HTTP/1.1");
      Map<String, List<String>> map0 = (Map<String, List<String>>)httpRequest0.headers();
      httpRequest1.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest0.contentLength(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("com.axios.co7e.http");
      httpRequest0.headers = null;
      // Undeclared exception!
      try { 
        httpRequest0.contentLength(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("multipart/form-datajson");
      httpRequest0.headers = null;
      // Undeclared exception!
      try { 
        httpRequest0.contentLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.CaseInsensitiveMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("close");
      File file0 = MockFile.createTempFile("multipart/form-data", "multipart/form-data>lo&['iUK+[Y:^", (File) null);
      HttpRequest httpRequest1 = httpRequest0.form("", file0, "multipart/form-data");
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(threadLocalCookieStore0, cookiePolicy0);
      URI uRI0 = MockURI.aFileURI;
      Map<String, List<String>> map0 = (Map<String, List<String>>)httpRequest1.headers;
      Map<String, List<String>> map1 = (Map<String, List<String>>)cookieManager0.get(uRI0, map0);
      httpRequest1.headers = map1;
      // Undeclared exception!
      try { 
        httpRequest1.body("multipart/form-data", "xmnyjtab7e]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("close");
      HttpRequest httpRequest1 = httpRequest0.contentType("close");
      Map<String, List<String>> map0 = (Map<String, List<String>>)httpRequest1.headers();
      httpRequest1.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest0.body("{");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("close");
      HttpRequest httpRequest1 = httpRequest0.keepAlive(false);
      httpRequest1.headers = null;
      // Undeclared exception!
      try { 
        httpRequest0.body("{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.CaseInsensitiveMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpRequest httpRequest0 = null;
      try {
        httpRequest0 = new HttpRequest("vX:al");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpRequest httpRequest0 = null;
      try {
        httpRequest0 = new HttpRequest("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Http url must be not blank!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("}Fx#9;3,k6S]2");
      HttpRequest httpRequest1 = httpRequest0.body((byte[]) null);
      assertEquals("UTF-8", httpRequest1.charset());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("F:#");
      byte[] byteArray0 = new byte[1];
      HttpRequest httpRequest1 = httpRequest0.body(byteArray0);
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      HttpRequest httpRequest0 = new HttpRequest(urlBuilder0);
      RequestHeader requestHeader0 = RequestHeader.CONTENT_TYPE;
      httpRequest0.header(requestHeader0, "HTTP/1.0");
      HttpRequest httpRequest1 = httpRequest0.body("{%zjiimc;10iacc2aH", (String) null);
      assertSame(httpRequest0, httpRequest1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder();
      HttpRequest httpRequest0 = new HttpRequest(urlBuilder0);
      HttpRequest httpRequest1 = httpRequest0.body("{%zjiimc;10iacc2aH", (String) null);
      assertEquals("UTF-8", httpRequest1.charset());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("&`z,ac~f| lf");
      HttpRequest httpRequest1 = httpRequest0.body("ufk(]-]P{cZz_", (String) null);
      assertSame(httpRequest0, httpRequest1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("jr)unqX97!I(#22]");
      HttpCookie[] httpCookieArray0 = new HttpCookie[0];
      HttpRequest httpRequest1 = httpRequest0.cookie(httpCookieArray0);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("5A?t");
      HttpCookie[] httpCookieArray0 = new HttpCookie[1];
      HttpRequest httpRequest1 = httpRequest0.cookie(httpCookieArray0);
      assertEquals("UTF-8", httpRequest1.charset());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("KCu)Zt-qT+4H");
      boolean boolean0 = httpRequest0.isKeepAlive();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("multipart/form-data");
      HttpRequest httpRequest1 = httpRequest0.keepAlive(true);
      assertEquals("UTF-8", httpRequest1.charset());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("Keep-Alive");
      HttpRequest httpRequest1 = httpRequest0.setUrl((UrlBuilder) null);
      assertEquals(RequestMethod.DELETE, httpRequest1.getMethod());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("Keep-Alive");
      HttpRequest httpRequest1 = httpRequest0.setConnectionTimeout((-51));
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("R$9\"4)E");
      HttpRequest httpRequest1 = httpRequest0.cookie("D");
      assertEquals(RequestMethod.POST, httpRequest1.getMethod());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("KCu)Zt-qT+4H");
      HttpRequest httpRequest1 = httpRequest0.setReadTimeout((-3119));
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("bhU+QNxhFC+");
      HttpRequest httpRequest1 = httpRequest0.disableCookie();
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("close");
      MockFile mockFile0 = new MockFile("HTTP/1.0");
      FileResource fileResource0 = new FileResource(mockFile0);
      HttpRequest httpRequest1 = httpRequest0.form((String) null, (Resource) fileResource0);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put("multipart/form-data");
      Vector<File> vector0 = new Vector<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(vector0);
      httpRequest0.form("HTTP/1.1", (Resource) multiFileResource0);
      // Undeclared exception!
      try { 
        httpRequest0.executeAsync();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("close");
      RequestMethod requestMethod0 = RequestMethod.HEAD;
      HttpRequest httpRequest1 = httpRequest0.method(requestMethod0);
      HttpResponse httpResponse0 = httpRequest1.execute();
      assertEquals(404, httpResponse0.getStatus());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put("http/1.1");
      httpRequest0.body("");
      // Undeclared exception!
      try { 
        httpRequest0.executeAsync();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("~kivhAUM?;@.22,Q;M");
      // Undeclared exception!
      try { 
        httpRequest0.executeAsync();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://com.axios.core.re4uestMethod.RequestMethod/");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "multipart/form-datampultipart/form-data");
      HttpRequest httpRequest0 = HttpRequest.delete("com.axios.core.re4uestMethod.RequestMethod");
      httpRequest0.setFollowRedirects(true);
      RequestMethod requestMethod0 = RequestMethod.OPTIONS;
      httpRequest0.setMethod(requestMethod0);
      HttpResponse httpResponse0 = httpRequest0.execute(true);
      assertNotNull(httpResponse0);
      assertEquals(200, httpResponse0.status);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("jr)unqX97!I(#A22]");
      HttpRequest httpRequest1 = httpRequest0.setMaxRedirectCount((-1));
      byte[] byteArray0 = new byte[0];
      httpRequest1.bodyBytes = byteArray0;
      HttpResponse httpResponse0 = httpRequest0.executeAsync();
      assertEquals(404, httpResponse0.status);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("jr)unqX97!I(#22]");
      httpRequest0.body("jr)unqX97!I(#22]", "5]@^P}8En!D;>?+r){k");
      HttpResponse httpResponse0 = httpRequest0.execute(true);
      assertFalse(httpResponse0.isOk());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("multipart/form-datacom.axios.core.tool.UrlTool");
      RequestMethod requestMethod0 = RequestMethod.GET;
      HttpRequest httpRequest1 = httpRequest0.method(requestMethod0);
      httpRequest1.body("HTTP/1.1", "json");
      // Undeclared exception!
      try { 
        httpRequest0.execute(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("jr)unqX97!I(#22]");
      httpRequest0.setMaxRedirectCount(411);
      HttpResponse httpResponse0 = httpRequest0.execute(true);
      assertEquals("UTF-8", httpResponse0.charset());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("close");
      httpRequest0.execute();
      HttpResponse httpResponse0 = httpRequest0.executeAsync();
      assertEquals("UTF-8", httpResponse0.charset());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("close");
      httpRequest0.charset = null;
      HttpRequest httpRequest1 = httpRequest0.body("{");
      assertEquals(RequestMethod.OPTIONS, httpRequest1.getMethod());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("jr)unqX97!I(#22]");
      HttpRequest httpRequest1 = httpRequest0.form("HTTP/1.0", (Resource) null);
      assertSame(httpRequest0, httpRequest1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("~kivhAUM?;@.22,Q;M");
      HttpRequest httpRequest1 = httpRequest0.form("HTTP/1.0", (byte[]) null, "HTTP/1.1");
      assertSame(httpRequest0, httpRequest1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("~kivhAUM?;@.22,Q;M");
      HttpRequest httpRequest1 = httpRequest0.form("HTTP/1.0", (File) null, "HTTP/1.1");
      assertSame(httpRequest0, httpRequest1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("H6x4/AYI");
      File[] fileArray0 = new File[1];
      // Undeclared exception!
      try { 
        httpRequest0.form("H6x4/AYI", fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("jr)unqX97!I(#22]");
      HttpRequest httpRequest1 = httpRequest0.form("HTTP/1.0", (File[]) null);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("A}~Y(>h-Qre+68@");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("HTTP/1.1", "");
      HttpRequest httpRequest1 = httpRequest0.formStr(hashMap0);
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("$3g~cSf,2sU5ZHQkUR");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest1 = httpRequest0.formStr(hashMap0);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("close");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>((byte)98, (byte)98);
      HttpRequest httpRequest1 = httpRequest0.form((Map<String, Object>) hashMap0);
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put("multipart/form-data");
      HttpCookie[] httpCookieArray0 = new HttpCookie[4];
      HttpCookie httpCookie0 = new HttpCookie("HTTP/1.0", "multipart/form-data");
      httpCookieArray0[0] = httpCookie0;
      httpCookieArray0[2] = httpCookie0;
      HttpRequest httpRequest1 = httpRequest0.form("multipart/form-data", (Object) httpCookie0, (Object[]) httpCookieArray0);
      Vector<File> vector0 = new Vector<File>();
      MultiFileResource multiFileResource0 = new MultiFileResource(vector0);
      HttpRequest httpRequest2 = httpRequest0.form("HTTP/1.1", (Resource) multiFileResource0);
      assertSame(httpRequest2, httpRequest1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put("multipart/form-data");
      HttpCookie[] httpCookieArray0 = new HttpCookie[4];
      HttpCookie httpCookie0 = new HttpCookie("HTTP/1.0", "multipart/form-data");
      // Undeclared exception!
      try { 
        httpRequest0.form("multipart/form-data", (Object) httpCookie0, (Object[]) httpCookieArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("Close");
      HttpRequest httpRequest1 = httpRequest0.form(")Z7", (Object) null);
      assertSame(httpRequest1, httpRequest0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("F:#");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("qnwIk3A2A?C,cv", "HTTP/1.0", (Throwable) null);
      HttpRequest httpRequest1 = httpRequest0.form((String) null, (Object) sQLRecoverableException0);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("v");
      ArrayDeque<HttpCookie> arrayDeque0 = new ArrayDeque<HttpCookie>();
      HttpCookie httpCookie0 = new HttpCookie("]<G", "HTTP/1.1");
      arrayDeque0.offerFirst(httpCookie0);
      HttpRequest httpRequest1 = httpRequest0.cookie((Collection<HttpCookie>) arrayDeque0);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("Accept-Charset");
      MockFile mockFile0 = new MockFile("HTTP/1.0");
      HttpRequest httpRequest1 = httpRequest0.form("Accept-Charset", (File) mockFile0, "Accept-Charset");
      boolean boolean0 = httpRequest1.isKeepAlive();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("Accept-Charset");
      HttpRequest httpRequest1 = httpRequest0.setFollowRedirects(false);
      assertEquals(RequestMethod.DELETE, httpRequest1.getMethod());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpRequest.closeCookie();
      CookieManager cookieManager0 = HttpRequest.getCookieManager();
      assertNull(cookieManager0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("Accept-Charset");
      RequestMethod requestMethod0 = RequestMethod.TRACE;
      httpRequest0.setMethod(requestMethod0);
      HttpResponse httpResponse0 = httpRequest0.execute(false);
      assertEquals(404, httpResponse0.status);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("Close");
      httpRequest0.contentLength(5135);
      String string0 = httpRequest0.contentLength();
      assertEquals("5135", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CookieManager cookieManager0 = new CookieManager();
      HttpRequest.setCookieManager(cookieManager0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpRequest.setGlobalTimeout(404);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("F:#");
      Map<String, Object> map0 = httpRequest0.form();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("jr)unqX97!I(#22]");
      MockFile mockFile0 = new MockFile("<o_ZiXh", "multipart/form-data");
      HttpRequest httpRequest1 = httpRequest0.form("HTTP/1.0", (File) mockFile0);
      assertSame(httpRequest0, httpRequest1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("A}~Y(>h-Qre+68@");
      RequestMethod requestMethod0 = httpRequest0.getMethod();
      assertEquals(RequestMethod.PATCH, requestMethod0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("Close");
      String string0 = httpRequest0.getUrl();
      assertEquals("http://Close/", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("Accept-Charset");
      HttpRequest httpRequest1 = httpRequest0.setUrl("HTTP/1.0");
      assertEquals("UTF-8", httpRequest1.charset());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("Close");
      String string0 = httpRequest0.contentLength();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CookieManager cookieManager0 = HttpRequest.getCookieManager();
      assertNotNull(cookieManager0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("multipart/form-data");
      Connection connection0 = httpRequest0.getConnection();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("jr)unqX97!I(#22]");
      // Undeclared exception!
      try { 
        httpRequest0.fileForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put("multipart/form-data");
      ArrayDeque<HttpCookie> arrayDeque0 = new ArrayDeque<HttpCookie>();
      HttpRequest httpRequest1 = httpRequest0.cookie((Collection<HttpCookie>) arrayDeque0);
      // Undeclared exception!
      try { 
        httpRequest1.executeAsync();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("close");
      httpRequest0.executeAsync();
      Connection connection0 = httpRequest0.getConnection();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("multipart/form-data");
      httpRequest0.body("HTTP/1.0", "multipart/form-data");
      // Undeclared exception!
      try { 
        httpRequest0.execute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException("com.axios.core.http.HttpRequest", e);
      }
  }
}
