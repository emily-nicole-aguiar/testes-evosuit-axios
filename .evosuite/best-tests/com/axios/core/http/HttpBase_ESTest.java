/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 04:55:21 GMT 2024
 */

package com.axios.core.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.cookie.ThreadLocalCookieStore;
import com.axios.core.http.HttpRequest;
import com.axios.core.http.url.UrlBuilder;
import com.axios.core.http.url.UrlPath;
import com.axios.core.http.url.UrlQuery;
import com.axios.header.RequestHeader;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpBase_ESTest extends HttpBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("TO_EMPTY");
      httpRequest0.charset = null;
      Charset charset0 = Charset.defaultCharset();
      HttpRequest httpRequest1 = httpRequest0.charset(charset0);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("C");
      RequestHeader requestHeader0 = RequestHeader.ACCEPT_ENCODING;
      HttpRequest httpRequest1 = httpRequest0.removeHeader(requestHeader0);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("C");
      RequestHeader requestHeader0 = RequestHeader.ACCEPT_ENCODING;
      httpRequest0.header(requestHeader0, "");
      String string0 = httpRequest0.header(requestHeader0);
      assertNotNull(string0);
      assertEquals("HTTP/1.1", httpRequest0.httpVersion());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("TOY_MPY");
      httpRequest0.headers = null;
      // Undeclared exception!
      try { 
        httpRequest0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("true");
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(threadLocalCookieStore0, cookiePolicy0);
      URI uRI0 = MockURI.URI("");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Map<String, List<String>> map0 = cookieManager0.get(uRI0, hashMap0);
      httpRequest0.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest0.removeHeader("true");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put("Content-Length");
      httpRequest0.headers = null;
      // Undeclared exception!
      try { 
        httpRequest0.headers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("PWT");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("HTTP/1.1", "HTTP/1.0");
      ThreadLocalCookieStore threadLocalCookieStore0 = new ThreadLocalCookieStore();
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(threadLocalCookieStore0, cookiePolicy0);
      URI uRI0 = MockURI.create("HTTP/1.1");
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      Map<String, List<String>> map0 = (Map<String, List<String>>)cookieManager0.get(uRI0, hashMap1);
      httpRequest0.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest0.headerMap(hashMap0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("oAwwkOT");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest1 = httpRequest0.addHeaders(hashMap0);
      httpRequest1.headers = null;
      hashMap0.put("", "oAwwkOT");
      // Undeclared exception!
      try { 
        httpRequest1.headerMap(hashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("gAdww%");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("! x_;|P&WGb-F5Z", (List<String>) null);
      // Undeclared exception!
      try { 
        httpRequest0.header(hashMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("multipart/form-data");
      Map<String, List<String>> map0 = (Map<String, List<String>>)httpRequest0.headers();
      // Undeclared exception!
      try { 
        httpRequest0.header(map0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("Sy9");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("HTTP/1.1", (List<String>) null);
      // Undeclared exception!
      try { 
        httpRequest0.header(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("TEXT_HTML");
      HttpRequest httpRequest1 = httpRequest0.contentType("TEXT_HTML");
      CookieManager cookieManager0 = HttpRequest.getCookieManager();
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Map<String, List<String>> map0 = (Map<String, List<String>>)cookieManager0.get(uRI0, hashMap0);
      httpRequest1.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest0.header("", "mHCP4kLn/q#7zIf58SZ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("4Adwwk\"T");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest1 = httpRequest0.addHeaders(hashMap0);
      httpRequest1.headers = null;
      // Undeclared exception!
      try { 
        httpRequest1.header("HTTP/1.0", "k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("TOY_MPY");
      httpRequest0.headers = null;
      // Undeclared exception!
      try { 
        httpRequest0.header("TOY_MPY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.CaseInsensitiveMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("com.axios.core.http.HttpBase");
      RequestHeader requestHeader0 = RequestHeader.TRAILER;
      CookieManager cookieManager0 = HttpRequest.getCookieManager();
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of("HTTP/1.1", charset0);
      UrlQuery urlQuery0 = new UrlQuery();
      UrlBuilder urlBuilder0 = UrlBuilder.of("com.axios.core.http.HttpBase", "com.axios.core.http.HttpBase", 1163, urlPath0, urlQuery0, "com.axios.core.http.HttpBase", charset0);
      URI uRI0 = urlBuilder0.toURI();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Map<String, List<String>> map0 = (Map<String, List<String>>)cookieManager0.get(uRI0, hashMap0);
      httpRequest0.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest0.header(requestHeader0, "com.axios.core.http.HttpBase", true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("C");
      // Undeclared exception!
      try { 
        httpRequest0.header((RequestHeader) null, "HTTP/1.1", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("}sI[V/fc:(IdQux6x!");
      RequestHeader requestHeader0 = RequestHeader.DATE;
      CookieManager cookieManager0 = HttpRequest.getCookieManager();
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Map<String, List<String>> map0 = (Map<String, List<String>>)cookieManager0.get(uRI0, hashMap0);
      httpRequest0.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest0.header(requestHeader0, "}sI[V/fc:(IdQux6x!");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("com.axos.core.http.HttpBas");
      CookieManager cookieManager0 = new CookieManager();
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>(1982);
      Map<String, List<String>> map0 = (Map<String, List<String>>)cookieManager0.get(uRI0, hashMap0);
      httpRequest0.headers = map0;
      // Undeclared exception!
      try { 
        httpRequest0.clearHeaders();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("oAwwkOT");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest1 = httpRequest0.addHeaders(hashMap0);
      httpRequest1.headers = null;
      // Undeclared exception!
      try { 
        httpRequest1.clearHeaders();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("Sy9");
      // Undeclared exception!
      try { 
        httpRequest0.charset("Sy9");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Sy9
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("*e@~|Vo><kyx");
      HttpRequest httpRequest1 = HttpRequest.post("HTTP/1.1");
      HttpRequest httpRequest2 = httpRequest1.httpVersion("HTTP/1.0");
      httpRequest2.header(httpRequest0.headers, false);
      assertEquals("HTTP/1.0", httpRequest1.httpVersion());
      assertEquals("HTTP/1.1", httpRequest0.httpVersion());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("4)5K#1z5I`+FU{5");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      HttpRequest httpRequest1 = httpRequest0.header(hashMap0, true);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put("Accept");
      HttpRequest httpRequest1 = httpRequest0.header("CEmHrk{B", "MNXO", true);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("Sy9");
      HttpRequest httpRequest1 = httpRequest0.header("%20", "%20", false);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.patch("com.axios.core.http.url.UrlPath");
      HttpRequest httpRequest1 = httpRequest0.header("    ", (String) null, false);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put("?5T");
      HttpRequest httpRequest1 = httpRequest0.header("Accept", "Accept", false);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("C");
      RequestHeader requestHeader0 = RequestHeader.ACCEPT_ENCODING;
      String string0 = httpRequest0.header(requestHeader0);
      assertEquals("HTTP/1.1", httpRequest0.httpVersion());
      assertEquals("gzip, deflate", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("4Adwwk\"T");
      httpRequest0.headerList((String) null);
      assertEquals("HTTP/1.1", httpRequest0.httpVersion());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("Sy9");
      httpRequest0.headerList("%20");
      assertEquals("HTTP/1.1", httpRequest0.httpVersion());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("4Adwwk\"T");
      httpRequest0.header("HTTP/1.0");
      assertEquals("HTTP/1.1", httpRequest0.httpVersion());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("C");
      // Undeclared exception!
      try { 
        httpRequest0.header((RequestHeader) null, "V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("T4EEMPTY");
      httpRequest0.toString();
      assertEquals("HTTP/1.1", httpRequest0.httpVersion());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("RequeiCht Body ");
      // Undeclared exception!
      try { 
        httpRequest0.charset("RequeiCht Body ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // RequeiCht Body 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("pCOJ[j?h$>k|NDW_");
      HttpRequest httpRequest1 = httpRequest0.charset((String) null);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("TOY_MPY");
      HttpRequest httpRequest1 = httpRequest0.charset((Charset) null);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("true");
      HttpRequest httpRequest1 = httpRequest0.removeHeader("true");
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("o*wwkOT");
      HttpRequest httpRequest1 = httpRequest0.removeHeader((String) null);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("4Adwwk\"T");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("HTTP/1.0", "4Adwwk\"T");
      HttpRequest httpRequest1 = httpRequest0.addHeaders(hashMap0);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("Oguy>^duK");
      HttpRequest httpRequest1 = httpRequest0.header((Map<String, List<String>>) null);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("4AdwwkOT");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest1 = httpRequest0.headerMap(hashMap0, false);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("PWT");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("HTTP/1.1", "HTTP/1.0");
      HttpRequest httpRequest1 = httpRequest0.headerMap(hashMap0, true);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options("*e@~|Vo><kyx");
      // Undeclared exception!
      try { 
        httpRequest0.header(httpRequest0.headers, false);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("pCOJ[j?h$>k|NDW_");
      HttpRequest httpRequest1 = httpRequest0.header((String) null, (String) null, true);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.delete("^Bm7iM-9\"=");
      httpRequest0.header((RequestHeader) null);
      assertEquals("HTTP/1.1", httpRequest0.httpVersion());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("com.axios.core.http.HttpBase");
      HttpRequest httpRequest1 = httpRequest0.clearHeaders();
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get("C");
      // Undeclared exception!
      try { 
        httpRequest0.removeHeader((RequestHeader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.http.HttpBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.head("TEXT_HTML");
      HttpRequest httpRequest1 = httpRequest0.header("", "mHCP4kLn/q#7zIf58SZ");
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post("com.axios.core.http.HttpBase");
      RequestHeader requestHeader0 = RequestHeader.TRAILER;
      HttpRequest httpRequest1 = httpRequest0.header(requestHeader0, "com.axios.core.http.HttpBase", true);
      assertEquals("HTTP/1.1", httpRequest1.httpVersion());
  }
}
