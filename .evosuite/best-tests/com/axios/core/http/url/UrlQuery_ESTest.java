/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 04:35:35 GMT 2024
 */

package com.axios.core.http.url;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.http.url.UrlQuery;
import com.axios.core.rfc.PercentCodec;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UrlQuery_ESTest extends UrlQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("J\"x.u~ZR]lYJ=gZn;+", charset0, true);
      String string0 = urlQuery0.toString();
      assertEquals("J\"x.u~ZR]lYJ=gZn;+", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UrlQuery urlQuery0 = new UrlQuery();
      CharBuffer charBuffer0 = CharBuffer.allocate(32);
      UrlQuery urlQuery1 = urlQuery0.add(charBuffer0, charBuffer0);
      CharSequence charSequence0 = urlQuery1.get(charBuffer0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<CharBuffer, SQLNonTransientException> hashMap0 = new HashMap<CharBuffer, SQLNonTransientException>();
      UrlQuery urlQuery0 = UrlQuery.of((Map<? extends CharSequence, ?>) hashMap0, true);
      Charset charset0 = Charset.defaultCharset();
      String string0 = urlQuery0.build(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("l39)]PLOodT_5M[", charset0, true);
      Map<CharSequence, CharSequence> map0 = urlQuery0.getQueryMap();
      // Undeclared exception!
      try { 
        UrlQuery.of(map0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UrlQuery urlQuery0 = UrlQuery.of("?.N,8", (Charset) null, true);
      Map<CharSequence, CharSequence> map0 = urlQuery0.getQueryMap();
      // Undeclared exception!
      try { 
        UrlQuery.of(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of(",", charset0, false, true);
      // Undeclared exception!
      try { 
        urlQuery0.build((PercentCodec) null, (PercentCodec) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<CharBuffer, SQLRecoverableException> hashMap0 = new HashMap<CharBuffer, SQLRecoverableException>();
      UrlQuery urlQuery0 = UrlQuery.of((Map<? extends CharSequence, ?>) hashMap0);
      // Undeclared exception!
      try { 
        urlQuery0.add((CharSequence) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put((String) null, (Integer) null);
      UrlQuery urlQuery0 = null;
      try {
        urlQuery0 = new UrlQuery(hashMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<String, SQLIntegrityConstraintViolationException>();
      hashMap0.put("", (SQLIntegrityConstraintViolationException) null);
      UrlQuery urlQuery0 = null;
      try {
        urlQuery0 = new UrlQuery(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("gbk", charset0, false, true);
      Object object0 = new Object();
      urlQuery0.add("gbk", object0);
      PercentCodec percentCodec0 = new PercentCodec();
      String string0 = urlQuery0.build(percentCodec0, percentCodec0, charset0);
      //  // Unstable assertion: assertEquals("%67%62%6B&%67%62%6B=%6A%61%76%61%2E%6C%61%6E%67%2E%4F%62%6A%65%63%74%40%30%30%30%30%30%30%30%30%30%39", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("", charset0, true);
      PercentCodec percentCodec0 = PercentCodec.of((CharSequence) "");
      String string0 = urlQuery0.build(percentCodec0, percentCodec0, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("com.axios.core.rfc.RFC3986", charset0, true, true);
      String string0 = urlQuery0.build(charset0);
      assertEquals("com.axios.core.rfc.RFC3986", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("::aTGldWAz8", charset0, true);
      String string0 = urlQuery0.build(charset0);
      assertEquals("::aTGldWAz8", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UrlQuery urlQuery0 = new UrlQuery((Map<? extends CharSequence, ?>) null, false);
      UrlQuery urlQuery1 = urlQuery0.parse(":/?#[]&", (Charset) null, true);
      assertSame(urlQuery0, urlQuery1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("com.axios.core.rfc.RFC3986", charset0, true, true);
      UrlQuery urlQuery1 = urlQuery0.parse("com.axios.core.rfc.RFC3986", charset0, true);
      assertSame(urlQuery1, urlQuery0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("", charset0, true);
      UrlQuery urlQuery1 = urlQuery0.parse("", charset0, true);
      assertSame(urlQuery1, urlQuery0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("hvtp", charset0, false, false);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("h%76tp", charset0);
      UrlQuery urlQuery1 = urlQuery0.addAll(hashMap0);
      assertSame(urlQuery0, urlQuery1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, SQLTransactionRollbackException> hashMap0 = new HashMap<String, SQLTransactionRollbackException>();
      UrlQuery urlQuery0 = new UrlQuery(hashMap0, true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UrlQuery urlQuery0 = new UrlQuery(true);
      Map<CharSequence, CharSequence> map0 = urlQuery0.getQueryMap();
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery1 = urlQuery0.parse("t", charset0, true);
      // Undeclared exception!
      try { 
        urlQuery1.addAll(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UrlQuery urlQuery0 = UrlQuery.of("http", (Charset) null, true);
      assertNotNull(urlQuery0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("J\"x.u~ZR]lYJ=gZn;+&amp;&J\"x.u~ZR]lYJ=gZn;+=java.lang.String@0000000024", charset0);
      assertNotNull(urlQuery0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UrlQuery urlQuery0 = UrlQuery.of("ZEL1!dF&=&~sF", (Charset) null, true);
      CharSequence charSequence0 = urlQuery0.get("");
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("gbk", charset0, false, true);
      UrlQuery urlQuery1 = urlQuery0.parse("gbk&gbk=java.lang.Object@0000000009", charset0);
      assertSame(urlQuery1, urlQuery0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UrlQuery urlQuery0 = UrlQuery.of("?.N,8", (Charset) null, true);
      PercentCodec percentCodec0 = new PercentCodec();
      Integer integer0 = new Integer(102);
      urlQuery0.add((CharSequence) null, integer0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = urlQuery0.build(percentCodec0, percentCodec0, charset0);
      assertEquals("%2E%4E%2C%38", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, BatchUpdateException> hashMap0 = new HashMap<String, BatchUpdateException>();
      UrlQuery urlQuery0 = new UrlQuery(hashMap0);
      CharSequence charSequence0 = urlQuery0.get("|dUyEJ3$=m'Rjy=");
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of("gbk", charset0, false, true);
      UrlQuery urlQuery1 = urlQuery0.parse("/?", charset0, true);
      assertSame(urlQuery1, urlQuery0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UrlQuery urlQuery0 = new UrlQuery((Map<? extends CharSequence, ?>) null, false);
      UrlQuery urlQuery1 = urlQuery0.addAll((Map<? extends CharSequence, ?>) null);
      assertSame(urlQuery1, urlQuery0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UrlQuery urlQuery0 = new UrlQuery();
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery1 = urlQuery0.parse("/", charset0, false);
      assertSame(urlQuery0, urlQuery1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlQuery urlQuery0 = UrlQuery.of(",", charset0, false, true);
      HashMap<CharBuffer, String> hashMap0 = new HashMap<CharBuffer, String>();
      UrlQuery urlQuery1 = urlQuery0.addAll(hashMap0);
      assertSame(urlQuery1, urlQuery0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, BatchUpdateException> hashMap0 = new HashMap<String, BatchUpdateException>();
      UrlQuery urlQuery0 = new UrlQuery(hashMap0);
      String string0 = urlQuery0.toString();
      assertEquals("", string0);
  }
}
