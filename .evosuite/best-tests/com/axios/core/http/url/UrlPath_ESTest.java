/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 04:58:01 GMT 2024
 */

package com.axios.core.http.url;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.http.url.UrlPath;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UrlPath_ESTest extends UrlPath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlPath urlPath1 = urlPath0.addBefore("");
      String string0 = urlPath1.getSegment(1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      List<String> list0 = urlPath0.getSegments();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      UrlPath urlPath1 = urlPath0.add(charBuffer0);
      String string0 = urlPath1.getSegment(0);
      assertEquals("1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      urlPath0.add("");
      String string0 = urlPath0.getSegment('\u0000');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      // Undeclared exception!
      urlPath0.parse(charBuffer0, (Charset) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      CharBuffer charBuffer0 = CharBuffer.allocate(1568);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      char[] charArray0 = new char[7];
      charBuffer0.get(charArray0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        urlPath0.parse(charBuffer1, charset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.allocate(65279);
      // Undeclared exception!
      UrlPath.of(charBuffer0, charset0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(70);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Charset charset0 = Charset.defaultCharset();
      charBuffer0.compact();
      // Undeclared exception!
      try { 
        UrlPath.of(charBuffer1, charset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3060);
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of(charBuffer0, charset0);
      UrlPath urlPath1 = urlPath0.addBefore(charBuffer0);
      UrlPath urlPath2 = urlPath1.add(charBuffer0);
      // Undeclared exception!
      urlPath2.addBefore(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      CharBuffer charBuffer0 = CharBuffer.allocate(1534);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.put('1');
      charBuffer1.position(1534);
      // Undeclared exception!
      try { 
        urlPath0.addBefore(charBuffer1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(256);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      UrlPath urlPath0 = UrlPath.of(charBuffer1, (Charset) null);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        urlPath0.addBefore(charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      // Undeclared exception!
      try { 
        urlPath0.addBefore((CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Path segment must be not null!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(8234);
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of(charBuffer0, charset0);
      // Undeclared exception!
      urlPath0.add(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      CharBuffer charBuffer0 = CharBuffer.allocate(119);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 119, 119);
      char[] charArray0 = new char[1];
      charBuffer0.put(charArray0);
      // Undeclared exception!
      try { 
        urlPath0.add(charBuffer1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(70);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath0 = UrlPath.of(charBuffer1, charset0);
      charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        urlPath0.add(charBuffer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      // Undeclared exception!
      try { 
        urlPath0.add((CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Path segment must be not null!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      UrlPath urlPath1 = urlPath0.parse("1w", (Charset) null);
      assertSame(urlPath1, urlPath0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      Charset charset0 = Charset.defaultCharset();
      UrlPath urlPath1 = urlPath0.parse((CharSequence) null, charset0);
      assertSame(urlPath0, urlPath1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      UrlPath urlPath0 = UrlPath.of(charBuffer0, (Charset) null);
      urlPath0.setWithEndTag(true);
      String string0 = urlPath0.build((Charset) null);
      assertEquals("//", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      Charset charset0 = Charset.defaultCharset();
      String string0 = urlPath0.build(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      UrlPath urlPath0 = UrlPath.of(charBuffer0, (Charset) null);
      String string0 = urlPath0.build((Charset) null);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      UrlPath urlPath0 = UrlPath.of(charBuffer0, (Charset) null);
      UrlPath urlPath1 = urlPath0.parse("/", (Charset) null);
      assertSame(urlPath1, urlPath0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      UrlPath urlPath0 = UrlPath.of(charBuffer0, (Charset) null);
      String string0 = urlPath0.getSegment('a');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      urlPath0.addBefore(charBuffer0);
      // Undeclared exception!
      try { 
        urlPath0.getSegment((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UrlPath urlPath0 = new UrlPath();
      String string0 = urlPath0.getSegment(2633);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(256);
      UrlPath urlPath0 = UrlPath.of(charBuffer0, (Charset) null);
      List<String> list0 = urlPath0.getSegments();
      assertFalse(list0.isEmpty());
  }
}
