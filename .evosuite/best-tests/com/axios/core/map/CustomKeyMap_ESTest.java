/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 02:04:46 GMT 2024
 */

package com.axios.core.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.map.CaseInsensitiveMap;
import java.util.HashMap;
import java.util.Map;
import java.util.Spliterator;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CustomKeyMap_ESTest extends CustomKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>();
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, Object>(caseInsensitiveMap0);
      Spliterator<Map.Entry<Object, Object>> spliterator0 = (Spliterator<Map.Entry<Object, Object>>)caseInsensitiveMap1.spliterator();
      String string0 = "";
      caseInsensitiveMap1.put(spliterator0, "");
      Object object0 = caseInsensitiveMap1.customKey(caseInsensitiveMap0);
      caseInsensitiveMap0.put(object0, object0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        caseInsensitiveMap1.put(object0, object1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      CaseInsensitiveMap<String, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<String, Object>(585);
      Object object0 = caseInsensitiveMap0.customKey(hashMap0);
      hashMap0.put(object0, "");
      int int0 = 2773;
      Integer integer0 = new Integer(2773);
      CaseInsensitiveMap<Object, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, String>(2773);
      String string0 = "n K_5:0FKIU`5O?";
      // Undeclared exception!
      try { 
        caseInsensitiveMap1.remove((Object) hashMap0, (Object) "n K_5:0FKIU`5O?");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 4328;
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>(4328);
      String string0 = "";
      caseInsensitiveMap0.put("", "");
      caseInsensitiveMap0.put(caseInsensitiveMap0, "");
      // Undeclared exception!
      try { 
        caseInsensitiveMap0.containsKey(caseInsensitiveMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CaseInsensitiveMap<String, String> caseInsensitiveMap0 = new CaseInsensitiveMap<String, String>();
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, Object>(caseInsensitiveMap0);
      caseInsensitiveMap1.put(caseInsensitiveMap0, caseInsensitiveMap0);
      caseInsensitiveMap1.remove((Object) caseInsensitiveMap0, (Object) caseInsensitiveMap0);
      float float0 = 0.0F;
      CaseInsensitiveMap<Object, String> caseInsensitiveMap2 = null;
      try {
        caseInsensitiveMap2 = new CaseInsensitiveMap<Object, String>(0.0F, caseInsensitiveMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CaseInsensitiveMap<String, String> caseInsensitiveMap0 = new CaseInsensitiveMap<String, String>();
      CaseInsensitiveMap<Object, Integer> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, Integer>(1303);
      Integer integer0 = new Integer(1303);
      caseInsensitiveMap1.put(caseInsensitiveMap0, integer0);
      Integer integer1 = new Integer(0);
      caseInsensitiveMap1.put("", integer1);
      CaseInsensitiveMap<Object, Integer> caseInsensitiveMap2 = new CaseInsensitiveMap<Object, Integer>(caseInsensitiveMap1);
      Object object0 = caseInsensitiveMap2.customKey(caseInsensitiveMap1);
      caseInsensitiveMap1.containsKey(object0);
      caseInsensitiveMap1.remove((Object) "dFIL", (Object) "dFIL");
      Object object1 = new Object();
      Object object2 = caseInsensitiveMap0.customKey(object1);
      caseInsensitiveMap0.remove((Object) "dFIL", object1);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      CaseInsensitiveMap<Object, String> caseInsensitiveMap3 = new CaseInsensitiveMap<Object, String>(hashMap0);
      CaseInsensitiveMap<Integer, Integer> caseInsensitiveMap4 = new CaseInsensitiveMap<Integer, Integer>();
      caseInsensitiveMap4.customKey("");
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      caseInsensitiveMap2.compute("java.lang.string@0000000003", biFunction0);
      caseInsensitiveMap3.remove((Object) "a+BKgzQ#Bl/s&&", (Object) "a+BKgzQ#Bl/s&&");
      caseInsensitiveMap1.customKey(integer0);
      Integer integer2 = caseInsensitiveMap1.get(caseInsensitiveMap0);
      CaseInsensitiveMap<String, Integer> caseInsensitiveMap5 = new CaseInsensitiveMap<String, Integer>();
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap6 = new CaseInsensitiveMap<Object, Object>();
      Object object3 = caseInsensitiveMap6.customKey(object2);
      caseInsensitiveMap5.remove((Object) integer2, object3);
      Object object4 = new Object();
      caseInsensitiveMap3.remove(object4, (Object) caseInsensitiveMap5);
      CaseInsensitiveMap<String, Object> caseInsensitiveMap7 = new CaseInsensitiveMap<String, Object>(1303);
      caseInsensitiveMap7.customKey("a+BKgzQ#Bl/s&&");
      CaseInsensitiveMap<Integer, Integer> caseInsensitiveMap8 = new CaseInsensitiveMap<Integer, Integer>(0);
      caseInsensitiveMap8.remove(object0, (Object) "");
      assertFalse(caseInsensitiveMap2.equals((Object)caseInsensitiveMap1));
      assertFalse(caseInsensitiveMap1.equals((Object)caseInsensitiveMap2));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>();
      CaseInsensitiveMap<String, Object> caseInsensitiveMap1 = new CaseInsensitiveMap<String, Object>(737);
      CaseInsensitiveMap<Integer, String> caseInsensitiveMap2 = new CaseInsensitiveMap<Integer, String>();
      CaseInsensitiveMap<Integer, String> caseInsensitiveMap3 = new CaseInsensitiveMap<Integer, String>(737, caseInsensitiveMap2);
      Integer integer0 = new Integer((-4326));
      caseInsensitiveMap2.replace(integer0, "0gA'", "0gA'");
      Object object0 = caseInsensitiveMap3.customKey(caseInsensitiveMap1);
      caseInsensitiveMap1.put("0gA'", object0);
      Integer integer1 = new Integer(737);
      Object object1 = caseInsensitiveMap1.replace("0gA'", (Object) integer1);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>(1469);
      Object object0 = new Object();
      caseInsensitiveMap0.put(object0, "-!cIS!uMu.XFG5j");
      caseInsensitiveMap0.remove(object0);
      caseInsensitiveMap0.get((Object) null);
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, Object>(1469, 1469);
      caseInsensitiveMap1.replace((Object) caseInsensitiveMap0, (Object) null);
      assertTrue(caseInsensitiveMap0.isEmpty());
      assertEquals(0, caseInsensitiveMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>(4328);
      CaseInsensitiveMap<Object, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, String>(caseInsensitiveMap0);
      String string0 = "";
      caseInsensitiveMap0.put("", "");
      caseInsensitiveMap1.put(caseInsensitiveMap0, "");
      caseInsensitiveMap1.containsKey(caseInsensitiveMap0);
      CaseInsensitiveMap<Object, String> caseInsensitiveMap2 = new CaseInsensitiveMap<Object, String>();
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap3 = new CaseInsensitiveMap<Object, Object>(4328, 2210.3F);
      Object object0 = new Object();
      Object object1 = caseInsensitiveMap3.customKey(object0);
      Object object2 = caseInsensitiveMap2.customKey(object1);
      caseInsensitiveMap0.put(object2, (String) null);
      CaseInsensitiveMap<String, Object> caseInsensitiveMap4 = new CaseInsensitiveMap<String, Object>(1762, 4328);
      CaseInsensitiveMap<String, Object> caseInsensitiveMap5 = null;
      try {
        caseInsensitiveMap5 = new CaseInsensitiveMap<String, Object>((-2417.6382F), caseInsensitiveMap4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -2417.6382
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CaseInsensitiveMap<String, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<String, Object>(0, 1.0F);
      caseInsensitiveMap0.put((String) null, (Object) null);
      caseInsensitiveMap0.put("", "");
      boolean boolean0 = caseInsensitiveMap0.replace("", (Object) "", (Object) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CaseInsensitiveMap<String, Integer> caseInsensitiveMap0 = new CaseInsensitiveMap<String, Integer>();
      caseInsensitiveMap0.containsKey("com.axios.core.map.MapWrapper");
      caseInsensitiveMap0.put("", (Integer) null);
      caseInsensitiveMap0.remove((Object) "");
      CaseInsensitiveMap<Object, Integer> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, Integer>(559.0F, caseInsensitiveMap0);
      CaseInsensitiveMap<Object, String> caseInsensitiveMap2 = new CaseInsensitiveMap<Object, String>(1, 1);
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap3 = new CaseInsensitiveMap<Object, Object>(caseInsensitiveMap0);
      Object object0 = new Object();
      Object object1 = caseInsensitiveMap3.customKey(object0);
      caseInsensitiveMap2.put(object1, "");
      caseInsensitiveMap2.put((Object) null, (String) null);
      // Undeclared exception!
      try { 
        caseInsensitiveMap2.putAll((Map<?, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.CustomKeyMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CaseInsensitiveMap<String, String> caseInsensitiveMap0 = new CaseInsensitiveMap<String, String>();
      CaseInsensitiveMap<String, String> caseInsensitiveMap1 = new CaseInsensitiveMap<String, String>(687.474F, caseInsensitiveMap0);
      caseInsensitiveMap0.putAll(caseInsensitiveMap1);
      CaseInsensitiveMap<Integer, Object> caseInsensitiveMap2 = new CaseInsensitiveMap<Integer, Object>();
      Integer integer0 = new Integer((-199));
      Object object0 = caseInsensitiveMap2.replace(integer0, (Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CaseInsensitiveMap<String, String> caseInsensitiveMap0 = new CaseInsensitiveMap<String, String>();
      String string0 = caseInsensitiveMap0.replace("com.axios.core.map.CustomKeyMap", "com.axios.core.map.CustomKeyMap");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>();
      caseInsensitiveMap0.put("com.axios.core.map.CustomKeyMap", "com.axios.core.map.CustomKeyMap");
      caseInsensitiveMap0.remove((Object) "o3v'`u<zc\"4,R!");
      Object object0 = new Object();
      boolean boolean0 = caseInsensitiveMap0.remove((Object) "com.axios.core.map.CustomKeyMap", object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CaseInsensitiveMap<String, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      caseInsensitiveMap0.putAll(hashMap0);
      assertEquals(0, caseInsensitiveMap0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CaseInsensitiveMap<String, String> caseInsensitiveMap0 = new CaseInsensitiveMap<String, String>();
      CaseInsensitiveMap<String, Object> caseInsensitiveMap1 = new CaseInsensitiveMap<String, Object>(5448.328F, caseInsensitiveMap0);
      caseInsensitiveMap1.put("com.axios.core.map.CustomKeyMap", "com.axios.core.map.CaseInsensitiveMap");
      caseInsensitiveMap1.customKey(caseInsensitiveMap0);
      CaseInsensitiveMap<String, Integer> caseInsensitiveMap2 = new CaseInsensitiveMap<String, Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = caseInsensitiveMap2.replace("com.axios.core.map.CustomKeyMap", integer0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>();
      CaseInsensitiveMap<Integer, Object> caseInsensitiveMap1 = new CaseInsensitiveMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = caseInsensitiveMap1.replace(integer0, (Object) integer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CaseInsensitiveMap<String, Integer> caseInsensitiveMap0 = new CaseInsensitiveMap<String, Integer>(4950);
      CaseInsensitiveMap<Integer, Integer> caseInsensitiveMap1 = new CaseInsensitiveMap<Integer, Integer>();
      caseInsensitiveMap1.containsKey(caseInsensitiveMap0);
      CaseInsensitiveMap<String, Object> caseInsensitiveMap2 = new CaseInsensitiveMap<String, Object>();
      CaseInsensitiveMap caseInsensitiveMap3 = (CaseInsensitiveMap)caseInsensitiveMap2.customKey(caseInsensitiveMap0);
      assertTrue(caseInsensitiveMap3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>();
      caseInsensitiveMap0.put((Object) null, "l0u@9)");
      caseInsensitiveMap0.put((Object) null, "");
      caseInsensitiveMap0.put((Object) null, (Object) null);
      caseInsensitiveMap0.put((Object) null, "");
      Integer integer0 = new Integer(625);
      caseInsensitiveMap0.remove((Object) integer0);
      int int0 = 0;
      CaseInsensitiveMap<Integer, Integer> caseInsensitiveMap1 = new CaseInsensitiveMap<Integer, Integer>(0, 3042.111F);
      CaseInsensitiveMap<Object, Integer> caseInsensitiveMap2 = new CaseInsensitiveMap<Object, Integer>(625, caseInsensitiveMap1);
      Integer integer1 = new Integer(625);
      caseInsensitiveMap2.put(integer1, integer1);
      Object object0 = new Object();
      caseInsensitiveMap2.customKey(object0);
      CaseInsensitiveMap<String, Object> caseInsensitiveMap3 = null;
      try {
        caseInsensitiveMap3 = new CaseInsensitiveMap<String, Object>(0, (-2286.75F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -2286.75
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CaseInsensitiveMap<Object, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, Object>();
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Object object1 = caseInsensitiveMap0.put(object0, integer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CaseInsensitiveMap<Integer, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Integer, Object>();
      CaseInsensitiveMap<Object, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, String>();
      Object object0 = new Object();
      Object object1 = caseInsensitiveMap1.customKey(object0);
      Object object2 = caseInsensitiveMap0.remove(object1);
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CaseInsensitiveMap<String, Integer> caseInsensitiveMap0 = new CaseInsensitiveMap<String, Integer>();
      CaseInsensitiveMap<String, Integer> caseInsensitiveMap1 = new CaseInsensitiveMap<String, Integer>(caseInsensitiveMap0);
      assertTrue(caseInsensitiveMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CaseInsensitiveMap<Integer, Object> caseInsensitiveMap0 = new CaseInsensitiveMap<Integer, Object>();
      CaseInsensitiveMap<Object, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, String>(537);
      Object object0 = caseInsensitiveMap1.customKey(caseInsensitiveMap0);
      Object object1 = caseInsensitiveMap0.get(object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CaseInsensitiveMap<String, String> caseInsensitiveMap0 = new CaseInsensitiveMap<String, String>(1);
      assertEquals(0, caseInsensitiveMap0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CaseInsensitiveMap<String, String> caseInsensitiveMap0 = new CaseInsensitiveMap<String, String>();
      CaseInsensitiveMap<String, String> caseInsensitiveMap1 = new CaseInsensitiveMap<String, String>(caseInsensitiveMap0);
      caseInsensitiveMap1.put("", "");
      caseInsensitiveMap1.replace("", "");
      String string0 = caseInsensitiveMap1.get(caseInsensitiveMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CaseInsensitiveMap<String, Integer> caseInsensitiveMap0 = new CaseInsensitiveMap<String, Integer>();
      Integer integer0 = new Integer((-61));
      boolean boolean0 = caseInsensitiveMap0.replace("G&=~Xc!m", integer0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CaseInsensitiveMap<Integer, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Integer, String>();
      CaseInsensitiveMap<Object, String> caseInsensitiveMap1 = new CaseInsensitiveMap<Object, String>();
      boolean boolean0 = caseInsensitiveMap1.containsKey(caseInsensitiveMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer(2760);
      CaseInsensitiveMap<Object, String> caseInsensitiveMap0 = new CaseInsensitiveMap<Object, String>(2760);
      caseInsensitiveMap0.remove((Object) hashMap0, (Object) "Ym");
      String string0 = caseInsensitiveMap0.remove((Object) integer0);
      assertNull(string0);
  }
}
