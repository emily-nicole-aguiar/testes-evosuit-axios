/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 04:44:53 GMT 2024
 */

package com.axios.core.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.map.TableMap;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TableMap_ESTest extends TableMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[11];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimalArray0[5] = bigDecimal1;
      TableMap<BigDecimal, Object> tableMap0 = new TableMap<BigDecimal, Object>(bigDecimalArray0, bigDecimalArray0);
      List<Object> list0 = tableMap0.getValues(bigDecimal0);
      assertFalse(tableMap0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "com.axios.core.map.TableMap$1";
      TableMap<String, String> tableMap0 = new TableMap<String, String>(stringArray0, stringArray0);
      tableMap0.putAll(tableMap0);
      assertEquals(7, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractMap.SimpleEntry[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry[]) Array.newInstance(AbstractMap.SimpleEntry.class, 7);
      TableMap<AbstractMap.SimpleEntry<Integer, String>, TableMap<Integer, Object>> tableMap0 = new TableMap<AbstractMap.SimpleEntry<Integer, String>, TableMap<Integer, Object>>((AbstractMap.SimpleEntry<Integer, String>[]) abstractMap_SimpleEntryArray0, (TableMap<Integer, Object>[]) null);
      tableMap0.remove((Object) abstractMap_SimpleEntryArray0[2]);
      assertEquals(6, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      AbstractMap.SimpleEntry[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      Integer integer0 = new Integer(3195);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleEntryArray0[2], integer0);
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry0;
      TableMap<String, AbstractMap.SimpleEntry<Object, Integer>> tableMap0 = new TableMap<String, AbstractMap.SimpleEntry<Object, Integer>>(stringArray0, (AbstractMap.SimpleEntry<Object, Integer>[]) abstractMap_SimpleEntryArray0);
      tableMap0.getKey(abstractMap_SimpleEntry0);
      assertEquals(1, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[3] = "";
      Integer[] integerArray0 = new Integer[0];
      TableMap<String, Integer> tableMap0 = new TableMap<String, Integer>(stringArray0, integerArray0);
      Integer integer0 = new Integer((-1893));
      tableMap0.replace("", integer0, integer0);
      assertFalse(tableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[11];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.valueOf((long) 0, (-1));
      TableMap<BigDecimal, Object> tableMap0 = new TableMap<BigDecimal, Object>(bigDecimalArray0, bigDecimalArray0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      tableMap0.compute(bigDecimal1, biFunction0);
      assertEquals(11, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList[] linkedListArray0 = (LinkedList[]) Array.newInstance(LinkedList.class, 1);
      TableMap<LinkedList<BigDecimal>, String> tableMap0 = new TableMap<LinkedList<BigDecimal>, String>((LinkedList<BigDecimal>[]) linkedListArray0, (String[]) null);
      int int0 = tableMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Integer[] integerArray0 = new Integer[0];
      TableMap<String, Integer> tableMap0 = new TableMap<String, Integer>(stringArray0, integerArray0);
      Set<String> set0 = tableMap0.keySet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TableMap<LinkedList<String>, Integer> tableMap0 = new TableMap<LinkedList<String>, Integer>(0);
      Iterator<Map.Entry<LinkedList<String>, Integer>> iterator0 = (Iterator<Map.Entry<LinkedList<String>, Integer>>)tableMap0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TableMap<LinkedList<BigDecimal>, BigDecimal> tableMap0 = new TableMap<LinkedList<BigDecimal>, BigDecimal>(0);
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      tableMap0.put(linkedList0, bigDecimal0);
      List<LinkedList<BigDecimal>> list0 = tableMap0.getKeys(bigDecimal0);
      assertTrue(list0.contains(linkedList0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList[] linkedListArray0 = (LinkedList[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      linkedListArray0[0] = linkedList0;
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimalArray0[0] = bigDecimal0;
      TableMap<LinkedList<BigDecimal>, BigDecimal> tableMap0 = new TableMap<LinkedList<BigDecimal>, BigDecimal>((LinkedList<BigDecimal>[]) linkedListArray0, bigDecimalArray0);
      LinkedList<BigDecimal> linkedList1 = tableMap0.getKey(bigDecimal0);
      assertEquals(3, tableMap0.size());
      assertNotNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TableMap<Object, Object> tableMap0 = new TableMap<Object, Object>((Object[]) null, (Object[]) null);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)tableMap0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TableMap<String, Integer> tableMap0 = new TableMap<String, Integer>(0);
      Integer integer0 = new Integer(1303);
      tableMap0.put((String) null, integer0);
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)tableMap0.entrySet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TableMap<Object, Integer> tableMap0 = new TableMap<Object, Integer>(0);
      // Undeclared exception!
      try { 
        tableMap0.putAll((Map<?, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.map.TableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[5];
      TableMap<String, String> tableMap0 = new TableMap<String, String>(stringArray0, stringArray0);
      String[] stringArray1 = new String[7];
      TableMap<String, String> tableMap1 = new TableMap<String, String>(stringArray1, stringArray0);
      // Undeclared exception!
      try { 
        tableMap0.putAll(tableMap1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList[] linkedListArray0 = (LinkedList[]) Array.newInstance(LinkedList.class, 3);
      LinkedList[] linkedListArray1 = (LinkedList[]) Array.newInstance(LinkedList.class, 5);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedListArray1[3] = linkedList0;
      TableMap<LinkedList<String>, LinkedList<Object>> tableMap0 = new TableMap<LinkedList<String>, LinkedList<Object>>((LinkedList<String>[]) linkedListArray0, (LinkedList<Object>[]) linkedListArray1);
      // Undeclared exception!
      try { 
        tableMap0.getKeys(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TableMap<Object, String> tableMap0 = null;
      try {
        tableMap0 = new TableMap<Object, String>((-1893));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1893
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TableMap<BigDecimal, String> tableMap0 = new TableMap<BigDecimal, String>(0);
      int int0 = tableMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[8];
      BigDecimal bigDecimal0 = new BigDecimal(252);
      bigDecimalArray0[3] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal((double) 252);
      bigDecimalArray0[4] = bigDecimal1;
      LinkedList[] linkedListArray0 = (LinkedList[]) Array.newInstance(LinkedList.class, 3);
      TableMap<BigDecimal, LinkedList<Integer>> tableMap0 = new TableMap<BigDecimal, LinkedList<Integer>>(bigDecimalArray0, (LinkedList<Integer>[]) linkedListArray0);
      // Undeclared exception!
      try { 
        tableMap0.getValues(bigDecimalArray0[3]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[8];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimalArray0[0];
      BigInteger bigInteger0 = BigInteger.TEN;
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0, 252, mathContext0);
      bigDecimalArray0[2] = bigDecimal1;
      bigDecimalArray0[4] = bigDecimalArray0[1];
      LinkedList[] linkedListArray0 = (LinkedList[]) Array.newInstance(LinkedList.class, 3);
      TableMap<BigDecimal, LinkedList<Integer>> tableMap0 = new TableMap<BigDecimal, LinkedList<Integer>>(bigDecimalArray0, (LinkedList<Integer>[]) linkedListArray0);
      // Undeclared exception!
      try { 
        tableMap0.getValues(bigDecimalArray0[4]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[16];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimalArray0[0] = bigDecimal0;
      TableMap<BigDecimal, Object> tableMap0 = new TableMap<BigDecimal, Object>(bigDecimalArray0, bigDecimalArray0);
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, "nc|KUj6[");
      tableMap0.getKeys(abstractMap_SimpleEntry0);
      assertFalse(tableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[8];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimalArray0[0] = bigDecimal0;
      LinkedList[] linkedListArray0 = (LinkedList[]) Array.newInstance(LinkedList.class, 3);
      TableMap<BigDecimal, LinkedList<Integer>> tableMap0 = new TableMap<BigDecimal, LinkedList<Integer>>(bigDecimalArray0, (LinkedList<Integer>[]) linkedListArray0);
      List<LinkedList<Integer>> list0 = tableMap0.getValues(bigDecimalArray0[0]);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 12);
      AbstractMap.SimpleImmutableEntry[] abstractMap_SimpleImmutableEntryArray1 = (AbstractMap.SimpleImmutableEntry[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", "");
      abstractMap_SimpleImmutableEntryArray1[0] = abstractMap_SimpleImmutableEntry0;
      TableMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>> tableMap0 = new TableMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleImmutableEntry<String, Object>>((AbstractMap.SimpleImmutableEntry<String, Object>[]) abstractMap_SimpleImmutableEntryArray0, (AbstractMap.SimpleImmutableEntry<String, Object>[]) abstractMap_SimpleImmutableEntryArray1);
      // Undeclared exception!
      try { 
        tableMap0.entrySet();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[3];
      AbstractMap.SimpleImmutableEntry[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      TableMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> tableMap0 = new TableMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(stringArray0, (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) abstractMap_SimpleImmutableEntryArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      tableMap0.forEach(consumer0);
      assertEquals(3, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer[] integerArray0 = new Integer[2];
      TableMap<Object, Integer> tableMap0 = new TableMap<Object, Integer>(objectArray0, integerArray0);
      assertFalse(tableMap0.isEmpty());
      
      tableMap0.remove(object0);
      assertTrue(tableMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[2] = "AWIS;kD=-E";
      TableMap<String, LinkedHashSet<Object>> tableMap0 = new TableMap<String, LinkedHashSet<Object>>(stringArray0, (LinkedHashSet<Object>[]) null);
      tableMap0.remove((Object) "AWIS;kD=-E");
      assertEquals(9, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TableMap<LinkedHashSet<Object>, AbstractMap.SimpleEntry<BigDecimal, LinkedHashSet<Object>>> tableMap0 = new TableMap<LinkedHashSet<Object>, AbstractMap.SimpleEntry<BigDecimal, LinkedHashSet<Object>>>(1638);
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      Object object0 = tableMap0.remove((Object) linkedList0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList[] linkedListArray0 = (LinkedList[]) Array.newInstance(LinkedList.class, 8);
      TableMap<LinkedHashSet<Object>, LinkedList<LinkedHashSet<Object>>> tableMap0 = new TableMap<LinkedHashSet<Object>, LinkedList<LinkedHashSet<Object>>>((LinkedHashSet<Object>[]) null, (LinkedList<LinkedHashSet<Object>>[]) linkedListArray0);
      tableMap0.getKey(linkedListArray0[6]);
      assertEquals(0, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList[] linkedListArray0 = (LinkedList[]) Array.newInstance(LinkedList.class, 1);
      String[] stringArray0 = new String[5];
      TableMap<LinkedList<Integer>, String> tableMap0 = new TableMap<LinkedList<Integer>, String>((LinkedList<Integer>[]) linkedListArray0, stringArray0);
      tableMap0.getKey("");
      assertEquals(1, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "d!j4Wm2%f,ImWN_,&f";
      TableMap<String, Object> tableMap0 = new TableMap<String, Object>(stringArray0, stringArray0);
      Object object0 = tableMap0.get("d!j4Wm2%f,ImWN_,&f");
      assertNotNull(object0);
      assertEquals(4, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[3];
      AbstractMap.SimpleImmutableEntry[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      TableMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> tableMap0 = new TableMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(stringArray0, (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) abstractMap_SimpleImmutableEntryArray0);
      tableMap0.get(stringArray0[2]);
      assertEquals(3, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList[] linkedListArray0 = (LinkedList[]) Array.newInstance(LinkedList.class, 1);
      String[] stringArray0 = new String[5];
      TableMap<LinkedList<Integer>, String> tableMap0 = new TableMap<LinkedList<Integer>, String>((LinkedList<Integer>[]) linkedListArray0, stringArray0);
      boolean boolean0 = tableMap0.containsValue(stringArray0[4]);
      assertTrue(boolean0);
      assertEquals(1, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TableMap<Object, String> tableMap0 = new TableMap<Object, String>(3206);
      boolean boolean0 = tableMap0.containsValue("2F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[3];
      TableMap<String, String> tableMap0 = new TableMap<String, String>(stringArray0, stringArray0);
      boolean boolean0 = tableMap0.containsKey(stringArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TableMap<LinkedList<Object>, Object> tableMap0 = new TableMap<LinkedList<Object>, Object>(0);
      TableMap<String, Integer> tableMap1 = new TableMap<String, Integer>(0);
      boolean boolean0 = tableMap1.containsKey(tableMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TableMap<Integer, Object> tableMap0 = new TableMap<Integer, Object>(0);
      assertTrue(tableMap0.isEmpty());
      
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      tableMap0.merge(integer0, "", biFunction0);
      boolean boolean0 = tableMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TableMap<Integer, Object> tableMap0 = new TableMap<Integer, Object>(0);
      boolean boolean0 = tableMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TableMap<LinkedList<Integer>, LinkedHashSet<BigDecimal>> tableMap0 = new TableMap<LinkedList<Integer>, LinkedHashSet<BigDecimal>>(644);
      tableMap0.clear();
      assertEquals(0, tableMap0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TableMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>> tableMap0 = new TableMap<ArrayList<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>(252);
      Collection<AbstractMap.SimpleImmutableEntry<Object, Integer>> collection0 = tableMap0.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TableMap<Object, Integer> tableMap0 = new TableMap<Object, Integer>(0);
      Set<Object> set0 = tableMap0.keySet();
      assertFalse(set0.contains(0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[3];
      TableMap<String, String> tableMap0 = new TableMap<String, String>(stringArray0, stringArray0);
      String string0 = tableMap0.toString();
      assertEquals("TableMap{keys=[null, null, null], values=[null, null, null]}", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[3];
      TableMap<String, Object> tableMap0 = new TableMap<String, Object>(stringArray0, stringArray0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      // Undeclared exception!
      try { 
        tableMap0.replaceAll(biFunction0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // setValue not supported.
         //
         verifyException("com.axios.core.map.TableMap$Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList[] linkedListArray0 = (LinkedList[]) Array.newInstance(LinkedList.class, 1);
      String[] stringArray0 = new String[5];
      TableMap<LinkedList<Integer>, String> tableMap0 = new TableMap<LinkedList<Integer>, String>((LinkedList<Integer>[]) linkedListArray0, stringArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      tableMap0.forEach(consumer0);
      assertEquals(1, tableMap0.size());
  }
}
