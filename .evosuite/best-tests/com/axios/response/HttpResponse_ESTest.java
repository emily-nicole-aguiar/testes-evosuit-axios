/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 04:40:20 GMT 2024
 */

package com.axios.response;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.axios.core.config.global.GlobalCookieManager;
import com.axios.core.connection.Connection;
import com.axios.response.HttpResponse;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.net.CookieManager;
import java.net.CookieStore;
import java.net.HttpCookie;
import java.net.Proxy;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpResponse_ESTest extends HttpResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, true, true);
      httpResponse0.status = 300;
      boolean boolean0 = httpResponse0.isOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL uRL0 = MockURL.getHttpExample();
          Connection connection0 = Connection.create(uRL0, (Proxy) null);
          Connection connection1 = connection0.connect();
          HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, true, true);
          File file0 = MockFile.createTempFile("M:o[K1PF", "HTTP/1.1");
          // Undeclared exception!
          try { 
            httpResponse0.writeBody(file0, "");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/M:o[K1PF0HTTP/1.1.temp\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // com.axios.core.tool.file.FileTool.delFile(FileTool.java:276)
             // com.axios.core.tool.file.FileTool.del(FileTool.java:126)
             // com.axios.response.HttpResponse.writeBody(HttpResponse.java:362)
             // sun.reflect.GeneratedMethodAccessor217.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, true, true);
      httpResponse0.status = 252;
      HttpResponse httpResponse1 = httpResponse0.sync();
      assertSame(httpResponse1, httpResponse0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      httpResponse0.status = (-841);
      HttpResponse httpResponse1 = httpResponse0.sync();
      assertSame(httpResponse0, httpResponse1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      HttpResponse httpResponse1 = httpResponse0.sync();
      httpResponse1.status = (-3181);
      int int0 = httpResponse1.getStatus();
      assertEquals((-3181), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = new Connection(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, true, true);
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      doReturn((List<HttpCookie>) null).when(cookieStore0).get(any(java.net.URI.class));
      CookieManager cookieManager0 = mock(CookieManager.class, new ViolatedAssumptionAnswer());
      doReturn(cookieStore0).when(cookieManager0).getCookieStore();
      GlobalCookieManager.setCookieManager(cookieManager0);
      List<HttpCookie> list0 = httpResponse0.getCookies();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, true, true);
      List<HttpCookie> list0 = HttpCookie.parse("o=&d%+VH9N%");
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(cookieStore0).get(any(java.net.URI.class));
      CookieManager cookieManager0 = mock(CookieManager.class, new ViolatedAssumptionAnswer());
      doReturn(cookieStore0).when(cookieManager0).getCookieStore();
      GlobalCookieManager.setCookieManager(cookieManager0);
      List<HttpCookie> list1 = httpResponse0.getCookies();
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = new Connection(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, true, true);
      MockFile mockFile0 = new MockFile(".");
      File file0 = httpResponse0.completeFileNameFromHeader(mockFile0);
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = new Connection(uRL0, (Proxy) null);
      connection0.connect();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, true, true);
      MockFile mockFile0 = new MockFile("    ");
      // Undeclared exception!
      try { 
        httpResponse0.writeBodyForFile(mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("com.axios.core.tool.file.FileTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, true, true);
      // Undeclared exception!
      try { 
        httpResponse0.writeBodyForFile((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [targetFileOrDir] must be not null!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        httpResponse0.writeBody("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("com.axios.core.tool.file.FileTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, true, true);
      // Undeclared exception!
      try { 
        httpResponse0.writeBody("t8x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      // Undeclared exception!
      try { 
        httpResponse0.writeBody((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [targetFileOrDir] must be not null!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, true, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 404);
      // Undeclared exception!
      try { 
        httpResponse0.writeBody((OutputStream) bufferedOutputStream0, false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, true, true);
      // Undeclared exception!
      try { 
        httpResponse0.writeBody((OutputStream) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [out] must be not null!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, true, true);
      // Undeclared exception!
      try { 
        httpResponse0.writeBody((File) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [targetFileOrDir] must be not null!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("HTTP");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      MockFile mockFile0 = new MockFile("HTTP/1.1", "");
      // Undeclared exception!
      try { 
        httpResponse0.writeBody((File) mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("com.axios.core.tool.file.FileTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      MockFile mockFile0 = new MockFile("HTTP/1.1", "");
      // Undeclared exception!
      try { 
        httpResponse0.writeBody((File) mockFile0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      // Undeclared exception!
      try { 
        httpResponse0.writeBody((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [targetFileOrDir] must be not null!
         //
         verifyException("com.axios.core.assertion.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      CookieManager cookieManager0 = mock(CookieManager.class, new ViolatedAssumptionAnswer());
      doReturn((CookieStore) null).when(cookieManager0).getCookieStore();
      GlobalCookieManager.setCookieManager(cookieManager0);
      // Undeclared exception!
      try { 
        httpResponse0.getCookies();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.config.global.GlobalCookieManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      CookieManager cookieManager0 = mock(CookieManager.class, new ViolatedAssumptionAnswer());
      doReturn((CookieStore) null).when(cookieManager0).getCookieStore();
      GlobalCookieManager.setCookieManager(cookieManager0);
      // Undeclared exception!
      try { 
        httpResponse0.getCookieValue("M:o[K1PF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.config.global.GlobalCookieManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      CookieManager cookieManager0 = mock(CookieManager.class, new ViolatedAssumptionAnswer());
      doReturn((CookieStore) null).when(cookieManager0).getCookieStore();
      GlobalCookieManager.setCookieManager(cookieManager0);
      // Undeclared exception!
      try { 
        httpResponse0.getCookie("r8(u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.core.config.global.GlobalCookieManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      // Undeclared exception!
      try { 
        httpResponse0.contentLength();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      // Undeclared exception!
      try { 
        httpResponse0.completeFileNameFromHeader((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.response.HttpResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HttpResponse httpResponse0 = null;
      try {
        httpResponse0 = new HttpResponse((Connection) null, (Charset) null, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.axios.response.HttpResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      MockFile mockFile0 = new MockFile((String) null, "");
      // Undeclared exception!
      httpResponse0.completeFileNameFromHeader(mockFile0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, true, true);
      File file0 = MockFile.createTempFile("M:o[K1PF", "HTTP/1.1");
      File file1 = httpResponse0.completeFileNameFromHeader(file0);
      assertTrue(file1.canRead());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, true, true);
      HttpCookie httpCookie0 = httpResponse0.getCookie(")");
      assertNull(httpCookie0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      byte[] byteArray0 = httpResponse0.bodyBytes();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      httpResponse0.close();
      assertEquals(404, httpResponse0.getStatus());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      String string0 = httpResponse0.contentEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = null;
      try {
        httpResponse0 = new HttpResponse(connection0, (Charset) null, false, false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Charset charset0 = Charset.defaultCharset();
      HttpResponse httpResponse0 = null;
      try {
        httpResponse0 = new HttpResponse(connection0, charset0, true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("com.axios.response.HttpResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      String string0 = httpResponse0.toString();
      assertEquals("Response Headers: \r\nResponse Body: \r\n    null\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL uRL0 = MockURL.getHttpExample();
          Connection connection0 = Connection.create(uRL0, (Proxy) null);
          Connection connection1 = connection0.connect();
          HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, true, true);
          MockFile mockFile0 = new MockFile("HTTP/1.1", "#");
          // Undeclared exception!
          try { 
            httpResponse0.writeBody((File) mockFile0, "#");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/emily.aguiar/axios/HTTP/1.1/#.#\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // com.axios.core.tool.file.FileTool.delFile(FileTool.java:276)
             // com.axios.core.tool.file.FileTool.del(FileTool.java:126)
             // com.axios.response.HttpResponse.writeBody(HttpResponse.java:362)
             // sun.reflect.GeneratedMethodAccessor217.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      // Undeclared exception!
      try { 
        httpResponse0.bodyStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      String string0 = httpResponse0.getCookieValue("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      doReturn((List<HttpCookie>) null).when(cookieStore0).get(any(java.net.URI.class));
      CookieManager cookieManager0 = mock(CookieManager.class, new ViolatedAssumptionAnswer());
      doReturn(cookieStore0).when(cookieManager0).getCookieStore();
      GlobalCookieManager.setCookieManager(cookieManager0);
      HttpCookie httpCookie0 = httpResponse0.getCookie("");
      assertNull(httpCookie0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      assertFalse(httpResponse0.isOk());
      
      httpResponse0.status = 200;
      boolean boolean0 = httpResponse0.isOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      boolean boolean0 = httpResponse0.isOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      httpResponse0.status = (-841);
      boolean boolean0 = httpResponse0.isOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      String string0 = httpResponse0.getCookieStr();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      File file0 = MockFile.createTempFile("M:o[K1PF", "HTTP/1.1");
      // Undeclared exception!
      try { 
        httpResponse0.writeBodyForFile(file0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = new Connection(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, true, true);
      // Undeclared exception!
      httpResponse0.writeBody("");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection0, (Charset) null, false, true);
      boolean boolean0 = httpResponse0.isGzip();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      int int0 = httpResponse0.getStatus();
      assertEquals(404, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      List<HttpCookie> list0 = httpResponse0.getCookies();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      String string0 = httpResponse0.body();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      boolean boolean0 = httpResponse0.isChunked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = Connection.create(uRL0, (Proxy) null);
      Connection connection1 = connection0.connect();
      HttpResponse httpResponse0 = new HttpResponse(connection1, (Charset) null, false, true);
      boolean boolean0 = httpResponse0.isDeflate();
      assertFalse(boolean0);
  }
}
